Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components.Services
Imports Mes
Imports System.IO.Ports
Imports System.Text

Public Class laneSubStackSystem
    Inherits systemControlPrototype
    Implements IFinishableStation
    Implements IMesLinkEntry

    'ready mount to loading arm
    ReadOnly Property PickZoneInfo As shiftDataCollection
        Get
            Return laneBridge.TargetPositionInfo
        End Get
    End Property
    Property ComPort As String
        Get
            Return __serialPort.PortName
        End Get
        Set(value As String)
            '1. com port name
            '2. baud rate
            '3. odd check
            '4. data bit length
            '5. stop bit
            __serialPort = New SerialPort(value,
                                          9600,
                                          Parity.None,
                                          8,
                                          StopBits.One)

            Try
                'reopen , and clear buffer content
                With __serialPort
                    .Open()
                    .DiscardInBuffer()
                    .DiscardOutBuffer()
                    .Encoding = Encoding.ASCII
                    comOpen = __serialPort.IsOpen  'if serialPort open successed, comOpen = True
                End With
            Catch ex As Exception
                comOpen = False
                MsgBox("Error Open: " & ex.Message)
            End Try

        End Set
    End Property

    Public genericSettingReference As settingBlock  'Ready link to system setting block , Hsien , 2015.05.06
    Public mesCassetteLocation As CassetteLoc = CassetteLoc.Lp1
    Public Property MesInterface As mesController Implements IMesLinkEntry.MesInterface

    Dim __serialPort As SerialPort = New SerialPort
    Dim comOpen As Boolean = False 'serialPort opened ornot

#Region "Data Declare"
    Enum IgniteEnum
        _0
        _10
        _100
        _110
    End Enum
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags 'used for ignite control
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations
#End Region

#Region "control members"
    Public laneBridge As clsLoadingPickerFilter = New clsLoadingPickerFilter With {.IsEnabled = True}
    Public conveyorSubSystem As conveyorSubSystem = New conveyorSubSystem With {.IsEnabled = True}
    Public stackSubSystem As StackSystemBase = New StackSystemBase

    Dim waferLoadingTimer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 500)}  'Hsien , 2015.04.30 , used to delay-sensing
    Public waferLoadingTonqueSenser As sensorControl = New sensorControl
    Dim PreparedCasstteId As String = ""

#End Region



    Function initMappingAndSetup() As Integer

        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
        End With
        With laneBridge
            .TargetPositionInfo = New shiftDataCollection With {.DataType = GetType(gintechIOXWaferData),
                                                               .DataCount = 5}
            .relatedFlags.AddRange(.TargetPositionInfo.ModuleAction.FlagElementsArray)  'for unit test use
        End With

        'configure relation between conveyorSystem and Cassette
        '============================================================
        '           Loader and Conveyer Flag Linkin
        '============================================================
        '下料卡匣可升降條件判別
        With stackSubSystem
            ._cassetteLoad.extensionSequence = AddressOf readRFID   'hsien , attach the extension sequence  , 2015.10.26

            ._stackWaferPlace.ConveyerMotionOkCasAction = AddressOf conveyorModuleAction 'sensing the conveyor signal
            ._stackWaferPlace.PlaceWaferOnConveyerOK = AddressOf cassetteStepDownFinished 'TempBypassCheckSensor '升降馬達移動完成後,把記憶資料重置
            ._stackWaferPlace.ConveyerMotionReset = Sub() conveyorSubSystem.ConveyorTongue.OccupiedStatus.DataCollection(0).ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED)

            ._cassetteTransport.cassetteHadArrived = AddressOf cassetteArrivedAction    'commuicating with the MES 
        End With
        With conveyorSubSystem.loadingBuffer
            .loadingCassetteReady = Function() As Boolean
                                        Return stackSubSystem.commonFlags.viewFlag(flagsInLoaderUnloader.CasOn_UD_ConveyerReady_f)
                                    End Function
            .UpstreamStations = New List(Of IFinishableStation) From {stackSubSystem._cassetteTransport}
        End With

        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = Function() (0)
        systemMainState = systemStatesEnum.IGNITE
        Return 0
    End Function

    Function initPostLink() As Integer
        '------------------------------------
        '   Loading Bridge Configuration
        '------------------------------------
        With laneBridge
            .ConveyorLaneMaskReference = conveyorSubSystem.ConveyorPickZone
            'not delcare here, because there are 2 lanes with different SourcePositionInfo configuration

            .SourcePositionInfoModuleAction = Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(4))
            .SourcePositionInfo.AddRange({
            Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(0)),
            Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(1)),
            Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(2)),
            Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(3)),
            Function() (conveyorSubSystem.ConveyorPickZone.OccupiedStatus.DataCollection(4))})

        End With


        '----------------------
        '   Disable wafer time/sensor
        '----------------------
        waferLoadingTimer.IsEnabled = False
        waferLoadingTonqueSenser.IsEnabled = False


        Return 0
    End Function

    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initLinkPause),
                                   New Func(Of Integer)(AddressOf initMappingAndSetup),
                                   New Func(Of Integer)(AddressOf initSubsystemInitialize),
                                   New Func(Of Integer)(AddressOf initEnableAllDrives),
                                   New Func(Of Integer)(AddressOf initPostLink)) ',
    End Sub


    Protected Function stateIgnite() As Integer
        Ignite(systemSubState)
        Return 0
    End Function
    Private Function Ignite(ByRef cStep As IgniteEnum) As Integer
        'Static StationCollection As List(Of IFinishableStation) = New List(Of IFinishableStation) From {Lane1, Lane2, NgPicker}
        Static StationCollection As List(Of IFinishableStation) = New List(Of IFinishableStation) From {conveyorSubSystem} ', stackSubSystem}   'Hsien , 2015.04.23

        Select Case cStep
            Case IgniteEnum._0
                '-----------------------------
                '   Let all ignite
                '-----------------------------
                If (FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)) Then '等待啟動flag
                    '設定所有子站開始復歸
                    StationCollection.ForEach(Function(obj As IFinishableStation) (obj.FinishableFlags.setFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)))
                    cStep = IgniteEnum._10
                End If

            Case IgniteEnum._10 '等待所有復歸完成
                If StationCollection.TrueForAll(Function(obj As IFinishableStation) (Not obj.FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE))) = True Then
                    FinishableFlags.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False) '清除自己的ignite task

                    '--------------------------
                    '   Cassette Sub System Start
                    '--------------------------
                    stackSubSystem.commonFlags.setFlag(flagsInLoaderUnloader.Start_f)

                    systemMainState = systemStatesEnum.EXECUTE  'hsien , come to execute
                End If
        End Select
        Return 0
    End Function

    Dim cassetteActionState As Integer = 0
    Function cassetteArrivedAction() As Boolean
        'bridge cassette external flag and mes flag

        Select Case cassetteActionState
            Case 0
                'cassette id had read on IN_CONVEYOR_READY position
                If (Not genericSettingReference.RFIDEnabled) Then
                    '-------------------------
                    '   RFID bypassed
                    '-------------------------
                    stackSubSystem.CassetteId = String.Format("DUMMY{0}", DateTime.Now.ToString) 'Hsien , 2015.10.26 , report dummy id
                Else
                    '-------------------------
                    '   Transfer PreparedID to CassetteID
                    '-------------------------
                    With stackSubSystem
                        .CassetteId = PreparedCasstteId
                    End With
                End If

                cassetteActionState = 25

            Case 25
                '---------------
                '   TRIGGER THE MES
                '---------------
                ' MesInterface.CassetteData(Me.mesCassetteLocation) = New CassetteData With {.CntId = cassetteSubSystem.CassetteId}   'cassette id had read in casstteLoad

                MesInterface.FlagCassetteRun(Me.mesCassetteLocation, stackSubSystem.CassetteId) = True  'set-up and trigger run

                cassetteActionState = 30
            Case 30
                If (Not MesInterface.FlagCassetteRun(Me.mesCassetteLocation, stackSubSystem.CassetteId)) Then

                    'acceptable cassette conditon : CIM accepted and cassette style checked
                    stackSubSystem._cassetteTransport.transportFlags.writeFlag(flagsInLoaderUnloader.IsCaseetteAcceptable_f,
                                                                                  MesInterface.FlagCassetteAccepted(Me.mesCassetteLocation) And stackSubSystem.commonFlags.viewFlag(flagsInLoaderUnloader.IsCaseetteAcceptable_f))
                    cassetteActionState = 0
                    Return True
                End If
            Case Else

        End Select

        Return False
    End Function

#Region "Cassette-Conveyor interface"
    Function conveyorModuleAction() As Boolean
        '2015.4.16 jk modify let cassette pull wafer waiting until buffer is empty
        '馬達移動訊號
        With conveyorSubSystem
            If .ConveyorTongue.OccupiedStatus.DataCollection(0).ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) AndAlso
                (Not .loadingBuffer.controlFlags.viewFlag(clsLoadingBufferV2.controlFlagsEnum.OUT_PROCESS) Or Not .loadingBuffer.controlFlags.viewFlag(clsLoadingBufferV2.controlFlagsEnum.IS_ENABLE)) Then
                'jk Note: MUST check loadingBuffer.controlFlags.viewFlag(clsLoadingBufferV2.controlFlagsEnum.IS_ENABLE) to prevent cassette could not up down when loadingBuffer is disabled 
                Return True
            ElseIf .loadingBuffer.controlFlags.viewFlag(clsLoadingBufferV2.controlFlagsEnum.OUT_PROCESS) = True AndAlso .loadingBuffer.controlFlags.viewFlag(clsLoadingBufferV2.controlFlagsEnum.IS_ENABLE) Then
                .ConveyorTongue.OccupiedStatus.DataCollection(0).ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
            End If
            Return False
        End With
    End Function
    Function cassetteStepDownFinished(isPositionOccupied As Boolean) As Boolean
        ''hsien 2015.04.04
        Dim __timer As singleTimer = waferLoadingTimer
        Dim __data As shiftDataPackBase = conveyorSubSystem.ConveyorTongue.OccupiedStatus.DataCollection(0)


        'If (doubleWaferSenser.IsSensorCovered) = True Then 'check double wafer (b type)
        __data.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
        __data.IsPositionOccupied = isPositionOccupied

        'hsien , inlet counting , 2015.04.15
        If (genericSettingReference IsNot Nothing) Then
            genericSettingReference.InletCount += 1
        End If

        'hsien , cycle time counting , 2015.05.06
        __cycleTime = cycleTimer.TimeElapsed    'take snap
        cycleTimer.IsEnabled = True ' restart

        Return True
        'ElseIf (Not __timer.IsEnabled) Then '使等待時間致能
        '    __timer.IsEnabled = True
        'ElseIf (__timer.IsEnabled And __timer.IsTimerTicked) Then '等待一時間,以確定硅片有無

        '    'sendMessage(internalEnum.GENERIC_MESSAGE, "the layer of cassette is empty, layer number is " & stackSubSystem._stackWaferPlace.cntWafer)
        '    __timer.IsEnabled = False
        '    Return True
        'End If
        'Return False
    End Function
    Function cassetteStepDownFinishedTempBypassCheckSensor(isPositionOccupied As Boolean) As Boolean
        'hsien 2015.04.04
        Dim __timer As singleTimer = waferLoadingTimer
        Dim __data As shiftDataPackBase = conveyorSubSystem.ConveyorTongue.OccupiedStatus.DataCollection(0)


        __data.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
        __data.IsPositionOccupied = isPositionOccupied

        'hsien , inlet counting , 2015.04.15
        If (genericSettingReference IsNot Nothing) Then
            genericSettingReference.InletCount += 1
        End If

        'hsien , cycle time counting , 2015.05.06
        __cycleTime = cycleTimer.TimeElapsed    'take snap
        cycleTimer.IsEnabled = True ' restart

        __timer.IsEnabled = False
        Return True



    End Function

#End Region


#Region "RFID read sequence"
    Dim readRFIDState As Integer = 0
    Dim __rfidReadDelay As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Function readRFID() As Boolean

        Select Case readRFIDState

            Case 0
                If comOpen = True Then
                    readRFIDState = 10 '若 serialPort 開啟成功, 檢查RFID
                Else
                    readRFIDState = 0 '開起失敗, return True 接受Cassette進入
                    Return True
                End If

            Case 10
                __serialPort.DiscardInBuffer()
                __serialPort.DiscardOutBuffer()
                __serialPort.Write("~01 RMID*" & vbCr)
                __rfidReadDelay.IsEnabled = True
                readRFIDState = 100
            Case 100
                If (__rfidReadDelay.IsTimerTicked) Then
                    __serialPort.Encoding = System.Text.Encoding.ASCII
                    'cassetteSubSystem.CassetteId = __serialPort.ReadExisting()
                    PreparedCasstteId = __serialPort.ReadExisting
                    readRFIDState = 0
                    Return True
                End If
        End Select

        Return False
    End Function


#End Region

    Public Overrides Function close() As Integer
        If comOpen = True Then
            __serialPort.DiscardInBuffer()
            __serialPort.Close()
        End If
        Return MyBase.close()
    End Function

End Class

