Imports AutoNumeric
Imports Automation
Imports MathNet.Numerics.LinearAlgebra
Imports System.IO
Imports System.Linq

''' <summary>
''' The camera calibration usage data structrue
''' For C1,C2,C3
''' </summary>
''' <remarks></remarks>
Public Class c1c2c3
    Inherits measureProcedureType1Base
    Implements IDisposable


    Property CurrentTarget As framesDefinition
        Get
            Return __currentTarget
        End Get
        Set(value As framesDefinition)
            __currentTarget = value
            nominalPositions = measureSettingDictionary(__currentTarget).MeasurePoints
            nominalPosition = nominalPositions.GetEnumerator
            nominalPosition.MoveNext() 'pick the first one
        End Set
    End Property

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns>
    ''' True : image process is working
    ''' False : image process done
    ''' </returns>
    ''' <remarks></remarks>
    ReadOnly Property IsCameraTriggered As Boolean
        Get
            Return __isCameraTriggerd
        End Get
    End Property
    Dim __isCameraTriggerd As Boolean = False
    ''' <summary>
    ''' Used to trigger external procedure
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event CameraTriggered(ByVal sender As Object, ByVal e As EventArgs)

    'Ax go to netural position
    'c1,c2 to chuker , c3 to c3 origin
    'select referenced in Cn , P_c (nominal)
    'measure points generated by following parameters : X-pitch,X-times,Y-pitch,Y-times
    'calculate T_S_S0(fixed pose) , P_C =  T_S_C * P_S , translation = P_C[3:1] - R_S_C*P_S[3:1]
    'move smarpod
    'trigger camera to measure
    'output real position , and nomial position

    Dim measureSettingDictionary As Dictionary(Of framesDefinition, cameraCalibrationSetting) =
        New Dictionary(Of framesDefinition, cameraCalibrationSetting)

    Dim nominalPositions As List(Of PositionVector) = Nothing
    Dim nominalPosition As List(Of PositionVector).Enumerator = Nothing

    Dim __currentTarget As framesDefinition = framesDefinition.C1REAL

    Dim WithEvents triggerHandle As imageProcessTriggerEventArgs = Nothing
    Dim doneHandle As imageProcessEndEventArgs = Nothing

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Function measureProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                'move the smart pod
                Dim transformationBallToTarget = New htmEdgeElementary(framesDefinition.BALL,
                                                                       __currentTarget)
                transformationBallToTarget.PositionVector = nominalPosition.Current.RawValue
                frames.Instance.solveS(transformationBallToTarget)

                state = 0
            Case 10
                If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) = Automation.IDrivable.endStatus.EXECUTION_END Then
                    '------------------
                    'Trigger the camera
                    '------------------
                    triggerHandle = New imageProcessTriggerEventArgs(measureSettingDictionary(__currentTarget).ImageProcessSetting.ToolBlock)
                    RaiseEvent CameraTriggered(Me, triggerHandle)
                    __isCameraTriggerd = True

                    state = 100
                Else
                    '--------------
                    'smarpod action
                    '--------------
                End If
            Case 100
                '-------------------
                '   Camera done
                '-------------------
                If Not __isCameraTriggerd Then
                    '----------------------
                    '   Wait some call back
                    '----------------------
                    'camera task done
                    'pick the X,Y values only
                    dataPairCollection.Add(New measuredDataPair(nominalPosition.Current.RawValue,
                                                                doneHandle.OutputPosition))

                    nominalPosition.MoveNext()
                    If nominalPosition.Current IsNot Nothing Then
                        '-------------------------
                        '   Measure next one point
                        '-------------------------
                        state = 0 'rewind
                    Else
                        '----------------
                        '   All measure points had been done
                        '----------------
                        Return True
                    End If

                Else
                    '-----------------
                    '   Camera working
                    '-----------------
                End If
        End Select

        Return False

    End Function
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                With frames.Instance

                    'the preparation sequences
                    .CurrentMovingItem = framesDefinition.S0
                    Select Case __currentTarget
                        Case framesDefinition.C1REAL,
                             framesDefinition.C2REAL
                            .CurrentRItem = itemsDefinition.CHOKE_CENTER
                        Case framesDefinition.C3REAL
                            .CurrentRItem = itemsDefinition.C3_ORIGIN
                    End Select
                    state = 10
                End With
            Case 10
                '-----------------------
                '   End when XYZ settled
                '-----------------------
                With Assembly.Instance
                    Return .CommandEndStatus(controlUnitsEnum.X) = IDrivable.endStatus.EXECUTION_END
                End With
        End Select
        Return False
    End Function


    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Sub imageProcessDone(sender As Object, e As imageProcessEndEventArgs) Handles triggerHandle.ImageProcessDone
        Me.doneHandle = e
        __isCameraTriggerd = False ' flag reset
    End Sub

    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As c1c2c3
        Get
            If __instance Is Nothing Then
                __instance = New c1c2c3
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As c1c2c3 = Nothing
    Protected Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initMappingAndSetup))
    End Sub
    Function initMappingAndSetup() As Integer
        '------------------------
        '   Loading Setting Files
        '------------------------
        With measureSettingDictionary
            For Each item As framesDefinition In {framesDefinition.C1REAL,
                                                  framesDefinition.C2REAL,
                                                  framesDefinition.C3REAL}
                .Add(item, New cameraCalibrationSetting(item))
                .Item(item).Load(Nothing)
            Next
        End With

        Return 0
    End Function


#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO:  處置 Managed 狀態 (Managed 物件)。
            End If

            ' TODO:  釋放 Unmanaged 資源 (Unmanaged 物件) 並覆寫下面的 Finalize()。
            ' TODO:  將大型欄位設定為 null。
            For Each item As cameraCalibrationSetting In measureSettingDictionary.Values
                item.Save()
            Next
        End If
        Me.disposedValue = True
    End Sub

    ' TODO:  只有當上面的 Dispose(ByVal disposing As Boolean) 有可釋放 Unmanaged 資源的程式碼時，才覆寫 Finalize()。
    Protected Overrides Sub Finalize()
        ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
