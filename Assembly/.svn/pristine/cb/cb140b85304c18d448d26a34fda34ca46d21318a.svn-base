Imports Automation
Imports AutoNumeric
Imports MathNet.Numerics.LinearAlgebra
Imports Automation.Components.Services

''' <summary>
''' 1. Move to die center (DIE_REAL)
''' 2. Do camera image process
''' 3. get P1/P2/P3/P4 x,y coordinate
''' 4. move LREAL to P1/P2/P3/P4
''' 5. read z 
''' 6. data process to mark out the real coordinate system it is (using fit method)
''' </summary>
''' <remarks></remarks>
Public Class dieMark
    Inherits systemControlPrototype
    Implements IProcedure
    Implements IDisposable

    Public Property Arguments As Object Implements IProcedure.Arguments
        Get
            'not implemented
            Return False
        End Get
        Set(value As Object)
            Throw New NotImplementedException
        End Set
    End Property

    Public Property IsProcedureStarted As New flagController(Of interlockedFlag) Implements IProcedure.IsProcedureStarted
    Public Property Result As IProcedure.procedureResultEnums Implements IProcedure.Result

    Friend setting As imageProcessSettingBlock = New imageProcessSettingBlock

    Friend measuredPadPositions As List(Of PositionVector) = New List(Of PositionVector)
    Friend currentPad As List(Of PositionVector).Enumerator = Nothing

    Friend delayTimer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 100)}

    Enum subStatesEnum As Integer
        IMAGE_PROCESSING = 100
        PAD_HEIGHT_MEASURE = 200
        DATA_PROCESSING = 500
    End Enum


    Function stateExecute() As Integer

        Select Case systemSubState
            Case 0
                If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then

                    'reset DIE_REAL_DRY
                    measuredPadPositions.Clear()

                    With frames.Instance
                        .Elementray(framesDefinition.DIE_REAL_DRY, framesDefinition.DIE).RawValue =
                            CreateMatrix.DenseIdentity(Of Double)(4)

                        .CurrentMovingItem = framesDefinition.C4
                        .CurrentRItem = itemsDefinition.DIE_CENTER
                    End With
                    systemSubState = 10
                Else
                    '---------------------
                    '   Wait Trigger
                    '---------------------
                End If
            Case 10
                If Assembly.Instance.IsAllAxesSettled Then
                    setting.onImageProcedureLoaded()
                    setting.onCameraTriggerd()
                    systemSubState = subStatesEnum.IMAGE_PROCESSING
                Else
                    '------------------------
                    '   Settling
                    '------------------------
                End If
            Case subStatesEnum.IMAGE_PROCESSING
                If setting.IsImageProcessDone And
                    setting.Result = Cognex.VisionPro.CogToolResultConstants.Accept Then
                    'collect coordinates
                    setting.Coordinates.ForEach(Sub(__point As Vector(Of Double))
                                                    If __point IsNot Nothing Then
                                                        measuredPadPositions.Add(New PositionVector(__point, framesDefinition.C4))
                                                    End If
                                                End Sub)

                    'transform to reference position
                    For index = 0 To measuredPadPositions.Count - 1
                        measuredPadPositions(index) = frames.Instance.Transformation(framesDefinition.C4, framesDefinition.R) * measuredPadPositions(index)
                    Next

                    currentPad = measuredPadPositions.GetEnumerator
                    systemSubState = subStatesEnum.PAD_HEIGHT_MEASURE
                ElseIf setting.Result <> Cognex.VisionPro.CogToolResultConstants.Accept Then
                    '--------------------------
                    'TODO image processing failed
                    '-------------------------- 
                Else
                    '-------------------------
                    '   Image processing
                    '-------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE
                If currentPad.MoveNext Then

                    frames.Instance.solveAbsAxAy(currentPad.Current, framesDefinition.LREAL)
                    systemSubState += 10
                Else
                    '-------------------------------
                    '   All measured
                    ''------------------------------
                    systemSubState = subStatesEnum.DATA_PROCESSING
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 10
                If Assembly.Instance.IsAllAxesSettled Then
                    systemSubState += 10
                Else
                    '------------------------
                    '   Settling
                    '------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 20
                If Assembly.Instance.__distanceMeter.drive(distanceMeter.dmCommands.RT, {distanceMeter.dmOnOff.__ON}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    delayTimer.IsEnabled = True
                    systemSubState += 10
                Else
                    '-------------------------------
                    '   Communicating
                    ''------------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 30
                If delayTimer.IsTimerTicked Then
                    systemSubState += 10
                Else
                    '--------------------
                    '   Counting
                    '--------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 40
                If Assembly.Instance.__distanceMeter.drive(distanceMeter.dmCommands.RT, {distanceMeter.dmOnOff.__OFF}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------------------
                    '   Communicating
                    ''------------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 50
                If Assembly.Instance.__distanceMeter.drive(distanceMeter.dmCommands.TM, {distanceMeter.dmOnOff.__ON}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    delayTimer.IsEnabled = True
                    systemSubState += 10
                Else
                    '-------------------------------
                    '   Communicating
                    ''------------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 60
                If delayTimer.IsTimerTicked Then
                    systemSubState += 10
                Else
                    '--------------------
                    '   Counting
                    '--------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 70
                If Assembly.Instance.__distanceMeter.drive(distanceMeter.dmCommands.TM, {distanceMeter.dmOnOff.__OFF}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------------------
                    '   Communicating
                    ''------------------------------
                End If
            Case subStatesEnum.PAD_HEIGHT_MEASURE + 80
                If Assembly.Instance.__distanceMeter.drive(distanceMeter.dmCommands.MS, {dmTaskEnum.TASK_PLANE_HEIGHT}) =
                     IDrivable.endStatus.EXECUTION_END And
                    Assembly.Instance.__distanceMeter.IsMeasureValueAvailable Then

                    Dim measuredPosition As PositionVector = New PositionVector(framesDefinition.LREAL) With {.Z = Assembly.Instance.__distanceMeter.MeasureValue}

                    'complete the Z-value
                    currentPad.Current.Z =
                        (frames.Instance.Transformation(framesDefinition.LREAL, framesDefinition.R) * measuredPosition).Z

                    'do next point measurement
                    systemSubState = subStatesEnum.PAD_HEIGHT_MEASURE
                Else
                    '----------------------
                    '
                    '----------------------
                End If
            Case subStatesEnum.DATA_PROCESSING
                '-------------------------------
                '   Data Process
                '-------------------------------

                'transform to DIE_REAL position
                For index = 0 To measuredPadPositions.Count - 1
                    measuredPadPositions(index) = frames.Instance.Transformation(framesDefinition.R, framesDefinition.DIE_REAL_DRY) * measuredPadPositions(index)
                Next

                'loaded into DataPair
                Dim __measuredDataPairs As List(Of measuredDataPair) = New List(Of measuredDataPair)


                For index = 0 To itemsDefinition.DIE_P4
                    Dim idealValue As Vector(Of Double) = frames.Instance.objectsDictionary(pointSequence(index)).RawValue
                    __measuredDataPairs.Add(New measuredDataPair(idealValue,
                                                                 measuredPadPositions(index).RawValue,
                                                                 AutoNumeric.utilities.selectionEnums.X Or
                                                                 AutoNumeric.utilities.selectionEnums.Y Or
                                                                 AutoNumeric.utilities.selectionEnums.Z))

                Next
                'P5/P6 takes X/Y only
                For index = itemsDefinition.DIE_P5 To itemsDefinition.DIE_P6
                    Dim idealValue As Vector(Of Double) = frames.Instance.objectsDictionary(pointSequence(index)).RawValue
                    __measuredDataPairs.Add(New measuredDataPair(idealValue,
                                                                 measuredPadPositions(index).RawValue,
                                                                 AutoNumeric.utilities.selectionEnums.X Or
                                                                 AutoNumeric.utilities.selectionEnums.Y))
                Next



                'calculated out DIE_REAL
                frames.Instance.Elementray(framesDefinition.DIE_REAL_DRY, framesDefinition.DIE).RawValue =
                    measuredDataPair.fitTransformation(__measuredDataPairs).RawValue.Inverse

                Result = IProcedure.procedureResultEnums.SUCCESS
                IsProcedureStarted.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                systemSubState = 0

        End Select

        Return 0
    End Function


#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As dieMark
        Get
            If __instance Is Nothing Then
                __instance = New dieMark
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As dieMark = Nothing
#End Region

    Shared pointSequence As List(Of itemsDefinition) = New List(Of itemsDefinition) From {itemsDefinition.DIE_P1,
                                                                                          itemsDefinition.DIE_P2,
                                                                                              itemsDefinition.DIE_P3,
                                                                                              itemsDefinition.DIE_P4,
                                                                                              itemsDefinition.DIE_P5,
                                                                                              itemsDefinition.DIE_P6,
                                                                                              itemsDefinition.DIE_P7}
    Protected Sub New()
        Me.setting.Load(My.Application.Info.DirectoryPath & "\Data\calibration\DIE_MARK.xml")
        Me.systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        Me.systemMainState = systemStatesEnum.EXECUTE
    End Sub


#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
            End If

            Me.setting.Save()
        End If
        Me.disposedValue = True
    End Sub

    Protected Overrides Sub Finalize()
        ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
