Imports AutoNumeric
Imports Automation
Imports MathNet.Numerics.LinearAlgebra
Imports Automation.Components.Services


''' <summary>
''' Offered the 
''' </summary>
''' <remarks></remarks>
Public MustInherit Class cameraCalibrationBase
    Inherits measureProcedureType1Base
    Implements IDisposable


    ReadOnly Property IdealX As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.X
            Else
                Return 0
            End If
        End Get
    End Property
    ReadOnly Property IdealY As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.Y
            Else
                Return 0
            End If
        End Get
    End Property
    ReadOnly Property IdealZ As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.Z
            Else
                Return 0
            End If
        End Get
    End Property
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns>
    ''' True : image process is working
    ''' False : image process done
    ''' </returns>
    ''' <remarks></remarks>
    Property IsCameraTriggered As Boolean
        Get
            Return __isCameraTriggerd
        End Get
        Set(value As Boolean)
            __isCameraTriggerd = value
        End Set
    End Property
    Protected __isCameraTriggerd As Boolean = False

    ''' <summary>
    ''' Raise in the beginning of procedure
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event ImageProcedureLoaded(ByVal sender As Object, ByVal e As EventArgs)
    ''' <summary>
    ''' Used to trigger external procedure
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event CameraTriggered(ByVal sender As Object, ByVal e As EventArgs)
    Protected Sub onCameraTriggerd(e As imageProcessTriggerEventArgs)
        RaiseEvent ImageProcedureLoaded(Me, e)
        triggerHandle = e
        RaiseEvent CameraTriggered(Me, e)
    End Sub

    Protected idealPosition As List(Of PositionVector).Enumerator = Nothing

    Property CurrentTarget As cameraCalibrationSettingBase
        Get
            Return __currentTarget
        End Get
        Set(value As cameraCalibrationSettingBase)
            __currentTarget = value
            'link
            RaiseEvent ImageProcedureLoaded(Me, New imageProcessTriggerEventArgs(__currentTarget.ImageProcessSetting.ToolBlock))
            MyBase.correspondingErrorMatrix = frames.Instance.Elementray(__currentTarget.RealReference,
                                                                         __currentTarget.NominalReference)
            MyBase.errorMatrix = New eulerHtmTR(__currentTarget.RealReference,
                                                __currentTarget.RealReference)
        End Set
    End Property
    Dim __currentTarget As cameraCalibrationSettingBase = Nothing

    Dim WithEvents triggerHandle As imageProcessTriggerEventArgs = Nothing
    Dim doneHandle As imageProcessEndEventArgs = Nothing

    Dim imageRetryCounter As Integer = 0
    Dim imageRetryGoal As Integer = 5
    Dim delayTimer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 100)}
    ''' <summary>
    ''' The detailed moving procedure
    ''' </summary>
    ''' <remarks></remarks>
    Protected Friend MustOverride Sub moveAction()
    ''' <summary>
    ''' Z value is simulated by previous pitch/roll
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Friend Overridable Function postHandlingAction(idealPosition As PositionVector, measuredPosition As PositionVector) As measuredDataPair
        ''the guessed Z
        'measuredPosition.Z = (correspondingErrorMatrix * measuredPosition).Z + idealPosition.Z

        Return New measuredDataPair(idealPosition.RawValue,
                                    measuredPosition.RawValue,
                                    AutoNumeric.utilities.selectionEnums.X Or
                                    AutoNumeric.utilities.selectionEnums.Y )
    End Function
    MustOverride Sub settingSaveAction()

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function measureProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                idealPosition = __currentTarget.MeasurePoints.GetEnumerator
                idealPosition.MoveNext() ' take first point
                state = 10
            Case 10
                'moving method
                moveAction()
                state = 20
            Case 20
                If Assembly.Instance.IsAllAxesSettled Then
                    delayTimer.IsEnabled = True
                    state = 30
                Else
                    '--------------
                    'axes action
                    '--------------
                End If
            Case 30
                If delayTimer.IsTimerTicked Then
                    state = 50
                Else
                    '------------
                    '   Counting
                    '------------
                End If
            Case 50
                '------------------
                'Trigger the camera
                '------------------
                triggerHandle = New imageProcessTriggerEventArgs(__currentTarget.ImageProcessSetting.ToolBlock)
                RaiseEvent CameraTriggered(Me, triggerHandle)
                state = 100
            Case 100
                '-------------------
                '   Camera done
                '-------------------
                If Not __isCameraTriggerd Then
                    '----------------------
                    '   Wait some call back
                    '----------------------
                    'camera task done
                    'pick the X,Y values only
                    If doneHandle IsNot Nothing AndAlso
                        doneHandle.Result = Cognex.VisionPro.CogToolResultConstants.Accept Then

                        dataPairCollection.Add(postHandlingAction(idealPosition.Current,
                                                                 New PositionVector(doneHandle.OutputPositionUnit, CurrentTarget.RealReference)))

                        state = 500
                    ElseIf imageRetryCounter < imageRetryGoal Then
                        'try fetch image again
                        imageRetryCounter += 1
                        state = 50
                    Else
                        '----------------
                        '   Skip this measure
                        '----------------
                        sendMessage(internalEnum.GENERIC_MESSAGE, String.Format("Image Process Failed At:{0}",
                                                                               idealPosition.Current.RawValue.ToVectorString.Replace(vbCrLf, vbTab)))
                        state = 500
                    End If
                Else
                    '-----------------
                    '   Camera working
                    '-----------------
                End If

            Case 500

                imageRetryCounter = 0 'reset counter
                If idealPosition.MoveNext() Then
                    '-------------------------
                    '   Measure next one point
                    '-------------------------
                    state = 10 'rewind
                Else
                    '----------------
                    '   All measure points had been done
                    '----------------
                    Return True
                End If

        End Select

        Return False

    End Function
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        Return False
    End Function
    ''' <summary>
    ''' Raise smarpod
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function finalizeProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                sHtm.Instance.ControlVector = CreateVector.Dense(Of Double)({0,
                                                                             0,
                                                                             -5,
                                                                             0,
                                                                             0,
                                                                             0})
                state = 10
            Case 10
                Return Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) =
                    IDrivable.endStatus.EXECUTION_END
        End Select

        Return False

    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Protected Sub imageProcessStarted(sender As Object, e As imageProcessTriggerEventArgs) Handles Me.CameraTriggered
        __isCameraTriggerd = True
        e.ToolBlock.Run()
    End Sub
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Protected Overridable Sub imageProcessDone(sender As Object, e As imageProcessEndEventArgs) Handles triggerHandle.ImageProcessDone
        Me.doneHandle = e
        __isCameraTriggerd = False ' flag reset
    End Sub


#Region "IDisposable Support"
    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                'dispose managed state (managed objects).
            End If

            'free unmanaged resources (unmanaged objects) and override Finalize() below.
            'set large fields to null.
            settingSaveAction()
        End If
        Me.disposedValue = True
    End Sub

    'override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
    Protected Overrides Sub Finalize()
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region


End Class
