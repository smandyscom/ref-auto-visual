Imports Automation
Imports AutoNumeric
Imports AutoNumeric.utilities
Imports System.Xml.Serialization


Public Class dispCalibrationSetting
    Inherits imageProcessSettingBlock

    Friend measureFrame As framesDefinition = framesDefinition.C1REAL
    Friend readyPoint As itemsDefinition = itemsDefinition.C1_DISP_READY
    Friend processPoint As itemsDefinition = itemsDefinition.C1_ORIGIN
    Protected dimensionSelection As Integer = selectionEnums.Y Or selectionEnums.Z

    Friend measuredPointInDispReal As PositionVector = New PositionVector(framesDefinition.DISP_HEAD_REAL)

    Sub New(__feature As itemsDefinition)
        Select Case __feature
            Case itemsDefinition.C1_ORIGIN
                measureFrame = framesDefinition.C1REAL
                readyPoint = itemsDefinition.C1_DISP_READY
                dimensionSelection = selectionEnums.Y Or selectionEnums.Z
            Case itemsDefinition.C2_ORIGIN
                measureFrame = framesDefinition.C2REAL
                readyPoint = itemsDefinition.C2_DISP_READY
                dimensionSelection = selectionEnums.X Or selectionEnums.Z
        End Select
        processPoint = __feature
    End Sub
    Sub New()

    End Sub

End Class

Public Class dispCalibration
    Inherits systemControlPrototype
    Implements IProcedure
    Implements IDisposable


    Public Property Arguments As Object Implements IProcedure.Arguments

    Public Property IsProcedureStarted As New flagController(Of interlockedFlag) Implements IProcedure.IsProcedureStarted

    Public Property Result As IProcedure.procedureResultEnums Implements IProcedure.Result

    Friend featureMeasureSettings As Dictionary(Of itemsDefinition, dispCalibrationSetting) = New Dictionary(Of itemsDefinition, dispCalibrationSetting)
    Protected currentFeatureProcedure As Dictionary(Of itemsDefinition, dispCalibrationSetting).Enumerator = Nothing

    ''' <summary>
    ''' 0: move to c1 origin , take measuring
    ''' 1: move to c2 origin , take measuring
    ''' 2: cal
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function stateExecute() As Integer

        Select Case systemSubState
            Case 0
                If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                    systemSubState = 5
                Else
                    '--------------------------------
                    '
                    '--------------------------------
                End If
            Case 5
                currentFeatureProcedure = featureMeasureSettings.GetEnumerator
                systemSubState = 10
            Case 10
                If currentFeatureProcedure.MoveNext Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = currentFeatureProcedure.Current.Value.readyPoint
                    End With
                    systemSubState = 20
                Else
                    '---------------
                    '   All procedure proceded
                    '---------------
                    systemSubState = 100
                End If
            Case 20
                If Assembly.Instance.IsAllAxesSettled Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = currentFeatureProcedure.Current.Value.processPoint
                    End With
                    systemSubState = 30
                Else
                    '-------------------------------
                    '   Settling
                    '-------------------------------
                End If
            Case 30
                If Assembly.Instance.IsAllAxesSettled Then
                    currentFeatureProcedure.Current.Value.onCameraTriggered()
                    systemSubState = 40
                Else
                    '-------------------
                    '   Settling
                    '-------------------
                End If
            Case 40
                With currentFeatureProcedure.Current.Value
                    If .IsImageProcessDone Then
                        .measuredPointInDispReal =
                            frames.Instance.Transformation(.measureFrame, framesDefinition.DISP_HEAD_REAL) * New PositionVector(.Coordinates.First, .measureFrame)

                        'back to ready point
                        With frames.Instance
                            .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                            .CurrentRItem = currentFeatureProcedure.Current.Value.readyPoint
                        End With
                        systemSubState = 50
                    Else
                        '------------------------
                        '   Not Done Yet
                        '------------------------
                    End If
                End With
            Case 50
                If Assembly.Instance.IsAllAxesSettled Then
                    systemSubState = 10
                Else
                    '-------------------------------
                    '   Settling
                    '-------------------------------
                End If
                '--------------------------
                'sUM
                '--------------------------
            Case 100
                Dim __positionMeasured As PositionVector = New PositionVector(Nothing)
                For Each item As dispCalibrationSetting In featureMeasureSettings.Values
                    __positionMeasured += item.measuredPointInDispReal
                Next
                'average the z value
                __positionMeasured.Z /= 2

                Dim __positionError As PositionVector = frames.Instance.Elementray(framesDefinition.DISP_HEAD_REAL, framesDefinition.DISP_HEAD).Origin -
                    __positionMeasured

                sendMessage(internalEnum.GENERIC_MESSAGE,
                            String.Format("Origin Error,Measured,Distance Meter,{3}{0}{3}{1}{3}{2}",
                                          __positionError.RawValue.ToVectorString.Replace(vbCrLf, vbTab),
                                          __positionMeasured.RawValue.ToVectorString.Replace(vbCrLf, vbTab),
                                          frames.Instance.Elementray(framesDefinition.DISP_HEAD_REAL, framesDefinition.DISP_HEAD).Origin.RawValue.ToVectorString.Replace(vbCrLf, vbTab),
                                          vbCrLf))

                frames.Instance.Elementray(framesDefinition.DISP_HEAD_REAL, framesDefinition.DISP_HEAD).Origin -= __positionError

                systemSubState = 500

            Case 500
                Result = IProcedure.procedureResultEnums.SUCCESS
                IsProcedureStarted.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                systemSubState = 0
        End Select


        Return 0
    End Function

    Protected Sub New()
        featureMeasureSettings(itemsDefinition.C1_ORIGIN) = New dispCalibrationSetting(itemsDefinition.C1_ORIGIN)
        featureMeasureSettings(itemsDefinition.C2_ORIGIN) = New dispCalibrationSetting(itemsDefinition.C2_ORIGIN)

        For Each item As dispCalibrationSetting In featureMeasureSettings.Values
            item.Load(Nothing)
        Next
        Me.systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        Me.systemMainState = systemStatesEnum.EXECUTE

    End Sub

#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As dispCalibration
        Get
            If __instance Is Nothing Then
                __instance = New dispCalibration
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As dispCalibration = Nothing
#End Region

#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
            End If

        End If
        Me.disposedValue = True
    End Sub

    Protected Overrides Sub Finalize()
        ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
