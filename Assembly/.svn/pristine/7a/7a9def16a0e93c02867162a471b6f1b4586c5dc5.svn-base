Option Strict Off
Imports Automation
Imports Automation.Components.Services
Imports Automation.mainIOHardware
Imports Automation.Components
Imports System.ComponentModel
Imports System.Net
Imports System.IO.Ports
Imports System.Text.RegularExpressions
Imports SmarPodAssembly
Imports Automation.Components.CommandStateMachine


Public Enum controlUnitsEnum As Integer
    X = &H1
    Y = &H2
    Z = &H4
    S = &H8
End Enum

Public Enum analogValuesEnum As Integer
    PD_LEFT
    PD_RIGHT
    POLAR_1
    POLAR_2
    POLAR_3
End Enum

''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class controlUnitsEventArgs
    Inherits EventArgs

    ReadOnly Property Unit As controlUnitsEnum
        Get
            Return __unit
        End Get
    End Property
    ReadOnly Property Status As IDrivable.endStatus
        Get
            Return __status
        End Get
    End Property

    Dim __unit As controlUnitsEnum = controlUnitsEnum.X
    Dim __status As IDrivable.endStatus = IDrivable.endStatus.EXECUTING

    Sub New(__unit As controlUnitsEnum,
            status As IDrivable.endStatus)
        Me.__unit = __unit
        Me.__status = status
    End Sub

End Class

''' <summary>
''' Singleton
''' </summary>
''' <remarks></remarks>
Public Class Assembly
    Inherits assemblyArch

    Public Event SystemIgnited(ByVal sender As Object, ByVal e As EventArgs)

    ''' <summary>
    ''' Occured when XYZ motor start moving
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event UnitStatusChanged(ByVal sender As Object, ByVal e As EventArgs)
    ''' <summary>
    ''' Used to query status
    ''' </summary>
    ''' <param name="unit"></param>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    ReadOnly Property CommandEndStatus(unit As controlUnitsEnum) As IDrivable.endStatus
        Get
            Return controlUnits(unit).CommandEndStatus
        End Get
    End Property
    ''' <summary>
    ''' Main worker thread available only
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    ReadOnly Property IsAllAxesSettled As Boolean
        Get
            Return axesSymbol.TrueForAll(Function(symbol As controlUnitsEnum) CommandEndStatus(symbol) = IDrivable.endStatus.EXECUTION_END)
        End Get
    End Property
    Dim axesSymbol As List(Of controlUnitsEnum) = New List(Of controlUnitsEnum)

    ReadOnly Property AnalogValues(key As analogValuesEnum) As Single
        Get
            Return __analogValues(key)
        End Get
    End Property
    Dim __analogValues As Dictionary(Of analogValuesEnum, Single) = New Dictionary(Of analogValuesEnum, Single)

    Property BondedMaterialData As List(Of materialData) = New List(Of materialData)
    Shared materialTotalCount As Integer = 7

    Public operationSignals As flagController(Of operationSignalsEnum) = New flagController(Of operationSignalsEnum)

    Friend settingDictionary As Dictionary(Of [Enum], settingBase) = New Dictionary(Of [Enum], settingBase)

#Region "sub systems"
    Dim hmiPauseButton As sensorControl = New sensorControl() With {.InputBit = inputAddress.PB_PAUSE,
                                                                    .IsEnabled = True}
    Dim hmiPauseLight As flipService = New flipService() With {.OutputBit = outputAddress.LP_PAUSE,
                                                               .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Dim __timer As singleTimer = New singleTimer

    Friend gripperMount As sensorControl = New sensorControl With {.IsEnabled = True,
                                                                .InputBit = inputAddress.GRIP_MOUNT}
    Friend alarmPackGripperMount As alarmContentSensor = New alarmContentSensor With {.Sender = Me,
                                                                                    .Inputs = inputAddress.GRIP_MOUNT,
                                                                                    .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF,
                                                                                    .PossibleResponse = alarmContextBase.responseWays.RETRY}
    '--------------------------
    ' Coordinates control units
    '--------------------------
    Friend WithEvents xMotorControl As motorControlDrivable = New motorControlDrivable With {.IsEnabled = False}
    Friend WithEvents yMotorControl As motorControlDrivable = New motorControlDrivable With {.IsEnabled = False}
    Dim WithEvents zMotorControl As motorControlDrivable = New motorControlDrivable With {.IsEnabled = False}
    Dim WithEvents __smarPodControl As smarPodControl = New smarPodControl With {.IsEnabled = False}


    Dim xyzUnits As List(Of motorControlDrivable) = New List(Of motorControlDrivable) From {xMotorControl,
                                                                                            yMotorControl,
                                                                                            zMotorControl}
    Dim controlUnits As Dictionary(Of controlUnitsEnum, IDrivable) = New Dictionary(Of controlUnitsEnum, IDrivable)
#End Region

#Region "procedures"

    Dim c1c3c3CalibrationProcess As c1c2c3Calibration = c1c2c3Calibration.Instance
    Dim c4CalibrationProcess As c4Calibration = c4Calibration.Instance
    Dim dmCalibrationProcess As dmCalibration = dmCalibration.Instance
    'distance meter origin
    'distance meter height

    'lpc mark
    Dim lpcMarkProcess As lpcMark = lpcMark.Instance
    'die mark

    'dry align
    'wet align

#End Region

    Function initMappingAndSetup() As Integer

        Dim values = [Enum].GetValues(GetType(controlUnitsEnum))
        For index = 0 To values.Length - 1
            axesSymbol.Add([Enum].ToObject(GetType(controlUnitsEnum), values(index)))
        Next

        values = [Enum].GetValues(GetType(analogValuesEnum))
        For index = 0 To values.Length - 1
            __analogValues.Add([Enum].ToObject(GetType(analogValuesEnum), values(index)), 0)
        Next
        For index = 0 To materialTotalCount - 1
            BondedMaterialData.Add(New materialData)
        Next


        '--------------------
        '   Raise singletons
        '---------------------
        Dim ref = frames.Instance

        'state function configuration
        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.IDLE) = AddressOf stateIdle
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute 'Function() (0)
        systemMainState = systemStatesEnum.IGNITE

        'mount logger
        basicLogger.MessengerReference = CentralMessenger

        'door interlock , Hsien , 2015.05.14
        messageTimer.TimerGoal = New TimeSpan(0, 0, 1)
        With doorInterlock.SensorsNeedToCheck
        End With

        buzzer.OutputBit = outputAddress.BUZZER
        redTowerLight.OutputBit = outputAddress.LP_R
        yellowTowerLight.OutputBit = outputAddress.LP_Y
        greenTowerLight.OutputBit = outputAddress.LP_G

        pauseButtons.AddRange({hmiPauseButton})
        pauseLights.AddRange({hmiPauseLight})


        With xMotorControl
            .MotorIndex = motorAddress.MsX
            'z interlocked
            .SlowdownMode = sdModeEnum.SLOW_DOWN_STOP
            .SlowdownLatch = sdLatchEnum.DO_NOT_LATCH
            .SlowdownEnable = enableEnum.ENABLE
        End With
        With yMotorControl
            .MotorIndex = motorAddress.MsY
            'z interlocked
            .SlowdownMode = sdModeEnum.SLOW_DOWN_STOP
            .SlowdownLatch = sdLatchEnum.DO_NOT_LATCH
            .SlowdownEnable = enableEnum.ENABLE
        End With
        With zMotorControl
            .MotorIndex = motorAddress.MsZ
        End With
        With controlUnits
            .Add(controlUnitsEnum.X, xMotorControl)
            .Add(controlUnitsEnum.Y, yMotorControl)
            .Add(controlUnitsEnum.Z, zMotorControl)
            .Add(controlUnitsEnum.S, __smarPodControl)
        End With
        '----------------------------
        'Gather settings
        '----------------------------
        For Each item As framesDefinition In {framesDefinition.C1REAL,
                                              framesDefinition.C2REAL,
                                              framesDefinition.C3REAL}
            settingDictionary(item) = c1c2c3Calibration.Instance.measureSettingDictionary(item)
        Next
        settingDictionary(framesDefinition.C4) = c4Calibration.Instance.CurrentTarget
        For Each item As framesDefinition In {framesDefinition.LPC_REAL_F1,
                                             framesDefinition.LPC_REAL_F2,
                                             framesDefinition.LPC_REAL_F3}
            settingDictionary(item) = lpcMark.Instance.featureMeasureSettings(item)
        Next

        Return 0

    End Function

    Function closeAssembly() As Integer
        '---------------------------
        '   Servo all motor off
        '---------------------------
        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ServoOn(index, IS_OFF)
        Next
        Return 0
    End Function
    Function initStartMotors() As Integer
        'release alarm , servo-on , clear register...etc
        '---------------------------
        '   Servo all motor off
        '---------------------------
        Dim remainedErrorStatus As Integer
        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ServoOn(index, pData.MotorSettings(index).ServoOnLevel)
            AMaxM4_ResetALM(index, IS_ON)
            AMaxM4_ErrorStatus(index, remainedErrorStatus)
        Next

        Threading.Thread.Sleep(1000)    'sleep for a while

        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ResetALM(index, IS_OFF)
        Next

        AMaxM4_ServoOn(motorAddress.MsX, IS_ON)

        Return 0
    End Function

    Shared ReadOnly Property Instance As Assembly
        Get
            If __instance Is Nothing Then
                __instance = New Assembly
            End If
            Return __instance
        End Get
    End Property
    Shared WithEvents __instance As Assembly = Nothing

    Protected Sub New()
        Me.initialize = CType([Delegate].Combine(Me.initialize,
                                                 New Func(Of Integer)(AddressOf initLinkPause),
                                                 New Func(Of Integer)(AddressOf initMappingAndSetup),
                                                 New Func(Of Integer)(AddressOf initSubsystemInitialize),
                                                 New Func(Of Integer)(AddressOf initStartMotors)),
                                             Global.System.Func(Of Integer))

        'Hsien , define shutdown script
        Me.shutdown = [Delegate].Combine(New Func(Of Integer)(AddressOf closeDumpAlarms2Message),
                                         New Func(Of Integer)(AddressOf closeFlushAllMessages),
                                         New Func(Of Integer)(AddressOf closeAssembly),
                                         New Func(Of Integer)(Function() As Integer
                                                                  'genericSettings.Save()
                                                                  Return 0
                                                              End Function))
    End Sub

#Region "state functions"

    ''' <summary>
    ''' Return all axes
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function stateIgnite() As Integer

        Select Case systemSubState
            Case 0
                '---------------------------------
                '   Wait until all hardware online
                '---------------------------------
                If (mainIOHardware.Instance.PhysicalHardwareList.TrueForAll(Function(__hardware As subHardwareNode) __hardware.Status = hardwareStatusEnum.HEALTHY)) Then
                    sendMessage(statusEnum.GENERIC_MESSAGE, "All hardware connected")
                    systemSubState = 10
                Else
                    '----------------------------------------
                    '   Some hardware failed , wait reconnect
                    '----------------------------------------
                End If
            Case 10
                If controlFlags.viewFlag(controlFlagsEnum.ABLE_IGNITE) And
                    gripperMount.OffTimer.TimeElapsed.TotalMilliseconds > 100 Then

                    xyzUnits.ForEach(Sub(motor As motorControlDrivable) motor.IsEnabled = True)
                    __smarPodControl.IsEnabled = True

                    'return z,smardpod first
                    zMotorControl.drive(motorControl.motorCommandEnum.GO_HOME)
                    __smarPodControl.drive(smarPodControl.podCommands.GO_HOME)

                    systemSubState = 20

                ElseIf controlFlags.viewFlag(controlFlagsEnum.ABLE_IGNITE) And
                    gripperMount.OffTimer.TimeElapsed.TotalMilliseconds < 100 Then
                    'alarm
                    CentralAlarmObject.raisingAlarm(alarmPackGripperMount)
                Else

                '---------------------
                '   Wait Command
                '---------------------
                End If
            Case 20
                If zMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END And
                    __smarPodControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then

                    'avoid collision
                    sHtm.Instance.AxisValue(AutoNumeric.axisEntityEnum.Z) = -5

                    yMotorControl.drive(motorControl.motorCommandEnum.GO_HOME)
                    xMotorControl.drive(motorControl.motorCommandEnum.GO_HOME)

                    systemSubState = 30
                Else
                    '--------------
                    '
                    '--------------
                End If
            Case 30
                If xMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END And
                    yMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    systemSubState = 100
                Else
                    '--------------
                    '
                    '--------------
                End If
                '----------------------------
                '   Phase2 , to zero position
                '----------------------------
            Case 100
                'xyz go to zero position
                zMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, pData.MotorPoints(motorPoints.MsZ_ZERO))
                systemSubState = 110
            Case 110
                If zMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END And
                     __smarPodControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then

                    xMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, pData.MotorPoints(motorPoints.MsX_ZERO))
                    yMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, pData.MotorPoints(motorPoints.MsY_ZERO))

                    systemSubState = 120
                Else
                    '--------------
                    '   
                    '--------------
                End If
            Case 120
                If xMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END And
                    yMotorControl.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    'set to be zero as referenced position
                    For Each item As motorControlDrivable In {xMotorControl,
                                                               yMotorControl,
                                                               zMotorControl}
                        AMaxM4_CmdPos_Reset(item.MotorIndex)
                    Next

                    RaiseEvent SystemIgnited(Me, EventArgs.Empty)
                    controlFlags.resetFlag(controlFlagsEnum.ABLE_IGNITE)
                    systemMainState = systemStatesEnum.IDLE
                Else
                    '---------------
                    '   
                    '---------------
                End If
            Case 150

        End Select

        Return 0
    End Function
    Function stateIdle() As Integer
        Return 0
    End Function
    Function stateExecute() As Integer
        Return 0
    End Function
#End Region

    Dim WithEvents xManager As s0Htm = s0Htm.Instance
    Dim WithEvents yzManager As c4htm = c4htm.Instance
    Dim WithEvents sManager As sHtm = sHtm.Instance
    Sub transformationChanged(sender As Object, e As EventArgs) Handles xManager.TransformationChanged,
        yzManager.TransformationChanged,
        sManager.TransformationChanged

        'unable to be controlled in ignite phase
        If MainState = systemStatesEnum.IGNITE And
           Not sender.Equals(sManager) Then
            Exit Sub
        End If

        Dim unit As controlUnitsEnum = controlUnitsEnum.X

        If sender.Equals(xManager) Then
            Dim command As cMotorPoint = pData.MotorPoints(motorPoints.MsX_ZERO).Clone
            With command
                .DistanceInUnit = xManager.AxisValue(AutoNumeric.axisEntityEnum.X)
            End With
            xMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, command)

            unit = controlUnitsEnum.X

        ElseIf sender.Equals(yzManager) Then
            Dim commandY As cMotorPoint = pData.MotorPoints(motorPoints.MsY_ZERO).Clone
            Dim commandZ As cMotorPoint = pData.MotorPoints(motorPoints.MsZ_ZERO).Clone
            With commandY
                .DistanceInUnit = yzManager.AxisValue(AutoNumeric.axisEntityEnum.Y)
            End With
            With commandZ
                .DistanceInUnit = yzManager.AxisValue(AutoNumeric.axisEntityEnum.Z)
            End With
            yMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, commandY)
            zMotorControl.drive(motorControl.motorCommandEnum.GO_POSITION, commandZ)
            'TODO
            unit = controlUnitsEnum.Y 'Or controlUnitsEnum.Z

        ElseIf sender.Equals(sManager) Then
            __smarPodControl.drive(smarPodControl.podCommands.GO_POSITION, sHtm.Instance.PodCommand)
            unit = controlUnitsEnum.S
        End If

        'inform relatives
        RaiseEvent UnitStatusChanged(Me, New controlUnitsEventArgs(unit,
                                                                   IDrivable.endStatus.EXECUTING))

    End Sub
    Sub controlDone(sender As IDrivable, e As EventArgs) Handles xMotorControl.CommandExecuted,
         yMotorControl.CommandExecuted,
         zMotorControl.CommandExecuted,
         __smarPodControl.CommandExecuted

        Dim unit As controlUnitsEnum = controlUnitsEnum.X

        If sender.Equals(xMotorControl) Then
            unit = controlUnitsEnum.X
        ElseIf sender.Equals(yMotorControl) Then
            unit = controlUnitsEnum.Y
        ElseIf sender.Equals(zMotorControl) Then
            unit = controlUnitsEnum.Z
        ElseIf sender.Equals(__smarPodControl) Then
            unit = controlUnitsEnum.S
        End If
        'inform relatives
        RaiseEvent UnitStatusChanged(sender, New controlUnitsEventArgs(unit,
                                                                       sender.CommandEndStatus))

    End Sub

    Public Overrides Sub alarmOccuredHandler(sender As alarmManager, e As alarmEventArgs)
        'mount retry option for motors
        Dim alarmMotor = TryCast(e.Content, alarmContentMotor)
        If alarmMotor IsNot Nothing Then
            alarmMotor.PossibleResponse += alarmContextBase.responseWays.RETRY
        End If

        MyBase.alarmOccuredHandler(sender, e)
    End Sub


End Class

