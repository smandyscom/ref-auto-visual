Imports Automation
Imports System.IO.Ports
Imports System.Text
Imports Automation.Components.Services

Public Class lightControl
    Inherits systemControlPrototype
    Implements IDisposable


    Enum eunmCmd As Integer
        CONNECT
        LIGHT_SETTING
    End Enum

#Region "External Data declare"
    Public flagExecute As New flagController(Of eunmCmd)
    Public Property Channel As Integer = 0
    Public Property Intensity As Integer = 0
#End Region

#Region "Device declare"
    Public WithEvents __serialPort As SerialPort = New SerialPort With {.PortName = "COM2",
                                                                      .BaudRate = 9600,
                                                                      .Parity = Parity.None,
                                                                      .StopBits = StopBits.One,
                                                                      .DataBits = 8,
                                                                      .Encoding = Encoding.UTF8}
#End Region

#Region "Internal declare"
    Private __timer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1)}
    Private strSend As String = ""
    Private strReceived As String = ""
#End Region

    Protected Sub New()
        Try
            __serialPort.Open()
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try

        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.EXECUTE

    End Sub

    Protected Function stateExecute() As Integer
        Select Case systemSubState
            Case 0
                If flagExecute.viewFlag(eunmCmd.CONNECT) Then
                    systemSubState = 200

                ElseIf flagExecute.viewFlag(eunmCmd.LIGHT_SETTING) Then
                    systemSubState = 10
                Else

                End If

            Case 10 ' check serial port opened
                If __serialPort.IsOpen Then
                    systemSubState = 20
                Else
                    sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " isn't opened.")
                End If

            Case 20 ' Set Light
                If Channel <= 4 And Channel >= 1 And Intensity >= 0 And Intensity <= 255 Then
                    strSend = Channel.ToString + "," + Intensity.ToString + vbCrLf
                    Try
                        __serialPort.Write(strSend)
                    Catch ex As Exception
                        sendMessage(ex.Message)
                    End Try
                    __timer.resetTimer()
                    __timer.IsEnabled = True
                    systemSubState = 30
                Else
                    sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + "Wrong command: " + Channel.ToString + "," + Intensity.ToString + vbCrLf)
                    systemSubState = 90
                End If


            Case 30 ' check response
                If strReceived <> "" Then
                    If strReceived = strSend Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " light setting complete.")
                    ElseIf strReceived = "E" + vbCrLf Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " Error strSend:" + strSend)
                    Else
                        sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " Error Message:" + strReceived)
                    End If
                    systemSubState = 90
                ElseIf __timer.IsTimerTicked Then
                    ' overtime
                    sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " time out.")
                    systemSubState = 90
                Else

                End If
            Case 90
                'reset flag
                strReceived = ""
                strSend = ""
                flagExecute.writeFlag(eunmCmd.LIGHT_SETTING, False)
                systemSubState = 0

            Case 200
                Try
                    __serialPort.Open()
                Catch ex As Exception
                    sendMessage(ex.Message)
                End Try
                systemSubState = 210

            Case 210
                If __serialPort.IsOpen Then
                    sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " opened.")
                Else
                    sendMessage(statusEnum.GENERIC_MESSAGE, __serialPort.PortName + " open failed.")
                End If
                systemSubState = 220

            Case 220
                flagExecute.writeFlag(eunmCmd.CONNECT, False)
                systemSubState = 0



        End Select
        Return 0
    End Function

    Private Sub dataReceived(ByVal sender As Object, ByVal e As System.IO.Ports.SerialDataReceivedEventArgs) Handles __serialPort.DataReceived
        strReceived = __serialPort.ReadExisting()
    End Sub

#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As lightControl
        Get
            If __instance Is Nothing Then
                __instance = New lightControl
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As lightControl = Nothing
#End Region

#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
            End If
            __serialPort.Close()
        End If
        Me.disposedValue = True
    End Sub

    Protected Overrides Sub Finalize()
        ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
