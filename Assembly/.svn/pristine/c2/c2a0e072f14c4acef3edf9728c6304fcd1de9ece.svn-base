Imports Automation
Imports Automation.Components.Services
Public Class userControlMainPanel

    Dim confirmForm As formConfirm = New formConfirm

    Dim WithEvents assemblyReference As Assembly = Assembly.Instance
    Dim WithEvents pauseBlockReference As interceptObject = Assembly.Instance.PauseBlock
    Dim WithEvents messengerReference As messageHandler = Assembly.Instance.CentralMessenger

    Dim gripperControls As List(Of Button) = New List(Of Button)

    Property MaxLines As Integer = 8

    Private Sub BasicLoadMainPanel(sender As Object, e As EventArgs) Handles MyBase.Load

        If (assemblyReference Is Nothing) Then
            Exit Sub
        End If

        ButtonShutdown.Enabled = True
        enableInitializingButton(sender, e)

        'message bus initialize
        With UserControlMessageMainPanel
            .messengerReference = assemblyReference.CentralMessenger
            .IsValidToShow = userControlMessage.generateMessageFilters({AddressOf .isNonRedundantMessage,
                                                                        AddressOf Me.isAlarmOrStatusMessage})
            .MessageFormator = Function(__sender As messageHandler, __e As messagePackageEventArg) (String.Format(vbCrLf & "{0} {1}", __e.Message.TimeStamp, __e.Message.AdditionalInfo))
        End With

        '---------------------------
        '   Gripper Control
        '---------------------------
        ButtonGRIPVAC.Tag = outputAddress.GRIP_VAC
        ButtonGRIPOPEN.Tag = outputAddress.GRIP_OPEN
        ButtonGRIPCLS.Tag = outputAddress.GRIP_CLS
        ButtonLightEnable.Tag = outputAddress.EN
        gripperControls.AddRange({ButtonGRIPVAC,
                                  ButtonGRIPOPEN,
                                  ButtonGRIPCLS,
                                  ButtonLightEnable})

        With DataGridViewErrorMatrix
            .DataSource = frames.Instance.ErrorMatrixs
            .AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells
        End With

        TimerRefresh.Enabled = True
    End Sub
    Function isAlarmOrStatusMessage(sender As messageHandler, e As messagePackageEventArg) As Boolean
        Return e.Message.PrimaryKey.Equals(GetType(alarmGeneric)) Or e.Message.PrimaryKey.Equals(statusEnum.GENERIC_MESSAGE)
    End Function
    Sub pauseHandler() Handles pauseBlockReference.InterceptedEvent
        Me.Invoke(Sub() ButtonPause.BackColor = Color.Yellow)
    End Sub
    Sub unpauseHandler() Handles pauseBlockReference.UninterceptedEvent
        Me.Invoke(Sub()  ButtonPause.BackColor = DefaultBackColor)
    End Sub


    Private Sub systemShutDownHandler(sender As Object, e As EventArgs) Handles assemblyReference.SystemClosed
        Me.Invoke(Sub()

                      Try

                          confirmForm = New formConfirm()
                          confirmForm.DialogResult = DialogResult.Cancel
                          confirmForm.Message = String.Format("System Shudown , Reason : ({0:G})", e.ToString())
                          confirmForm.ButtonCancel.Enabled = False
                          If (confirmForm.ShowDialog() = DialogResult.OK) Then
                              My.Application.ApplicationContext.MainForm.Close()
                              End
                          End If

                      Catch ex As Exception

                          Throw New Exception("systemShutDownHandler(sender As Object, e As closeEvent)" + ex.Message, ex)

                      End Try

                  End Sub)
    End Sub

    Private flipStatus As Boolean = False
    Private Sub flashButton(sender As Object, e As EventArgs) Handles TimerFlash.Tick
        utilitiesUI.controlFollowBooleanColor(ButtonStart, flipStatus, Color.LimeGreen, SystemColors.Control)
        flipStatus = Not flipStatus
    End Sub
    '-------------------------------------
    '   Initializing button routine
    '-------------------------------------
    Public Sub enableInitializingButton(sender As Object, e As EventArgs)
        '--------
        '   Once start pressed to ingite
        '--------
        Me.Invoke(Sub()
                      ButtonStart.Enabled = True
                      TimerFlash.Enabled = True
                  End Sub)
    End Sub

    Private Sub BasicButtonClick(sender As Object, e As EventArgs) Handles ButtonShutdown.Click,
        ButtonPause.Click,
        ButtonStart.Click,
        ButtonFinish.Click,
        ButtonPointTeach.Click

        Select Case sender.Name
            '-------------
            '   System Part
            '-------------
            Case ButtonStart.Name
                ButtonStart.Enabled = False
                ButtonStart.BackColor = Color.LimeGreen
                TimerFlash.Enabled = False
                assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.ABLE_IGNITE)
                assemblyReference.operationSignals.setFlag(operationSignalsEnum.__START)
                '---------------------------------------------------------------------------------------
                'todo , setup ignite flag
                'i.e    'systemReference.unloaderMainControl.controlFlags.setFlag(unloaderSystemControl.controlFlagsEnum.ABLE_IGNITE)
                '---------------------------------------------------------------------------------------
            Case ButtonShutdown.Name
                confirmForm.DialogResult = DialogResult.Cancel
                confirmForm.Message = "Do You Really Want To Shutdown System ?"
                If (confirmForm.ShowDialog() = DialogResult.OK) Then
                    assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.IS_ABORT_SYSTEM)
                End If
            Case ButtonPause.Name
                assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.PAUSE_PRESSED)
            Case ButtonFinish.Name
                Dim confirmForm As formConfirm = New formConfirm With {.DialogResult = DialogResult.Cancel,
                                    .Message = "Confirm to finish auto run?", .StartPosition = FormStartPosition.CenterScreen}
                If (confirmForm.ShowDialog = DialogResult.OK) Then
                    assemblyReference.operationSignals.setFlag(operationSignalsEnum.__STOP)
                End If
            Case ButtonPointTeach.Name
                Dim __login As formPassword = New formPassword With {.StartPosition = FormStartPosition.CenterScreen}

                If (__login.ShowDialog = DialogResult.OK) Then
                    'rising motor setting form
                    Dim _formSetting As formSetting = New formSetting()
                    _formSetting.ShowDialog()
                    _formSetting.Dispose()
                Else
                    'cancel or incorrect , Hsien , 2015.06.16
                End If
        End Select
    End Sub

    Sub gripperButtonClick(sender As Button, e As EventArgs) Handles ButtonGRIPVAC.Click,
        ButtonGRIPOPEN.Click,
        ButtonGRIPCLS.Click,
        ButtonLightEnable.Click

        'flip
        mainIOHardware.writeBit(sender.Tag,
                                Not mainIOHardware.readBit(sender.Tag))

    End Sub


    Private Sub timerRefreshTick(sender As Object, e As EventArgs) Handles TimerRefresh.Tick
        gripperControls.ForEach(Sub(__button As Button)
                                    utilitiesUI.controlFollowBooleanColor(__button, mainIOHardware.readBit(__button.Tag),
                                                                          Color.Green,
                                                                          Control.DefaultBackColor)
                                End Sub)
        With DataGridViewErrorMatrix
            .Update()
            .Refresh()
        End With
    End Sub
End Class
