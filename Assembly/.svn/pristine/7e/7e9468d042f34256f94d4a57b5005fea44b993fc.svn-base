Imports Automation
Imports AutoNumeric
Imports Automation.Components

Public Class cureSetting
    Inherits settingBase

    Property ExposureTime As Integer = 10
    Property LensPercentage As Integer = 50

    Public Overrides Property Filename As String
        Get
            Return String.Format("{0}{1}.xml",
                                 measureProcedureSetting.settingPath,
                                 Me.ToString)
        End Get
        Set(value As String)
            'nothing
        End Set
    End Property

End Class

''' <summary>
''' 1. curing
''' 2. recording the variance of energy
''' </summary>
''' <remarks></remarks>
Public Class eproxyCuring
    Inherits systemControlPrototype
    Implements IProcedure
    Implements IDisposable


    Friend __cureSetting As cureSetting = New cureSetting

    Public Property Arguments As Object Implements IProcedure.Arguments
        Get
            Return Nothing
        End Get
        Set(value As Object)
            currentCuringData = value

            __nextCuringPosition = pData.MotorPoints(motorPoints.MpUV_FIRST).Clone
            __nextCuringPosition.DistanceInUnit += pData.MotorPoints(motorPoints.MpUV_PITCH).DistanceInUnit *
                CType(value, Func(Of materialData)).Invoke.IndexInArray
        End Set
    End Property
    Public Property IsProcedureStarted As New flagController(Of interlockedFlag) Implements IProcedure.IsProcedureStarted
    Public Property Result As IProcedure.procedureResultEnums Implements IProcedure.Result

    Dim __nextCuringPosition As cMotorPoint = Nothing

    Dim currentCuringData As Func(Of materialData) = Nothing

#Region "control members"
    Dim uvControlMotor As motorControlDrivable = New motorControlDrivable With {.IsEnabled = True}
    Dim uvCureStation As uvCure = New uvCure With {.IsEnabled = True}

    Dim readyPosition As cMotorPoint = Nothing
#End Region

    ''' <summary>
    ''' 1. move motor to corresponding position
    ''' 2. start curing
    ''' 3. record reading during curing(both channel
    ''' 4. until curing finished
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function stateExecute() As Integer

        With currentCuringData.Invoke

            If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                .cureDatas(dataKeysDefine.VOLTAGE_LEFT).Push = mainIOHardware.readDouble(inputAddress.PD_LEFT)
                .cureDatas(dataKeysDefine.VOLTAGE_RIGHT).Push = mainIOHardware.readDouble(inputAddress.PD_RIGHT)

            Else
                '---------------------
                '   Do not read
                '---------------------
            End If

            Select Case systemSubState
                Case 0
                    If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                        systemSubState += 10
                    Else

                    End If
                Case 10
                    If uvControlMotor.drive(motorControlDrivable.motorCommandEnum.GO_POSITION, __nextCuringPosition) =
                         IDrivable.endStatus.EXECUTION_END Then
                        'start curing
                        uvCureStation.Arguments = {__cureSetting.LensPercentage, __cureSetting.ExposureTime}
                        uvCureStation.IsProcedureStarted.setFlag(interlockedFlag.POSITION_OCCUPIED)

                        .cureDatas(dataKeysDefine.VOLTAGE_LEFT).setCureParameters(curingDataEachChannel.cureParametersEnum.PRE_POWER)
                        .cureDatas(dataKeysDefine.VOLTAGE_RIGHT).setCureParameters(curingDataEachChannel.cureParametersEnum.PRE_POWER)

                        systemSubState = 100
                    Else
                        '-----------------------------
                        '   Settling
                        '-----------------------------
                    End If
                Case 100
                    If Not uvCureStation.IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then

                        .cureDatas(dataKeysDefine.VOLTAGE_LEFT).setCureParameters(curingDataEachChannel.cureParametersEnum.POST_POWER_1)
                        .cureDatas(dataKeysDefine.VOLTAGE_RIGHT).setCureParameters(curingDataEachChannel.cureParametersEnum.POST_POWER_2)

                        systemSubState = 400
                    Else
                        '-------------------------------------
                        '   Curing , Record Left/Right Reading
                        '-------------------------------------
                    End If
                Case 400
                    '-------------------------------
                    '   Stablizing Left
                    '-------------------------------
                    If .cureDatas(dataKeysDefine.VOLTAGE_LEFT).IsStabled Then
                        .cureDatas(dataKeysDefine.VOLTAGE_LEFT).setCureParameters(curingDataEachChannel.cureParametersEnum.POST_POWER_2)
                        systemSubState = 450
                    Else
                        '---------------------------
                        '   Left Stablizing
                        '---------------------------
                    End If

                Case 450
                    '-------------------------------
                    '   Stablizing Right
                    '-------------------------------
                    If .cureDatas(dataKeysDefine.VOLTAGE_RIGHT).IsStabled Then
                        .cureDatas(dataKeysDefine.VOLTAGE_RIGHT).setCureParameters(curingDataEachChannel.cureParametersEnum.POST_POWER_2)
                        systemSubState = 500
                    Else
                        '---------------------------
                        '   Right Stablizing
                        '---------------------------
                    End If
                Case 500
                    If uvControlMotor.drive(motorControlDrivable.motorCommandEnum.GO_POSITION, readyPosition) =
                         IDrivable.endStatus.EXECUTION_END Then
                        systemSubState += 10
                    Else
                        '-----------------------------
                        '   Settling
                        '-----------------------------
                    End If
                Case 510
                    IsProcedureStarted.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    systemSubState = 0

            End Select

        End With


        Return 0
    End Function


#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As eproxyCuring
        Get
            If __instance Is Nothing Then
                __instance = New eproxyCuring
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As eproxyCuring = Nothing
#End Region


    Protected Sub New()
        __cureSetting.Load(Nothing)
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initMappingAndSetup))
        Me.systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        Me.systemMainState = systemStatesEnum.EXECUTE
    End Sub
    Function initMappingAndSetup() As Integer
        Me.uvControlMotor.MotorIndex = motorAddress.MpUV
        Me.readyPosition = pData.MotorPoints(motorPoints.MpUV_READY)
        Return 0
    End Function


#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
            End If
            __cureSetting.Save()
        End If
        Me.disposedValue = True
    End Sub

    Protected Overrides Sub Finalize()
        ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
