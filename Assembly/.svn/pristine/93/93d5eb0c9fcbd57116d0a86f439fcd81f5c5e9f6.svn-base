Option Strict Off
Imports Automation
Imports Automation.Components.Services
Imports Automation.mainIOHardware
Imports Automation.Components
Imports System.ComponentModel
Imports System.Net
'Imports CameraAndImageProcess
Imports System.IO.Ports
Imports System.Text.RegularExpressions
Imports SmarPodAssembly

Public Class Assembly
    Inherits assemblyArch

    Public Event SystemReady As EventHandler
    Public Event OperationStopped As EventHandler
    Public Event OperationStarted As EventHandler       'raised when system started

    Public WithEvents __headVirtualStation As headVirtualStation = New headVirtualStation
    Public WithEvents genericSettings As settingBlock = New settingBlock

    Public Event SystemIgnited(ByVal sender As Object, ByVal e As EventArgs)    'inform gui to enable buttons
    Public Event SystemStartPressed(ByVal sender As Object, ByVal e As EventArgs)    'inform gui to enable buttons

    Public operationSignals As flagController(Of operationSignalsEnum) = New flagController(Of operationSignalsEnum)

    Enum EnumSmarPodPoint
        PICK
        PLACE
        LIMZ
        PICK_STANDBY
        ALIGNMENT
        PLACE_STANDBY
        CALIBRATION
    End Enum

    Sub settingChanged(ByVal sender As settingBlock, ByVal e As EventArgs) Handles genericSettings.PropertyChanged
    End Sub

#Region "integration components"

    Dim hmiPauseButton As sensorControl = New sensorControl() With {.InputBit = inputAddress.PB_PAUSE}
    Dim hmiPauseLight As flipService = New flipService() With {.OutputBit = outputAddress.LP_PAUSE, .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Dim __timer As singleTimer = New singleTimer
#End Region

#Region "sub systems"

    Dim __serialPort As IO.Ports.SerialPort = New IO.Ports.SerialPort
    Public WithEvents _smarPod As Smarpod = New Smarpod With {.IsEnabled = True}
    Public igniteList As List(Of IFinishableStation) '= New List(Of IFinishableStation) From {RobotSystem, CassetteSystem}

#End Region
    Function initMappingSmarPod() As Integer
        Return 0
    End Function
    Function initMappingAndSetup() As Integer

        'state function configuration
        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.IDLE) = AddressOf stateIdle
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute 'Function() (0)
        systemMainState = systemStatesEnum.IGNITE

        'mount logger
        basicLogger.MessengerReference = CentralMessenger

        'door interlock , Hsien , 2015.05.14
        messageTimer.TimerGoal = New TimeSpan(0, 0, 1)
        With doorInterlock.SensorsNeedToCheck
        End With

        buzzer.OutputBit = outputAddress.BUZZER
        redTowerLight.OutputBit = outputAddress.LP_R
        yellowTowerLight.OutputBit = outputAddress.LP_Y
        greenTowerLight.OutputBit = outputAddress.LP_G

        pauseButtons.AddRange({hmiPauseButton})
        pauseLights.AddRange({hmiPauseLight})
        Return 0

    End Function

    Function initLoadSetting() As Integer
        loadSetting(Me.genericSettings, "setting.xml")
        Return 0
    End Function

    Function closeAssembly() As Integer
        '---------------------------
        '   Servo all motor off
        '---------------------------
        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ServoOn(index, IS_OFF)
        Next
        Return 0
    End Function
    Function initStartMotors() As Integer
        'release alarm , servo-on , clear register...etc
        '---------------------------
        '   Servo all motor off
        '---------------------------
        Dim remainedErrorStatus As Integer
        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ServoOn(index, pData.MotorSettings(index).ServoOnLevel)
            AMaxM4_ResetALM(index, IS_ON)
            AMaxM4_ErrorStatus(index, remainedErrorStatus)
        Next

        Threading.Thread.Sleep(1000)    'sleep for a while
        For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
            AMaxM4_ResetALM(index, IS_OFF)
        Next

        Return 0
    End Function

    Public Sub New()
        messageTimer.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1)
        'allocating central objects , hsien , 2015.03.31
        Me.CentralAlarmObject = New alarmManager
        Me.PauseBlock = New interceptObject
        Me.CentralMessenger = New messageHandler

        Me.initialize = CType([Delegate].Combine(Me.initialize,
            New Func(Of Integer)(AddressOf initLinkPause),
            New Func(Of Integer)(AddressOf initEnableAllDrives),
            New Func(Of Integer)(AddressOf initMappingAndSetup),
            New Func(Of Integer)(AddressOf initMappingSmarPod),
            New Func(Of Integer)(AddressOf initSubsystemInitialize),
            New Func(Of Integer)(AddressOf initStartMotors)),
        Global.System.Func(Of Integer))

        'Hsien , define shutdown script
        Me.shutdown = [Delegate].Combine(New Func(Of Integer)(AddressOf closeDumpAlarms2Message),
                                         New Func(Of Integer)(AddressOf closeFlushAllMessages),
                                         New Func(Of Integer)(AddressOf closeAssembly),
                                         New Func(Of Integer)(Function() As Integer
                                                                  genericSettings.Save()
                                                                  Return 0
                                                              End Function))
    End Sub
#Region "state functions"
    Function stateIgnite() As Integer

        Select Case systemSubState
            Case 0
                '---------------------------------
                '   Wait until all hardware online
                '---------------------------------
                If (mainIOHardware.Instance.PhysicalHardwareList.TrueForAll(Function(__hardware As subHardwareNode) __hardware.Status = hardwareStatusEnum.HEALTHY)) Then
                    RaiseEvent SystemReady(Me, Nothing)
                    sendMessage(statusEnum.GENERIC_MESSAGE, "All hardware connected")
                    systemSubState = 10
                Else
                    '----------------------------------------
                    '   Some hardware failed , wait reconnect
                    '----------------------------------------
                End If
            Case 10
                'RobotSystem.saftyGuard.LockBits.ForEach(Sub(obj As ULong) writeBit(obj, True)) 'set all door locked
                __timer.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.5) : __timer.IsEnabled = True
                systemSubState = 20
            Case 20
                If __timer.IsTimerTicked = True Then
                    doorInterlock.IsEnabled = True
                    'RobotSystem.saftyGuard.IsEnabled = True
                    systemMainState = systemStatesEnum.IDLE 'Hsien , 2015.04.30
                End If



        End Select
        Me.controlFlags.setFlag(controlFlagsEnum.IS_BUZZER_ON)
        Return 0
    End Function
    Function stateIdle() As Integer
        Select Case systemSubState

            Case 0
                'check physical start button
                controlFlags.setFlag(controlFlagsEnum.ABLE_IGNITE)
                operationSignals.setFlag(operationSignalsEnum.__START)
                If (controlFlags.readFlag(controlFlagsEnum.ABLE_IGNITE)) Then
                    RaiseEvent SystemStartPressed(Me, Nothing)
                    systemSubState = 10
                Else
                End If


            Case 10

                If (igniteList.TrueForAll(Function(__system As IFinishableStation) (Not __system.FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)))) Then
                    RaiseEvent SystemIgnited(Me, Nothing)
                    systemSubState = 20
                    sendMessage(statusEnum.GENERIC_MESSAGE, "All sub system homing finished")
                Else
                    If (buzzer.IsEnabled) Then
                        buzzer.IsEnabled = False
                    End If
                End If

            Case 20
                operationSignals.resetFlag(operationSignalsEnum.__STOP)
                controlFlags.resetFlag(controlFlagsEnum.ABLE_IGNITE) 'auto reset able ignite flag
                If (operationSignals.readFlag(operationSignalsEnum.__START)) Then
                    RaiseEvent OperationStarted(Me, Nothing)    'Hsien , 2015.04.15
                    genericSettings.applyPropertyChange()   'Hsien , re-apply user preseted settings , 2015.09.08
                    'start the chain
                    __headVirtualStation.operationSignals.setFlag(operationSignalsEnum.__START)
                    sendMessage(statusEnum.GENERIC_MESSAGE, "start to auto run")  'Hsien , 2015.09.01
                    systemMainState = systemStatesEnum.EXECUTE
                End If
        End Select
        Return 0
    End Function
    Function stateExecute() As Integer
        If doorInterlock.IsEnabled And Not doorInterlock.IsAllConditionPassed Then
            If buzzer.IsEnabled = False Then
                'buzzer.IsEnabled = True
            End If
        End If

        Select Case systemSubState
            Case 0

                If (operationSignals.viewFlag(operationSignalsEnum.__STOP)) Then
                    __headVirtualStation.operationSignals.setFlag(operationSignalsEnum.__STOP)   'chain head stop started
                    sendMessage(statusEnum.GENERIC_MESSAGE, "finishing auto run...")  'Hsien , 2015.04.15
                    systemSubState = 100
                End If

            Case 100
                If __headVirtualStation.MainState = systemStatesEnum.IDLE Then
                    'Hsien , direct control conveyor system , 2015.10.06
                    Me.buzzer.IsEnabled = False 'stop buzzer if had enabled by cassette minder
                    'return to idle
                    operationSignals.resetFlag(operationSignalsEnum.__START)
                    RaiseEvent OperationStopped(Me, Nothing)    'Hsien , 2015.04.15 
                    systemMainState = systemStatesEnum.IDLE
                Else
                    '--------------------
                    '   Wait all component stopped
                    '--------------------
                End If


        End Select



        Return 0
    End Function
#End Region

End Class

