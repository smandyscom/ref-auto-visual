Imports AutoNumeric
Imports Cognex.VisionPro.ToolBlock
Imports MathNet.Numerics.LinearAlgebra
Imports AutoNumeric.utilities
Imports System.Xml.Serialization
Imports System.IO

''' <summary>
''' Feature(surface) measurement procedure and related settings
''' </summary>
''' <remarks></remarks>
Public Class lpcFeatureMeasureSetting
    Inherits imageProcessSettingBlock

    Public Event CameraProcessTriggered(ByVal sender As Object, ByVal e As EventArgs)

    Dim WithEvents triggerHandle As imageProcessTriggerEventArgs = Nothing
    Dim WithEvents doneHanle As imageProcessEndEventArgs = Nothing

    Protected readyPosition As itemsDefinition = itemsDefinition.CHOKE_CENTER
    Protected __featureFrame As framesDefinition = framesDefinition.LPC_REAL_F1
    Protected CameraFrame As framesDefinition = framesDefinition.C1REAL
    Protected interestedFeatures As List(Of itemsDefinition) = New List(Of itemsDefinition) From {itemsDefinition.LPC_R1,
                                                                                                 itemsDefinition.LPC_R2}
    Protected dimensionSelection As Integer = selectionEnums.X Or selectionEnums.Y

    Dim imageRetryCounter As Integer = 0
    Dim imageRetryGoal As Integer = 5

    Friend __outputList As List(Of measuredDataPair) = New List(Of measuredDataPair)


    Function procedure(ByRef state As Integer) As Boolean
        With frames.Instance
            Select Case state
                Case 0
                    'move to ready position for X stage
                    .CurrentRItem = readyPosition
                    state += 10
                Case 10
                    'align the feature center
                    If Assembly.Instance.IsAllAxesSettled Then

                        Dim currentTransformation As htmEdgeElementary = frames.Instance.Transformation(__featureFrame,
                                                                                                        CameraFrame).Value

                        With currentTransformation
                            'origin coincidence
                            .Origin = New PositionVector(Nothing)
                            'maintain the nominal pose
                            currentTransformation.RotationMatrix = frames.Instance.Transformation(framesDefinition.LPC,
                                                                                       CameraFrame).RotationMatrix
                        End With

                        'would auto compensate pose-error , move real frame to meet the nominal pose
                        .solveS(currentTransformation)
                        state += 10
                    Else
                        '--------------------
                        '   Settling
                        '--------------------
                    End If
                Case 20
                    If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) =
                        Automation.IDrivable.endStatus.EXECUTION_END Then

                        'initiating measuring procedure

                        state = 100
                    Else
                        '--------------
                        '   Moving
                        '--------------
                    End If
                Case 100
                    '-------------------------------------------------------
                    '   Image Processing
                    '-------------------------------------------------------
                    triggerHandle = New imageProcessTriggerEventArgs(Me.__toolBlock)
                    RaiseEvent CameraProcessTriggered(Me, triggerHandle) 'would output series of points
                    state += 10
                Case 110
                    If doneHanle IsNot Nothing AndAlso
                        doneHanle.Result = Cognex.VisionPro.CogToolResultConstants.Accept Then
                        'take measured value/nominal value into list
                        'there's one dimension missing on camera

                        For index = 0 To InterestedFeatures.Count - 1
                            'error on LPC-REAL_Frame
                            Dim nominalValue = .objectsDictionary(InterestedFeatures(index))
                            Dim realValue = .Transformation(CameraFrame, framesDefinition.LPC_REAL) * New PositionVector(doneHanle.OutputPositionInUnit(index), CameraFrame)

                            __outputList.Add(New measuredDataPair(nominalValue.RawValue,
                                                                realValue.RawValue,
                                                                dimensionSelection))

                        Next

                        '------------------------
                        '   Back to safe position
                        '------------------------
                        sHtm.Instance.ControlVector = CreateVector.Dense(Of Double)({0,
                                                                                     0,
                                                                                     -5,
                                                                                     0,
                                                                                     0,
                                                                                     0})
                        state = 500

                    ElseIf imageRetryCounter < imageRetryGoal Then
                        'try fetch image again
                        imageRetryCounter += 1
                        state = 100
                    Else
                        '------------------
                        '   Camera working
                        '-----------------
                    End If
                    '-----------------------------
                    '   Wait Smodpod Return
                    '-----------------------------
                Case 500
                    If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) =
                         Automation.IDrivable.endStatus.EXECUTION_END Then
                        Return True
                    Else
                        '----------------
                        '
                        '----------------
                    End If
            End Select

        End With

        Return False
    End Function


    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Sub imageProcessTriggered(sender As Object, e As imageProcessTriggerEventArgs) Handles Me.CameraProcessTriggered
        Me.doneHanle = Nothing 'reset
        'e.ToolBlock.Run()
    End Sub
    ''' <summary>
    ''' Image process finished
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Sub imageProcessDone(sender As Object, e As imageProcessEndEventArgs) Handles triggerHandle.ImageProcessDone
        Me.doneHanle = e
    End Sub

    Sub New(__featureFrame As framesDefinition)
        
        Me.__featureFrame = __featureFrame
        Select Case __featureFrame
            Case framesDefinition.LPC_REAL_F1
                readyPosition = itemsDefinition.CHOKE_CENTER
                CameraFrame = framesDefinition.C1REAL
                With interestedFeatures
                    .Add(itemsDefinition.LPC_R1)
                    .Add(itemsDefinition.LPC_R2)
                End With
                dimensionSelection = selectionEnums.Y Or selectionEnums.Z
            Case framesDefinition.LPC_REAL_F2
                readyPosition = itemsDefinition.CHOKE_CENTER
                CameraFrame = framesDefinition.C2REAL
                With interestedFeatures
                    .Add(itemsDefinition.LPC_R2)
                    .Add(itemsDefinition.LPC_R3)
                End With
                dimensionSelection = selectionEnums.X Or selectionEnums.Z
            Case framesDefinition.LPC_REAL_F3
                readyPosition = itemsDefinition.C3_ORIGIN
                CameraFrame = framesDefinition.C3REAL
                With interestedFeatures
                    .Add(itemsDefinition.LPC_R1)
                    .Add(itemsDefinition.LPC_R2)
                    .Add(itemsDefinition.LPC_R3)
                    .Add(itemsDefinition.LPC_H1)
                    .Add(itemsDefinition.LPC_H2)
                End With
                dimensionSelection = selectionEnums.X Or selectionEnums.Y
        End Select


    End Sub
    Public Sub New()

    End Sub

#Region "persistance"
    Shared settingPath As String = My.Application.Info.DirectoryPath & "\Data\feature\"
    <XmlIgnore()>
    Public Overrides Property Filename As String
        Get
            If Not Directory.Exists(settingPath) Then
                Directory.CreateDirectory(settingPath)
            End If

            Return String.Format("{0}{1}.xml",
                                 settingPath,
                                 Me.ToString)
        End Get
        Set(value As String)
            'nothing to do
        End Set
    End Property

    Public Overrides Sub Load(filename As String)
        MyBase.Load(filename)
        Try
            Me.applyPropertyChange() ' after loaded , transmit setting
        Catch ex As Exception
        End Try
    End Sub
    Public Overrides Sub Save()
        MyBase.Save()
    End Sub
    Public Overrides Function ToString() As String
        Return String.Format("{0}_{1}",
                             Me.__featureFrame.ToString,
                             Me.GetType.ToString)
    End Function
#End Region

End Class


''' <summary>
''' 1.Align F1 to C1 , measure R1,R2
''' 2.Align F2 to C2 , meausre R2,R3
''' 3.Align F3 to C3 (Orientation need) , measure R1,R2,R3,H1,H2
''' 4. Do error fitting
''' 5. Do step 1-4 until error vector converged 
''' </summary>
''' <remarks></remarks>
Public Class lpcMark
    Inherits measureProcedureType1Base
    Implements IDisposable

    Friend featureMeasureSettings As Dictionary(Of framesDefinition, lpcFeatureMeasureSetting) =
        New Dictionary(Of framesDefinition, lpcFeatureMeasureSetting)

    Protected Overrides Function finalizeProcedure(ByRef state As Integer) As Boolean
        Return True
    End Function

    Protected featureProcedureState As Integer = 0
    Protected currentFeatureProcedure As Dictionary(Of framesDefinition, lpcFeatureMeasureSetting).Enumerator = Nothing
    ''' <summary>
    ''' 1. move X
    ''' 2. align center by S
    ''' 3. measure features , output pairs
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function measureProcedure(ByRef state As Integer) As Boolean

        Select Case state
            Case 0
                currentFeatureProcedure = featureMeasureSettings.GetEnumerator
                state = 10
            Case 10
                If currentFeatureProcedure.MoveNext Then
                    state = 100
                Else
                    '-----------------------
                    '   All feature executed
                    '-----------------------
                    Return True
                End If
            Case 100
                With currentFeatureProcedure.Current.Value
                    If .procedure(featureProcedureState) Then
                        featureProcedureState = 0 'rewind
                        dataPairCollection.AddRange(.__outputList)
                        state = 10
                    Else
                        '-----------------------
                        '   Procedure is running
                        '-----------------------    
                    End If
                End With
        End Select

        Return False

    End Function

    Protected Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        'clear lpc real
        Return True
    End Function


    Protected Sub New()
        With featureMeasureSettings
            For Each item As framesDefinition In {framesDefinition.LPC_REAL_F1,
                                                  framesDefinition.LPC_REAL_F2,
                                                  framesDefinition.LPC_REAL_F3}
                .Add(item, New lpcFeatureMeasureSetting(item))

            Next

            For Each item As KeyValuePair(Of framesDefinition, lpcFeatureMeasureSetting) In .ToList
                item.Value.Load(Nothing)
            Next

        End With

        'all calculation used to mark the lpcreal
        correspondingErrorMatrix = frames.Instance.Elementray(framesDefinition.LPC_REAL,
                                                              framesDefinition.LPC)
    End Sub


#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As lpcMark
        Get
            If __instance Is Nothing Then
                __instance = New lpcMark
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As lpcMark = Nothing
#End Region

#Region "IDisposable Support"
    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            For Each item As KeyValuePair(Of framesDefinition, lpcFeatureMeasureSetting) In featureMeasureSettings.ToList
                item.Value.Save()
            Next
        End If
        Me.disposedValue = True
    End Sub

    Protected Overrides Sub Finalize()
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(False)
        MyBase.Finalize()
    End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
