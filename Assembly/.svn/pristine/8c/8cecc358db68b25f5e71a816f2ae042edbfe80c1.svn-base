Imports AutoNumeric
Imports Automation

Public Class cameraMeasureSetting
    Inherits settingBase

    Property Reference As framesDefinition = framesDefinition.C1REAL

    Property CenterText As String
        Get
            Return centerPosition.PositionText
        End Get
        Set(value As String)
            centerPosition = New PositionVector(Reference)
            centerPosition.PositionText = value
        End Set
    End Property
    Dim centerPosition As PositionVector = New PositionVector(Nothing)

    ''' <summary>
    ''' In mm
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property Radius As Double = 2
    ''' <summary>
    ''' How many points should be generated
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property Divides As Integer = 10

    ''' <summary>
    ''' Generate Points according to setting
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    ReadOnly Property MeasurePoints As List(Of PositionVector)
        Get
            Dim outputList As List(Of PositionVector) = New List(Of PositionVector)
            Dim outputPoint As PositionVector = Nothing

            Dim radIncrement As Double = 2 * Math.PI / Divides
            Dim radAccumulate As Double = 0

            For index = 0 To Divides - 1
                outputPoint = New PositionVector(Reference)
                With outputPoint
                    .X = centerPosition.X + Math.Cos(radAccumulate)
                    .Y = centerPosition.Y + Math.Sin(radAccumulate)
                    .Z = 0
                End With
                radAccumulate += radIncrement

                outputList.Add(outputPoint)
            Next
            Return outputList
        End Get
    End Property

End Class

''' <summary>
''' The camera calibration usage data structrue
''' For C1,C2,C3
''' </summary>
''' <remarks></remarks>
Public Class c1c2c3
    Inherits measureProcedureType1Base

    Property CurrentTarget As framesDefinition
        Get
            Return __currentTarget
        End Get
        Set(value As framesDefinition)
            __currentTarget = value
            selectedSetting = measureSettings(__currentTarget).MeasurePoints
            selectedIterator = selectedSetting.GetEnumerator
            selectedIterator.MoveNext() 'pick the first one
        End Set
    End Property

    'Ax go to netural position
    'c1,c2 to chuker , c3 to c3 origin
    'select referenced in Cn , P_c (nominal)
    'measure points generated by following parameters : X-pitch,X-times,Y-pitch,Y-times
    'calculate T_S_S0(fixed pose) , P_C =  T_S_C * P_S , translation = P_C[3:1] - R_S_C*P_S[3:1]
    'move smarpod
    'trigger camera to measure
    'output real position , and nomial position

    Dim measureSettings As Dictionary(Of framesDefinition, cameraMeasureSetting) =
        New Dictionary(Of framesDefinition, cameraMeasureSetting)

    Dim selectedSetting As List(Of PositionVector) = Nothing
    Dim selectedIterator As List(Of PositionVector).Enumerator = Nothing

    Dim __currentTarget As framesDefinition = framesDefinition.C1REAL

    Public Overrides Function measureProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                'move the smart pod
                frames.Instance.solveSFixedPose(frames.Instance.objectsDictionary(itemsDefinition.BALL_CENTER),
                                                selectedIterator.Current)
            Case 10
                If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) = Automation.IDrivable.endStatus.EXECUTION_END Then
                    'trigger the camera
                Else
                    'smarpod action
                End If
            Case 100
                'TODO
                'camera task done
                'pick the X,Y values only
                dataPairCollection.add()

                selectedIterator.MoveNext()
                If selectedIterator.Current IsNot Nothing Then
                    state = 0 'rewind
                Else
                    '----------------
                    '   All measure points had been done
                    '----------------
                    Return True
                End If
        End Select

    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                With frames.Instance

                    'the preparation sequences
                    .CurrentMovingItem = framesDefinition.S0
                    Select Case __currentTarget
                        Case framesDefinition.C1REAL,
                             framesDefinition.C2REAL
                            .CurrentRItem = itemsDefinition.CHOKE_CENTER
                        Case framesDefinition.C3REAL
                            .CurrentRItem = itemsDefinition.C3_ORIGIN
                        Case framesDefinition.Y0REAL
                            .CurrentMovingItem = framesDefinition.Y0
                            .CurrentRItem = itemsDefinition.C3_ORIGIN
                    End Select
                    state = 10
                End With
            Case 10
                '-----------------------
                '   End when XYZ settled
                '-----------------------
                Return Assembly.Instance.IsXYZSettled
        End Select
        Return False
    End Function
End Class
