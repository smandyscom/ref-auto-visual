Imports Automation
Imports AutoNumeric
Imports AutoNumeric.utilities
Imports System.Xml.Serialization


Public Class dispCalibrationCameraSetting
    Inherits imageProcessSettingBlock

    Friend measureFrame As framesDefinition = framesDefinition.C1REAL
    Friend readyPoint As itemsDefinition = itemsDefinition.C1_DISP_READY
    Friend processPoint As itemsDefinition = itemsDefinition.C1_ORIGIN
    'Protected dimensionSelection As Integer = selectionEnums.Y Or selectionEnums.Z

    'Friend measuredPointInDispReal As PositionVector = New PositionVector(framesDefinition.DISP_HEAD_REAL)

    Sub New(__feature As itemsDefinition)
        Select Case __feature
            Case itemsDefinition.C1_ORIGIN
                measureFrame = framesDefinition.C1REAL
                readyPoint = itemsDefinition.C1_DISP_READY
                'dimensionSelection = selectionEnums.Y Or selectionEnums.Z
            Case itemsDefinition.C2_ORIGIN
                measureFrame = framesDefinition.C2REAL
                readyPoint = itemsDefinition.C2_DISP_READY
                'dimensionSelection = selectionEnums.X Or selectionEnums.Z
        End Select
        processPoint = __feature
    End Sub
    Sub New()
        'for serialization usage
    End Sub
End Class

''' <summary>
''' Including two camera
''' </summary>
''' <remarks></remarks>
Public Class dispCalibrationSetting
    Inherits measureProcedureSetting

    Property C1Setting As dispCalibrationCameraSetting = New dispCalibrationCameraSetting(itemsDefinition.C1_ORIGIN)
    Property C2Setting As dispCalibrationCameraSetting = New dispCalibrationCameraSetting(itemsDefinition.C2_ORIGIN)

    <XmlIgnore()>
    ReadOnly Property FeatureMeasureSettings As Dictionary(Of itemsDefinition, dispCalibrationCameraSetting)
        Get
            If __featureMeasureSettings Is Nothing Then
                __featureMeasureSettings = New Dictionary(Of itemsDefinition, dispCalibrationCameraSetting)
                __featureMeasureSettings(itemsDefinition.C1_ORIGIN) = C1Setting
                __featureMeasureSettings(itemsDefinition.C2_ORIGIN) = C2Setting
            End If

            Return __featureMeasureSettings
        End Get
    End Property
    Protected __featureMeasureSettings As Dictionary(Of itemsDefinition, dispCalibrationCameraSetting) = Nothing
    Friend currentFeatureProcedure As Dictionary(Of itemsDefinition, dispCalibrationCameraSetting).Enumerator = Nothing

End Class

Public Class dispCalibration
    Inherits measureProcedureType1Base

    Protected ReadOnly Property Setting As dispCalibrationSetting
        Get
            Return CType(__measureSetting, dispCalibrationSetting)
        End Get
    End Property

    Protected Sub New()
        MyBase.New(compenstationMethodEnums.AS_PASSIVE_OBJECT,
                   New dispCalibrationSetting,
                   frames.Instance.Elementray(framesDefinition.DISP_HEAD_REAL, framesDefinition.DISP_HEAD))
    End Sub

#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As dispCalibration
        Get
            If __instance Is Nothing Then
                __instance = New dispCalibration
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As dispCalibration = Nothing
#End Region

    ''' <summary>
    ''' 0: move to c1 origin , take measuring
    ''' 1: move to c2 origin , take measuring
    ''' 2: cal
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function measureProcedure(ByRef state As Integer) As Boolean

        Select Case state
            Case 0
                Setting.currentFeatureProcedure = Setting.FeatureMeasureSettings.GetEnumerator
                state += 10
            Case 10
                If Setting.currentFeatureProcedure.MoveNext Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = Setting.currentFeatureProcedure.Current.Value.readyPoint
                    End With
                    state = 20
                Else
                    '---------------
                    '   All procedure proceded
                    '---------------
                    state = 100
                End If
            Case 20
                If Assembly.Instance.IsAllAxesSettled Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = Setting.currentFeatureProcedure.Current.Value.processPoint
                    End With
                    state = 30
                Else
                    '-------------------------------
                    '   Settling
                    '-------------------------------
                End If
            Case 30
                If Assembly.Instance.IsAllAxesSettled Then
                    Setting.currentFeatureProcedure.Current.Value.onCameraTriggered()
                    state = 40
                Else
                    '-------------------
                    '   Settling
                    '-------------------
                End If
            Case 40
                With Setting.currentFeatureProcedure.Current.Value
                    If .IsImageProcessDone Then

                        'output to data pair collection
                        'origin of DISP comparasion
                        MyBase.dataPairCollection.Add(New measuredDataPair(New PositionVector(Nothing).RawValue,
                                                                           (frames.Instance.Transformation(.measureFrame, framesDefinition.DISP_HEAD_REAL) * New PositionVector(.Coordinates.First, .measureFrame)).RawValue))

                        'back to ready point
                        With frames.Instance
                            .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                            .CurrentRItem = Setting.currentFeatureProcedure.Current.Value.readyPoint
                        End With
                        state = 50
                    Else
                        '------------------------
                        '   Not Done Yet
                        '------------------------
                    End If
                End With
            Case 50
                If Assembly.Instance.IsAllAxesSettled Then
                    state = 10
                Else
                    '-------------------------------
                    '   Settling
                    '-------------------------------
                End If

        End Select

        Return False
    End Function
    ''' <summary>
    ''' Average the errors
    ''' </summary>
    ''' <param name="__dataCollection"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function dataHandlingMethod(__dataCollection As List(Of measuredDataPair)) As htmEdgeElementary
        Dim output As htmEdgeElementary = New htmEdgeElementary(Nothing,
                                                                Nothing)
        output.PositionVector = measuredDataPair.averageErrorVector(__dataCollection)
        Return output
    End Function
End Class
