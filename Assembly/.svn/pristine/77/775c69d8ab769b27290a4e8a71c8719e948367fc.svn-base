Imports Automation
Imports System.Xml.Serialization
Imports System.IO
Imports AutoNumeric


''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
<Serializable()>
Public MustInherit Class cameraCalibrationSettingBase
    Inherits settingBase

    ''' <summary>
    ''' Calibration goal
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    ReadOnly Property RealReference As framesDefinition
        Get
            Return __realReference
        End Get
    End Property
    ReadOnly Property NominalReference As framesDefinition
        Get
            Return __nominalReference
        End Get
    End Property

    Protected __realReference As framesDefinition = framesDefinition.C1REAL
    Protected __nominalReference As framesDefinition = framesDefinition.C1

  

    ''' <summary>
    ''' Generate Points according to setting
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    <XmlIgnore()>
    MustOverride ReadOnly Property MeasurePoints As List(Of PositionVector)
  
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    <XmlIgnore()>
    Property ImageProcessSetting As imageProcessSettingBlock = Nothing

    Sub New(__realReference As framesDefinition,
            __nominalReference As framesDefinition)

        Me.__realReference = __realReference
        Me.__nominalReference = __nominalReference

        Me.ImageProcessSetting = New imageProcessSettingBlock(__realReference.ToString)

    End Sub

    ''' <summary>
    ''' For loading use
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub New()

    End Sub

    Public Overrides Function ToString() As String
        Return String.Format("{0}_{1}",
                             __realReference.ToString,
                             Me.GetType.ToString)
    End Function

#Region "persistance"
    Shared settingPath As String = My.Application.Info.DirectoryPath & "\Data\calibration\"
    <XmlIgnore()>
    Public Overrides Property Filename As String
        Get
            If Not Directory.Exists(settingPath) Then
                Directory.CreateDirectory(settingPath)
            End If

            Return String.Format("{0}{1}.xml",
                                 settingPath,
                                 Me.ToString)
        End Get
        Set(value As String)
            'nothing to do
        End Set
    End Property

    Public Overrides Sub Load(filename As String)
        MyBase.Load(filename)
        'TODO , solve dependency issue
        Try
            Me.applyPropertyChange() ' after loaded , transmit setting
        Catch ex As Exception
        End Try
    End Sub
    Public Overrides Sub Save()
        MyBase.Save()
    End Sub
#End Region

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Overridable Sub settingChanged() Handles MyBase.PropertyChanged
        'reload the cog tool block
        ImageProcessSetting.applyPropertyChange()
    End Sub


End Class


Public Class cameraCalibrationSettingRectangle
    Inherits cameraCalibrationSettingBase

    Property LeftUpCorner As PositionVector = New PositionVector(Nothing)
    Property XPitch As Double = 1
    Property XCounts As Integer = 5
    Property YPitch As Double = 1
    Property YCounts As Integer = 5

    <XmlIgnore()>
    Public Overrides ReadOnly Property MeasurePoints As List(Of PositionVector)
        Get
            Dim outputList As List(Of PositionVector) = New List(Of PositionVector)
            Dim outputPoint As PositionVector = New PositionVector(LeftUpCorner.RawValue, __realReference)

            'initial point
            outputList.Add(outputPoint.Clone)

            For yIndex = 0 To YCounts - 1
                For xIndex = 0 To XCounts - 1
                    outputPoint.X += XPitch
                    'as fifo
                    outputList.Add(outputPoint.Clone)
                Next
                outputPoint.X = LeftUpCorner.X 'x value reset
                outputPoint.Y += YPitch
            Next

            Return outputList
        End Get
    End Property

    Sub New(__realReference As framesDefinition,
            __nominalReference As framesDefinition)
        MyBase.New(__realReference,
                   __nominalReference)
    End Sub
    Public Sub New()

    End Sub

End Class


Public Class cameraCalibrationCircle
    Inherits cameraCalibrationSettingBase

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property CenterText As String
        Get
            Return centerPosition.PositionText
        End Get
        Set(value As String)
            centerPosition = New PositionVector(__realReference)
            centerPosition.PositionText = value
        End Set
    End Property
    Friend centerPosition As PositionVector = New PositionVector(Nothing)

    ''' <summary>
    ''' In mm
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property Radius As Double = 2
    ''' <summary>
    ''' How many points should be generated
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property Divides As Integer = 10

    <XmlIgnore()>
    Public Overrides ReadOnly Property MeasurePoints As List(Of PositionVector)
        Get
            Dim outputList As List(Of PositionVector) = New List(Of PositionVector)
            Dim outputPoint As PositionVector = Nothing

            Dim radIncrement As Double = 2 * Math.PI / Divides
            Dim radAccumulate As Double = 0

            For index = 0 To Divides - 1
                outputPoint = New PositionVector(RealReference)
                With outputPoint
                    .X = centerPosition.X + Radius * Math.Cos(radAccumulate)
                    .Y = centerPosition.Y + Radius * Math.Sin(radAccumulate)
                    .Z = 0
                End With
                radAccumulate += radIncrement

                outputList.Add(outputPoint)
            Next
            Return outputList
        End Get
    End Property

    Sub New(__realReference As framesDefinition,
           __nominalReference As framesDefinition)
        MyBase.New(__realReference,
                   __nominalReference)
    End Sub
    Protected Sub New()

    End Sub

End Class