Imports Automation
Imports System.IO
Imports Automation.Components.Services
Imports Automation.Components.CommandStateMachine
Imports System.Text.RegularExpressions

Public Class formMain

    Private WithEvents __assembly As Assembly = New Assembly  'todo , allocating specific assembly here
    Private WithEvents messengerReference As messageHandler
    Private WithEvents pauseBlockReference As interceptObject

    Dim WithEvents __assemblyAlarmManager As alarmManager  'ready link to __assembly

    Private historyConsoleMaxLines As Integer = 64

    Dim __messageDataBase = New dataBaseMain()  'todo , allocating specific dataBase here
    Dim __sensorAreaDatabase As IMessageQuery = New sensorAreaDatabase    'Hsien , used to query sensor area
    Dim __sensorDetailDatabase As sensorDetailDatabase = New sensorDetailDatabase



    Private Sub formMain_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        '__assembly._smarPod.Disconnect()
    End Sub


    'Hsien , 2015.10.26 , Mes Integration
   
    Private Sub loadMain(sender As Object, e As EventArgs) Handles MyBase.Load


        'message bus initialize
        With UserControlMessage1
            .messengerReference = __assembly.CentralMessenger

            .IsValidToShow = userControlMessage.generateMessageFilters({AddressOf .isNonRedundantMessage})
            .MessageFormator = Function(__sender As messageHandler, __e As messagePackageEventArg) (String.Format(vbCrLf & "{0} {1}", __e.Message.TimeStamp, __e.Message.AdditionalInfo))
        End With
        Me.UserControlAliveBar1.assemblyReference = __assembly

        System.Diagnostics.Process.GetCurrentProcess.PriorityClass = ProcessPriorityClass.High  'set me as highest priority

        Dim di As DirectoryInfo = New DirectoryInfo(My.Application.Info.DirectoryPath + "\Data\")
        If (Not di.Exists) Then
            '--------------
            '   Once directory not existed , created one
            '--------------
            di.Create()
        End If

        '------------------------------------------------------
        '   Show the version info , and write into version file
        '------------------------------------------------------
        Me.Text = String.Format("{0:G} {1:G}", My.Application.Info.ProductName, My.Application.Info.Version)

        Dim rtb As RichTextBox = New RichTextBox()

        rtb.Text = My.Application.Info.Title + Environment.NewLine() _
            + My.Application.Info.Description + Environment.NewLine() _
            + My.Application.Info.CompanyName + Environment.NewLine() _
            + My.Application.Info.ProductName + Environment.NewLine() _
            + My.Application.Info.Copyright + Environment.NewLine() _
            + My.Application.Info.Version.ToString()

        System.IO.File.WriteAllText(My.Application.Info.DirectoryPath + "\Data\" + "VersionInfo.rtf", rtb.Rtf)
        '------------------------------
        '   Initializing Message Databse
        '------------------------------
        messagePackage.QueryInterface = Nothing
        alarmContentMotor.MotorEnumType = GetType(motorAddress)
        alarmContextBase.QueryInterface = __sensorDetailDatabase
        alarmContentSensor.InputsEnumType = GetType(inputAddress)
        mainIOHardware.Instance.Load(Nothing)   'load the configuration
        mainIOHardware.__initialize()   'initialize io hardware
        mainIOHardware.scanBit(GetType(inputAddress))   'make sure if all address valid
        mainIOHardware.scanBit(GetType(outputAddress))
        '------------------------------------
        '   Linking
        '------------------------------------
        __assembly.initialize()         ' initializing __aseembly data structure
        'alarm manager local reference linkin
        __assemblyAlarmManager = __assembly.CentralAlarmObject

        messengerReference = __assembly.CentralMessenger
        pauseBlockReference = __assembly.PauseBlock
        '------------------------
        '   Prepare mainUserPanel
        '------------------------
        Me.UserControlMainPanel1.IOXReference = __assembly
        TabPageEnginner.Controls.Add(__assembly.raisingGUI())       'the baisc gui - engineer mode

        'link setting object to userControl
        Me.UserControlSetting1.SettingReference = __assembly.genericSettings
        Me.UserControlSetting1.IOXLoaderAssemblyReference = __assembly

        '----------------------------------------------------
        '   After all link established  , then fire the timer
        '----------------------------------------------------
        '--------------------------------
        '   Preset alarm pop
        '--------------------------------
        With __alarmPop
            .buzzerFlagReference = Me.__assembly.controlFlags
        End With
        With __dialog
            .Controls.Add(__alarmPop)
            .AutoSize = True
            .ControlBox = False
            .Text = "Error Message"
        End With
        '--------------------------------
        '   Preset Tracking monitor
        '--------------------------------
        __assembly.start()


        TimerRefresh.Enabled = True
    End Sub

    Private Sub uiAliveRefresh(sender As Object, e As EventArgs) Handles TimerRefresh.Tick

        'Hsien , once hareware not existed , polling alarm manager and messenger only
        If (Not True) Then
            With __assembly
                .CentralAlarmObject.alarmHandling()
                .CentralMessenger.messageHandling()
            End With
        End If

        ' ui refresh engine
        TextBoxTime.Text = Date.Now().ToString("G")
    End Sub

    Private Sub lockSettingHandler(ByVal sender As Object, ByVal e As EventArgs) Handles pauseBlockReference.InterceptedEvent
        Me.BeginInvoke(Sub() Me.UserControlSetting1.Enabled = True)
    End Sub
    Private Sub unlockSettingHandler(ByVal sender As Object, ByVal e As EventArgs) Handles pauseBlockReference.UninterceptedEvent
        Me.BeginInvoke(Sub() Me.UserControlSetting1.Enabled = False)
    End Sub

    Private Function loginRoutine() As DialogResult

        ' login stage
        Dim currentUser As formLogin.userData = Nothing
        Dim formLogin As formLogin = New formLogin()
        Dim result As DialogResult = Windows.Forms.DialogResult.OK

        While (currentUser Is Nothing)
            result = formLogin.ShowDialog()
            If (result = Windows.Forms.DialogResult.OK) Then
                currentUser = formLogin.currentUser
            Else
                result = Windows.Forms.DialogResult.Cancel
                Exit While
            End If
        End While

        If (result = Windows.Forms.DialogResult.Cancel) Then
            '--------------
            '   Cancel login
            '--------------
            Return Windows.Forms.DialogResult.Cancel
        End If




        ' remove all tab-page , then added them by access level
        MainTabControl.TabPages.Clear()

        If (currentUser.level And formLogin.accessLevelEnum.END_USER) Then
            With UserControlMainPanel1
            End With
            MainTabControl.TabPages.Add(Me.TabPageMainPanel)
            MainTabControl.TabPages.Add(Me.TabPageHistory)
        End If

        If (currentUser.level And formLogin.accessLevelEnum.SERVICE) Then
            MainTabControl.TabPages.Add(Me.TabPageSetting)
            MainTabControl.TabPages.Add(Me.TabPageMes)
            '-------------------------------------------------------------------------------------------------------
            'todo , determine the condition to lock setting page , 
            'i.e AddHandler ascSystem.loaderMainControl.PauseBlock.interceptedEvent, AddressOf Me.lockSettingHandler
            '-------------------------------------------------------------------------------------------------------
        End If

        If (currentUser.level And formLogin.accessLevelEnum.DEVELOPE) Then
            With UserControlMainPanel1
            End With
            MainTabControl.TabPages.Add(TabPageEnginner)
        End If
        ''------------------
        ''   Apply languege
        ''------------------
        utilitiesUI.applyResourceOnAllControls(Me.Controls, New System.ComponentModel.ComponentResourceManager(Me.GetType()))
        __sensorDetailDatabase.swapDataBase()
        TextBoxUser.Text = currentUser.Account
        __assembly.sendMessage(internalEnum.LOGIN, currentUser.Account)


        Return Windows.Forms.DialogResult.OK
    End Function

    Private Sub ClickRelogin(sender As Object, e As EventArgs)
        loginRoutine()
    End Sub


    '----------------------------------------------
    '   Alarm handling pop-up
    ''---------------------------------------------
    Dim isAlarmDialogPoped As Boolean = False
    Dim __alarmPop As userControlAlarmPop = New userControlAlarmPop
    Dim __dialog As Form = New Form
    Dim __result As IAsyncResult = Nothing


    Private Sub alarmPopup(ByVal sender As alarmManager, ByVal e As alarmEventArgs) Handles __assemblyAlarmManager.alarmWaitResponse

        If (Not isAlarmDialogPoped) Then
            isAlarmDialogPoped = True   'bit lock

            'Dim __control As userControlAlarmPop = New userControlAlarmPop With {.AlarmReference = sender,
            '                                                                       .buzzerFlagReference = Me.__assembly.controlFlags,
            '                                                                       .areaMapReference = New userControlSensorMap With {.__areaDictionary = __sensorAreaDatabase}}
            ''-------------------------------------------------------------------------------------------------------
            ''   If wafer jammed and possible to locate corresponding lane and cassete was on UD
            '', offer the possibility to eject cassette
            ''------------------------------------------------------------
            'If (GetType(alarmContentConveyor).IsInstanceOfType(sender.CurrentAlarm) AndAlso
            '    __assembly.laneCollection.Exists(Function(__lane As laneSubStackFlowSystem) __lane.IsSenderBelongToMe(sender.CurrentAlarm.Sender)) AndAlso
            '    __assembly.laneCollection.Find(Function(__lane As laneSubStackFlowSystem) __lane.IsSenderBelongToMe(sender.CurrentAlarm.Sender)).stackFlowSubSystem.commonFlags.viewFlag(flagsInLoaderUnloader.CasOn_UD_ConveyerReady_f)) Then

            '    Me.Invoke(Sub()
            '                  With __control.buttonCassetteCancel
            '                      .Enabled = True
            '                      .Visible = True
            '                  End With
            '              End Sub)
            '    __control.cassetteAction = AddressOf alarmCassetteEject 'link the eject action
            'End If

            'Me.BeginInvoke(Sub()
            '                   Dim __dialog As Form = New Form
            '                   With __dialog
            '                       .Controls.Add(__control)
            '                       .AutoSize = True
            '                       .ControlBox = False
            '                       .Text = "Alarm Message"
            '                       .ShowDialog()
            '                   End With
            '               End Sub)
            __alarmPop.AlarmReference = sender

            __result = Me.BeginInvoke(Sub()
                                          With __dialog
                                              .ShowDialog()
                                          End With
                                          Me.EndInvoke(__result)
                                      End Sub)
        End If
    End Sub
    Private Sub alarmDialogClosed() Handles __assemblyAlarmManager.alarmReleased
        isAlarmDialogPoped = False  'bit release
    End Sub
    Private Sub LogInToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TextBoxUser.Click
        loginRoutine()
    End Sub
End Class