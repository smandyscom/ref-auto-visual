Imports Automation
Imports AutoNumeric
Imports System.Linq
Imports MathNet.Numerics.LinearAlgebra
Imports FA.dmCalibrationSetting
Imports FA.distanceMeter

''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class dmCalibrationSetting
    Inherits settingBase

    ''' <summary>
    ''' Generate shift-search route
    ''' </summary>
    ''' <remarks></remarks>
    Class edgeSearchSetting
        Implements IRoute

        Property StartPoint As String
            Get
                Return __startPoint.PositionText
            End Get
            Set(value As String)
                __startPoint.PositionText = value
            End Set
        End Property
        ''' <summary>
        ''' In R-Frame
        ''' </summary>
        ''' <remarks></remarks>
        Dim __startPoint As PositionVector = New PositionVector(framesDefinition.R)
        Property SearchDirection As axisEntityEnum = axisEntityEnum.X
        Property ShiftDirection As axisEntityEnum = axisEntityEnum.Y

        Property SearchDepth As Double = 3
        Property ShiftPitch As Double = 0.1
        Property ShiftCount As Integer = 10

        Public ReadOnly Property MeasurePoints As List(Of PositionVector) Implements IRoute.MeasurePoints
            Get
                Dim output As List(Of PositionVector) = New List(Of PositionVector)
                Dim routeStart As PositionVector = __startPoint.Clone
                Dim routeEnd As PositionVector = __startPoint.Clone
                routeEnd.AxisValue(SearchDirection) += SearchDepth

                Dim counter As Integer = 0
                While counter <= ShiftCount
                    output.AddRange({routeStart.Clone,
                                     routeEnd.Clone})

                    routeStart.AxisValue(ShiftDirection) += ShiftPitch
                    routeEnd.AxisValue(ShiftDirection) += ShiftPitch
                    counter += 1
                End While

                Return output
            End Get
        End Property

        Friend pointCloud As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))

        ''' <summary>
        ''' Feedback value , in mm
        ''' </summary>
        ''' <remarks></remarks>
        Friend startLatchX As Double = 0
        Friend endLatchX As Double = 0
        Friend startLatchY As Double = 0
        Friend endLatchY As Double = 0

    End Class

    Property ImageProcesses As List(Of KeyValuePair(Of framesDefinition, imageProcessSettingBlock))
        Get
            Return __imageProcesses.ToList
        End Get
        Set(value As List(Of KeyValuePair(Of framesDefinition, imageProcessSettingBlock)))
            For Each item As KeyValuePair(Of framesDefinition, imageProcessSettingBlock) In value
                __imageProcesses(item.Key) = item.Value
            Next
        End Set
    End Property
    Property RouteProcesses As List(Of KeyValuePair(Of framesDefinition, edgeSearchSetting))
        Get
            Return __routeProcesses.ToList
        End Get
        Set(value As List(Of KeyValuePair(Of framesDefinition, edgeSearchSetting)))
            For Each item As KeyValuePair(Of framesDefinition, edgeSearchSetting) In value
                __routeProcesses(item.Key) = item.Value
            Next
        End Set
    End Property

    Friend __imageProcesses As Dictionary(Of framesDefinition, imageProcessSettingBlock) = New Dictionary(Of framesDefinition, imageProcessSettingBlock)
    Friend __routeProcesses As Dictionary(Of framesDefinition, edgeSearchSetting) = New Dictionary(Of framesDefinition, edgeSearchSetting)


    Public Overrides Property Filename As String
        Get
            Return String.Format("{0}{1}.xml",
                                 cameraCalibrationSettingBase.settingPath,
                                 Me.ToString)
        End Get
        Set(value As String)
            'nothing to do
        End Set
    End Property

End Class

''' <summary>
''' Procedures
''' 1. Using C1,C2,C3 Fetch edge line (Double Point)
''' 2. Using DM Cut-Measuring Edges , get N data points (3D)
''' 3. Transform these points , referenced on C1-Frame (X,Y values)
''' 4. Calculate Point-Line Distance , along Y-Axis of C1 , get N differential distance , make a standard variation as reference
''' 5. Average these value , get the Z-offset
''' </summary>
''' <remarks></remarks>
Public Class dmCalibration
    Inherits systemControlPrototype


    Property IsProcedureStarted As Boolean
        Get
            Return __isProcedureStarted
        End Get
        Set(value As Boolean)
            'trigger start only
            If Not __isProcedureStarted And
                value Then
                __isProcedureStarted = True
            End If
        End Set
    End Property
    Dim __isProcedureStarted As Boolean = False

    Dim setting As dmCalibrationSetting = New dmCalibrationSetting

    Dim currentImageProcess As Dictionary(Of framesDefinition, imageProcessSettingBlock).Enumerator = Nothing
    Dim currentEdgeProcess As Dictionary(Of framesDefinition, edgeSearchSetting).Enumerator = Nothing

    Dim currentRoutePoint As List(Of PositionVector).Enumerator = Nothing

    ''' <summary>
    ''' Cached the image results
    ''' </summary>
    ''' <remarks></remarks>
    Dim imageResults As Dictionary(Of framesDefinition, List(Of Vector(Of Double))) =
        New Dictionary(Of framesDefinition, List(Of Vector(Of Double)))



    Enum subStatesEnum As Integer
        READY = 10
        EDGE_IMAGE = 100

        EDGE_START = 200
        ROUTE_START = 300

        DATA_PROCESS = 400
        PROCESS_DONE = 500
    End Enum


    ''' <summary>
    ''' Raise in the beginning of procedure
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event ImageProcedureLoaded(ByVal sender As Object, ByVal e As EventArgs)
    ''' <summary>
    ''' Used to trigger external procedure
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event CameraTriggered(ByVal sender As Object, ByVal e As EventArgs)
    Dim WithEvents triggerHandle As imageProcessTriggerEventArgs = Nothing
    Dim doneHandle As imageProcessEndEventArgs = Nothing


    ''' <summary>
    ''' Do Edge image processing
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Function stateExecute() As Boolean
        Select Case systemSubState
            Case 0
                If __isProcedureStarted Then
                    systemSubState = subStatesEnum.READY
                End If
            Case subStatesEnum.READY
                'move carriage to chuck center
                With frames.Instance
                    .CurrentMovingItem = framesDefinition.C4
                    .CurrentRItem = itemsDefinition.CHOKE_CENTER
                End With
                systemSubState += 10
            Case subStatesEnum.READY + 10
                If Assembly.Instance.IsAllAxesSettled Then
                    currentImageProcess = setting.__imageProcesses.GetEnumerator
                    systemSubState = subStatesEnum.EDGE_IMAGE
                Else
                    '-------------------
                    '   Settling
                    '-------------------    
                End If
                '------------------------------
                '   Edge Image
                '------------------------------
            Case subStatesEnum.EDGE_IMAGE + 10
                If currentImageProcess.MoveNext Then
                    triggerHandle = New imageProcessTriggerEventArgs(currentImageProcess.Current.Value.ToolBlock)
                    RaiseEvent CameraTriggered(Me, triggerHandle)
                    systemSubState += 10
                Else
                    '--------------------
                    '   All Process Done
                    '--------------------
                    systemSubState = subStatesEnum.EDGE_START
                End If
            Case subStatesEnum.EDGE_IMAGE + 20
                If __isCameraTriggerd Then
                    Me.imageResults(currentImageProcess.Current.Key) = doneHandle.OutputPositionsUnit
                    systemSubState = subStatesEnum.EDGE_IMAGE
                Else
                    '---------------------------
                    '   Image Processing
                    '---------------------------
                End If
                '-----------------------------
                '   Edge Searching Start
                '-----------------------------
            Case subStatesEnum.EDGE_START
                If currentEdgeProcess.MoveNext Then
                    currentRoutePoint = currentEdgeProcess.Current.Value.MeasurePoints.GetEnumerator
                    systemSubState = subStatesEnum.ROUTE_START
                Else
                    '---------------------
                    '   All Route Executed
                    '---------------------
                    systemSubState = subStatesEnum.DATA_PROCESS
                End If
                '--------------------------------
                '   Route Execution
                '--------------------------------
            Case subStatesEnum.ROUTE_START
                If currentRoutePoint.MoveNext Then
                    'move to start
                    With frames.Instance
                        .solveAbsAxAy(currentRoutePoint.Current, framesDefinition.LREAL)
                    End With
                    systemSubState += 10
                Else
                    '---------------------------
                    '   No Route able to execute, check another edge
                    '---------------------------
                    systemSubState = subStatesEnum.EDGE_START
                End If
            Case subStatesEnum.ROUTE_START + 10
                If Assembly.Instance.IsAllAxesSettled Then
                    systemSubState += 10
                Else
                    '---------------------
                    '   Settling
                    '---------------------
                End If
            Case subStatesEnum.ROUTE_START + 20
                If Assembly.Instance.__distanceMeter.drive(dmCommands.RT, {dmOnOff.__ON}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------
                    '   Communication
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 30
                If Assembly.Instance.__distanceMeter.drive(dmCommands.RT, {dmOnOff.__OFF}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------
                    '   Communication
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 40
                If Assembly.Instance.__distanceMeter.drive(dmCommands.TM, {dmOnOff.__ON}) =
                     IDrivable.endStatus.EXECUTION_END Then

                    currentRoutePoint.MoveNext() ' 
                    frames.Instance.solveAbsAxAy(currentRoutePoint.Current, framesDefinition.LREAL)
                    systemSubState += 10
                Else
                    '-------------------
                    '   Communication
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 50
                If Assembly.Instance.IsAllAxesSettled Then
                    systemSubState += 10
                Else
                    '-------------------
                    '   Settling
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 60
                If Assembly.Instance.__distanceMeter.drive(dmCommands.TM, {dmOnOff.__OFF}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------
                    '   Communication
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 70
                If Assembly.Instance.__distanceMeter.drive(dmCommands.MS, {dmTaskEnum.TASK_EDGE_AUTO_PEAK}) =
                     IDrivable.endStatus.EXECUTION_END Then
                    systemSubState += 10
                Else
                    '-------------------
                    '   Communication
                    '-------------------
                End If
            Case subStatesEnum.ROUTE_START + 80
                With Assembly.Instance

                    If .xMotorControl.IsLatched And
                        .yMotorControl.IsLatched Then

                        'the measure point in LREAL-Frame
                        Dim measuredPointInLreal As PositionVector = New PositionVector(framesDefinition.LREAL) With {.Z =
                            Assembly.Instance.__distanceMeter.MeasureValue}
                        Dim transformationC4ToR As htmEdgeElementary = frames.Instance.ForwardKinematic(.xMotorControl.LatchedValue,
                                                                                                        .yMotorControl.LatchedValue,
                                                                                                        0)
                        'calculating measure point in R
                        Dim measuredPointInR As PositionVector =
                            transformationC4ToR *
                            frames.Instance.Elementray(framesDefinition.LREAL, framesDefinition.C4) *
                            measuredPointInLreal

                        currentEdgeProcess.Current.Value.pointCloud.Add(measuredPointInR.RawValue.SubVector(0, 3))
                    Else
                        '--------------------
                        '   Not scanned the edge point
                        '--------------------
                    End If

                    systemSubState = subStatesEnum.ROUTE_START

                End With
                '-------------------------------------------
                '   All Data Fetched
                '-------------------------------------------
            Case subStatesEnum.DATA_PROCESS
                'calculated out peak position by distance meter
                Dim peakByDistanceMeter = AutoNumeric.fittingMethods.line3DIntersection(setting.__routeProcesses(framesDefinition.C1).pointCloud,
                                                                                        setting.__routeProcesses(framesDefinition.C2).pointCloud)
                'calculated out peak position by cameras (R2)
                Dim peakByCameras As Vector(Of Double) = CreateVector.Dense(Of Double)({0,
                                                                             0,
                                                                             0,
                                                                             1})

                For Each collection As List(Of Vector(Of Double)) In imageResults.Values
                    For Each item As Vector(Of Double) In collection
                        peakByCameras += item
                    Next
                Next
                peakByCameras = peakByCameras / 2

                'calculate origin offset in L-Real frame
                Dim originError As PositionVector = frames.Instance.Transformation(framesDefinition.R, framesDefinition.LPC_REAL) *
                    New PositionVector(peakByDistanceMeter - peakByCameras, framesDefinition.R)
                frames.Instance.Elementray(framesDefinition.LPC_REAL, framesDefinition.L).Origin -= originError

                systemSubState = subStatesEnum.PROCESS_DONE

            Case subStatesEnum.PROCESS_DONE
                __isProcedureStarted = False
                systemSubState = 0
        End Select

        Return 0

    End Function


    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Protected Sub imageProcessStarted(sender As Object, e As imageProcessTriggerEventArgs) Handles Me.CameraTriggered
        __isCameraTriggerd = True
        e.ToolBlock.Run()
    End Sub
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Protected Overridable Sub imageProcessDone(sender As Object, e As imageProcessEndEventArgs) Handles triggerHandle.ImageProcessDone
        Me.doneHandle = e
        __isCameraTriggerd = False ' flag reset
    End Sub
    Protected __isCameraTriggerd As Boolean = False


    Protected Sub New()
        Me.setting.Load(Nothing)
    End Sub

#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As dmCalibration
        Get
            If __instance Is Nothing Then
                __instance = New dmCalibration
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As dmCalibration = Nothing
#End Region

End Class
