Imports Automation
Imports AutoNumeric
Imports AutoNumeric.utilities


Public Class dispCalibrationSetting
    Inherits imageProcessSettingBlock

    Friend measureFrame As framesDefinition = framesDefinition.C1REAL
    Friend readyPoint As itemsDefinition = itemsDefinition.C1_DISP_READY
    Friend processPoint As itemsDefinition = itemsDefinition.C1_ORIGIN
    Protected dimensionSelection As Integer = selectionEnums.Y Or selectionEnums.Z

    Friend measuredPointInDispReal As PositionVector = New PositionVector(framesDefinition.DISP_HEAD_REAL)

    Sub New(__feature As itemsDefinition)
        Select Case __feature
            Case itemsDefinition.C1_ORIGIN
                measureFrame = framesDefinition.C1REAL
                readyPoint = itemsDefinition.C1_DISP_READY
                dimensionSelection = selectionEnums.Y Or selectionEnums.Z
            Case itemsDefinition.C2_ORIGIN
                measureFrame = framesDefinition.C2REAL
                readyPoint = itemsDefinition.C2_DISP_READY
                dimensionSelection = selectionEnums.X Or selectionEnums.Z
        End Select
        processPoint = __feature
    End Sub
    Sub New()

    End Sub

End Class

Public Class eproxyCalibration
    Inherits systemControlPrototype
    Implements IProcedure
    Implements IDisposable


    Public Property Arguments As Object Implements IProcedure.Arguments

    Public Property IsProcedureStarted As New flagController(Of interlockedFlag) Implements IProcedure.IsProcedureStarted

    Public Property Result As IProcedure.procedureResultEnums Implements IProcedure.Result

    Friend featureMeasureSettings As Dictionary(Of itemsDefinition, dispCalibrationSetting) =New Dictionary(Of itemsDefinition, dispCalibrationSetting)
    Protected currentFeatureProcedure As Dictionary(Of itemsDefinition, dispCalibrationSetting).Enumerator = Nothing

    ''' <summary>
    ''' 0: move to c1 origin , take measuring
    ''' 1: move to c2 origin , take measuring
    ''' 2: cal
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function stateExecute() As Integer

        Select Case systemSubState
            Case 0
                If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                Else
                    '--------------------------------
                    '
                    '--------------------------------
                End If
            Case 5
                currentFeatureProcedure = featureMeasureSettings.GetEnumerator
            Case 10
                If currentFeatureProcedure.MoveNext Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = currentFeatureProcedure.Current.Value.readyPoint
                    End With
                Else
                    '---------------
                    '   All procedure proceded
                    '---------------

                End If
            Case 20
                If Assembly.Instance.IsAllAxesSettled Then
                    With frames.Instance
                        .CurrentMovingItem = framesDefinition.DISP_HEAD_REAL
                        .CurrentRItem = currentFeatureProcedure.Current.Value.processPoint
                    End With
                End If
            Case 30
                If Assembly.Instance.IsAllAxesSettled Then
                    currentFeatureProcedure.Current.Value.onCameraTriggerd()
                End If
            Case 40
                With currentFeatureProcedure.Current.Value
                    If .IsImageProcessDone Then
                        .measuredPointInDispReal =
                            frames.Instance.Transformation(.measureFrame, framesDefinition.DISP_HEAD_REAL) * New PositionVector(.Coordinates.First, .measureFrame)
                    Else
                        '------------------------
                        '   Not Done Yet
                        '------------------------
                    End If
                End With
            Case 100


            Case 500
                IsProcedureStarted.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                systemSubState = 0
        End Select


        Return 0
    End Function


#Region "IDisposable Support"
    Private disposedValue As Boolean ' 偵測多餘的呼叫

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO:  處置 Managed 狀態 (Managed 物件)。
            End If

            ' TODO:  釋放 Unmanaged 資源 (Unmanaged 物件) 並覆寫下面的 Finalize()。
            ' TODO:  將大型欄位設定為 null。
        End If
        Me.disposedValue = True
    End Sub

    ' TODO:  只有當上面的 Dispose(ByVal disposing As Boolean) 有可釋放 Unmanaged 資源的程式碼時，才覆寫 Finalize()。
    'Protected Overrides Sub Finalize()
    '    ' 請勿變更此程式碼。在上面的 Dispose(ByVal disposing As Boolean) 中輸入清除程式碼。
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' 由 Visual Basic 新增此程式碼以正確實作可處置的模式。
    Public Sub Dispose() Implements IDisposable.Dispose
        ' 請勿變更此程式碼。在以上的 Dispose 置入清除程式碼 (視為布林值處置)。
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
