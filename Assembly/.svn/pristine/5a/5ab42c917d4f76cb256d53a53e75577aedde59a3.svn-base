Imports AutoNumeric
''' <summary>
''' The camera calibration usage data structrue
''' For C1,C2,C3
''' </summary>
''' <remarks></remarks>
Public Class c1c2c3

    'Ax go to netural position
    'c1,c2 to chuker , c3 to c3 origin
    'select referenced in Cn , P_c (nominal)
    'measure points generated by following parameters : X-pitch,X-times,Y-pitch,Y-times
    'calculate T_S_S0(fixed pose) , P_C =  T_S_C * P_S , translation = P_C[3:1] - R_S_C*P_S[3:1]
    'move smarpod
    'trigger camera to measure
    'output real position , and nomial position

    ''' <summary>
    ''' Prepared by some external procedure , i.e setting
    ''' the nominal point on measure frame
    ''' </summary>
    ''' <remarks></remarks>
    Dim nominalPoints As List(Of PositionVector) = New List(Of PositionVector)
    'Dim __iterator As List(Of PositionVector).Enumerator = Nothing

    Dim currentTarget As framesDefinition = framesDefinition.C1REAL

    Function MyFunc(ByRef state As Integer, 
                    dataIndex As Integer) As Boolean

        Select Case state
            Case 1
                'the preparation sequences
                frames.Instance.CurrentMovingItem = framesDefinition.S0
                Select Case currentTarget
                    Case framesDefinition.C1REAL,
                         framesDefinition.C2REAL
                        frames.Instance.CurrentRItem = itemsDefinition.CHOKE_CENTER
                    Case framesDefinition.C3REAL
                        frames.Instance.CurrentRItem = itemsDefinition.C3_ORIGIN
                End Select
            Case 10
                If Assembly.Instance.IsXYZSettled Then

                    '__iterator = nominalPoints.GetEnumerator
                    '__iterator.MoveNext()

                    'move the smart pod
                    frames.Instance.solveSFixedPose(frames.Instance.objectsDictionary(itemsDefinition.BALL_CENTER),
                                                    __iterator.Current)
                Else
                    '--------------
                    '   Moving
                    '--------------
                End If
                'check motion done
            Case 20
                If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) = Automation.IDrivable.endStatus.EXECUTION_END Then
                    'trigger the camera

                End If
                Dim currentMeasurePoint = nominalPoints(dataIndex)
                Dim __transformation = frames.Instance.Transformation(framesDefinition.S, currentTarget)
            Case 30
        End Select

        Return False
    End Function


End Class
