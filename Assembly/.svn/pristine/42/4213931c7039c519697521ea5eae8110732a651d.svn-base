Imports Automation.Components.Services
Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components
Imports System.ComponentModel
Imports Automation.mainIOHardware

Public Class TestingAssembly
    Inherits assemblyArch
    'Inherits systemControlPrototype
    Implements IFinishableStation
    Public Property _FinishableFlag As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags
    Public Property _UpstreamStation As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations
    'Inherits assemblyArch  'unit test use
    Public scara As SCARA.compEpsonScara
    Dim Ignite_Step As Integer = 0
    Dim StationCollection As List(Of IFinishableStation) = New List(Of IFinishableStation) From {}

    Public Function stateIgnite() As Integer
        Select Case Ignite_Step
            Case 0 'Assembly檢查初始程序是否被致能
                If _FinishableFlag.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE) = True Then
                    '使_stackLoad初始程序致能使升降平台上卡匣可以退出
                    Ignite_Step = 10
                End If
            Case 10 '等待_stackLoad初始程序完成
                Ignite_Step = 20

            Case 20 '使其它站的初始程序致能
                StationCollection.ForEach(Function(Station As IFinishableStation) (Station.FinishableFlags.setFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)))
                Ignite_Step = 30
            Case 30 '等待其它站初始程序完成
                If StationCollection.TrueForAll(Function(Station As IFinishableStation) (Not Station.FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE))) = True Then
                    _FinishableFlag.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False) 'Assembly初始程序完成
                    systemMainState = systemStatesEnum.EXECUTE
                    Ignite_Step = 0
                End If
        End Select
        Return 0
    End Function

    Public Function stateExecute() As Integer
        Return 0
    End Function

    Sub New()
        '將自定義起始化函式加入 通用起始化引動清單
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initLinkPause),
                                           New Func(Of Integer)(AddressOf initEnableAllDrives),
                                           New Func(Of Integer)(AddressOf initMappingAndSetup),
                                               New Func(Of Integer)(AddressOf initSubsystemInitialize))
    End Sub

    Function initMappingAndSetup() As Integer

        '共用旗標連結
        relatedFlags.AddRange(_FinishableFlag.FlagElementsArray)
        initEnableAllDrives()



        Return 0
    End Function


    'Side 1
    '      With _cassetteLoad

    '        With CType(.IN_ConveyerMotor, motorControlDrivable)
    '            .MotorIndex = motorAddress.MSD1A      '馬達軸對應
    '            .PositionDictionary.Add(LoadConveyerUsedPositions.MOTOR_POSITION_1, CShort(motorPoints.MSD1A_MOVE1))     '在此馬達元件連結點位關係
    '        End With

    ''        .PB_LoadConveyerMove.InputBit = inputAddress.BPD_InM1    '載入按鈕設定輸入點
    '        .LP_LoadConveyerMove = outputAddress.LPD_InM1 '載入按鈕燈設定輸入點

    ''卡匣形式檢查感測器
    '        .IN_CasStyleCheckSen(CassetteLoad.CheckCasStyleSenIndex.SEN_1) = New SensorInfo With {.sw = IS_OFF}
    '        .IN_CasStyleCheckSen(CassetteLoad.CheckCasStyleSenIndex.SEN_2) = New SensorInfo With {.sw = IS_OFF}
    '        .IN_CasStyleCheckSen(CassetteLoad.CheckCasStyleSenIndex.SEN_3) = New SensorInfo With {.sw = IS_OFF}
    '        .IN_CasStyleCheckSen(CassetteLoad.CheckCasStyleSenIndex.SEN_4) = New SensorInfo With {.sw = IS_OFF}


    ''卡匣在輸送帶上檢查感測器
    ''.IN_ConveyerPosSen1.InputBit = inputAddress.SpD1A   '靠近操作
    '        .IN_ConveyerPosSen2.InputBit = inputAddress.SpD1A
    '        .IN_ConveyerPosSen3.InputBit = inputAddress.SpD1B '靠近小升降台

    ''.IN_ConveyerOverrideSen.InputBit = inputAddress.SpD1D     '設定輸入點

    ''單動電磁閥初始化設定
    '        With .IN_Stopper1
    '            .OffEndSensor = inputAddress.D1a0
    '            .OnEndSensor = inputAddress.D1a1
    '            .ActuatorBit = outputAddress.CyD1A
    '        End With

    '        With .IN_Stopper2
    '            .OffEndSensor = inputAddress.D1b0
    '            .OnEndSensor = inputAddress.D1b1
    '            .ActuatorBit = outputAddress.CyD1B
    '        End With

    '    End With

    '    With _cassetteUnload

    '        With CType(.OUT_ConveyerMotor, motorControlDrivable)
    '            .MotorIndex = motorAddress.MSD1B     '馬達軸對應
    '            .PositionDictionary.Add(UnloadConveyerUsedPositions.MOTOR_POSITION_1, CShort(motorPoints.MSD1B_MOVE1))     '在此馬達元件連結點位關係
    '        End With

    ''感測器初始化設定
    '        .OUT_ConveyerPosSen1.InputBit = inputAddress.SpD1J
    '        .OUT_ConveyerPosSen1.InputBit = inputAddress.SpD1K
    '    End With

    '    With _stackWaferLift

    '        With CType(.UD_ConveyerMotor, motorControlDrivable)
    '            .MotorIndex = motorAddress.MSD1C    '馬達軸對應
    '            .PositionDictionary.Add(LiftConveyerUsedPositions.MOTOR_MOVE_IN, CShort(motorPoints.MSD1C_MOVE_IN))     '在此馬達元件連結點位關係
    '            .PositionDictionary.Add(LiftConveyerUsedPositions.MOTOR_MOVE_OUT, CShort(motorPoints.MSD1C_MOVE_OUT))
    '        End With

    '        With .UD_Motor
    '            .MotorIndex = motorAddress.MSD1E      '馬達軸對應
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_HOME, CShort(motorPoints.MSD1E_Home))     '在此馬達元件連結點位關係
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_MANZ_APPROCH, CShort(motorPoints.MSD1E_Approch))
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_MANZ_SPACE, CShort(motorPoints.MSD1E_Space))
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_MANZ_START, CShort(motorPoints.MSD1E_Start))
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_MANZ_SUB_SPACE, CShort(motorPoints.MSD1E_Sub_Space))
    '            .PositionDictionary.Add(LiftMotorUsedPositions.MOTOR_MANZ_WAIT, CShort(motorPoints.MSD1E_Wait))
    '        End With

    '        With .UD_Shell_Motor
    '            .MotorIndex = motorAddress.MSD1D
    '            .PositionDictionary.Add(LiftShellMotorUsedPositions.MOTOR_HOME, CShort(motorPoints.MSD1D_Home))
    '            .PositionDictionary.Add(LiftShellMotorUsedPositions.MOTOR_MANZ_SHELL_LOAD, CShort(motorPoints.MSD1D_LOAD))
    '            .PositionDictionary.Add(LiftShellMotorUsedPositions.MOTOR_MANZ_SHELL_UNLOAD, CShort(motorPoints.MSD1D_UNLOAD))
    '            .PositionDictionary.Add(LiftShellMotorUsedPositions.MOTOR_MANZ_SHELL_START, CShort(motorPoints.MSD1D_Start))

    '        End With

    '        .UD_ConveyerSlowDownSen.InputBit = inputAddress.SpD1D
    '        .UD_ConveyerReachSen.InputBit = inputAddress.SpD1E

    '        .WaferExistSen.InputBit = inputAddress.SpD1G

    '        .ConBlowSol = outputAddress.CyD1C  '連續吹氣電磁閥
    '        .WaferUpReachPosSen.InputBit = inputAddress.SpD1I  '堆疊冶具內硅片上升到取片位置
    '    End With


    '    With _stackWaferPick

    '        With .Rotatry_Motor
    '            .MotorIndex = motorAddress.MSE1A
    '            .PositionDictionary.Add(RotatryMotorUsedPositions.MOTOR_HOME, CShort(motorPoints.MSE1A_Home))
    '            .PositionDictionary.Add(RotatryMotorUsedPositions.MOTOR_POSITION_A, CShort(motorPoints.MSE1A_Rotation1))
    '            .PositionDictionary.Add(RotatryMotorUsedPositions.MOTOR_POSITION_B, CShort(motorPoints.MSE1A_Rotation2))
    '        End With


    '        .WaferErrorSen(StackWaferPick.CheckWaferErrorSen.SEN_1) = New SensorInfo With {.sw = IS_ON,
    '                                                                             .status = IS_OFF,
    '                                                                             .sensor = New sensorControl With {.InputBit = inputAddress.SpE1B}}
    '        .WaferErrorSen(StackWaferPick.CheckWaferErrorSen.SEN_2) = New SensorInfo With {.sw = IS_ON,
    '                                                                             .status = IS_OFF,
    '                                                                             .sensor = New sensorControl With {.InputBit = inputAddress.SpE1C}}
    '        .WaferErrorSen(StackWaferPick.CheckWaferErrorSen.SEN_3) = New SensorInfo With {.sw = IS_ON,
    '                                                                             .status = IS_OFF,
    '                                                                             .sensor = New sensorControl With {.InputBit = inputAddress.SpE1D}}
    '        .WaferErrorSen(StackWaferPick.CheckWaferErrorSen.SEN_4) = New SensorInfo With {.sw = IS_ON,
    '                                                                             .status = IS_OFF,
    '                                                                             .sensor = New sensorControl With {.InputBit = inputAddress.SpE1E}}
    '        .WaferErrorSen(StackWaferPick.CheckWaferErrorSen.SEN_5) = New SensorInfo With {.sw = IS_ON,
    '                                                                             .status = IS_OFF,
    '                                                                             .sensor = New sensorControl With {.InputBit = inputAddress.SpE1F}} '檢查硅片有無在不正確位置上
    '        .WaferExistSen.InputBit = inputAddress.SpD1G '堆疊冶具內是否存在硅片感測器


    '        With .UpDownCylinder '取硅片上下氣缸
    '            .OffEndSensor = inputAddress.E1a0
    '            .OnEndSensor = inputAddress.E1a1
    '            .ActuatorBit = outputAddress.CyE1A
    '        End With


    '        .VacGenerate(SideStatus.is_A) = outputAddress.CyE1B  '真空產生電磁閥
    '        .VacSeneor(SideStatus.is_A) = New sensorControl
    '        .VacSeneor(SideStatus.is_A).InputBit = inputAddress.SpE1A   '真空感測器

    '        .VacGenerate(SideStatus.is_B) = outputAddress.CyE1C  '真空產生電磁閥
    '        .VacSeneor(SideStatus.is_B) = New sensorControl
    '        .VacSeneor(SideStatus.is_B).InputBit = inputAddress.SpE1G   '真空感測器

    '        .IntervalBlowSol = outputAddress.CyD1D  '間斷吹氣電磁閥

    '    End With


    '    With _stackWaferPlace
    '        .VacSeneor = _stackWaferPick.VacSeneor
    '        .VacGenerate = _stackWaferPick.VacGenerate
    '        .VacDestroy(SideStatus.is_A) = outputAddress.CyE1D
    '        .VacDestroy(SideStatus.is_B) = outputAddress.CyE1E
    '    End With

    '    With _cassetteButton

    ''感測器初始化設定
    '        .PB_Unload.InputBit = inputAddress.BPD_Out1   '設定輸入點
    '        .LP_Unload = outputAddress.LPD_Out1

    '        .PB_UnloadConveyerMove.InputBit = inputAddress.BPD_OutM1  '設定輸入點
    '        .LP_UnloadConveyerMove = outputAddress.LPD_OutM1

    '        .PB_Load.InputBit = inputAddress.BPD_In1  '設定輸入點
    '        .LP_Load = outputAddress.LPD_In1

    '        .PB_LoadConveyerMove.InputBit = inputAddress.BPD_InM1  '設定輸入點
    '        .LP_LoadConveyerMove = outputAddress.LPD_InM1

    '        .IN_ConveyerPosSen2.InputBit = inputAddress.SpD1B


    '    End With


    '    With _cassetteTransport
    ''感測器初始化設定
    '        .IN_ConveyerPosSen3.InputBit = inputAddress.SpD1C
    '        .CyFixCas(CassetteTransport.CyFixCasIndex.CY_1).sw = IS_OFF
    '        .CyFixCas(CassetteTransport.CyFixCasIndex.CY_2).sw = IS_OFF '(genericSettingReference.SystemType = systemTypeEnum.VERSION_ASA_04_073)
    '        .blnCyExtendBackSenCheck = False
    '    End With


    ''感測器初始化設定
    '    With _cassetteLoad
    '        .loadFlags.writeFlag(flagsInLoaderUnloader.CyBackReady_f, True) '設定目前舌頭為縮回
    '    End With

    ''=======================
    ''     CassetteLift
    ''=======================
    ''感測器初始化設定
    '    With _stackWaferLift
    '        .SetCasStyle = CassetteStyle.MANZ   '設定卡匣的形式
    '    End With

    ''=======================
    ''   CassetteTransport
    ''=======================
    ''共用馬達連結
    '    _cassetteTransport.IN_ConveyerMotor = _cassetteLoad.IN_ConveyerMotor
    '    _cassetteTransport.OUT_ConveyerMotor = _cassetteUnload.OUT_ConveyerMotor
    '    _cassetteTransport.UD_ConveyerMotor = _stackWaferLift.UD_ConveyerMotor
    '    _cassetteTransport.UD_Motor = _stackWaferLift.UD_Motor
    '    _cassetteTransport.UD_Shell_Motor = _stackWaferLift.UD_Shell_Motor
    ''共用氣壓缸連結
    '    _cassetteTransport.IN_Stopper1 = _cassetteLoad.IN_Stopper1
    '    _cassetteTransport.IN_Stopper2 = _cassetteLoad.IN_Stopper2
    ''感測器初始化設定
    ''_cassetteTransport.IN_ConveyerOverrideSen = _cassetteLoad.IN_ConveyerOverrideSen     '設定輸入點
    ''_cassetteTransport.OUT_ConveyerOverrideSen = _cassetteUnload.OUT_ConveyerOverrideSen    '設定輸入點
    '    _cassetteTransport.OUT_ConveyerPosSen1 = _cassetteUnload.OUT_ConveyerPosSen1
    '    _cassetteTransport.OUT_ConveyerPosSen2 = _cassetteUnload.OUT_ConveyerPosSen2

    '    _cassetteTransport.UD_ConveyerSlowDownSen = _stackWaferLift.UD_ConveyerSlowDownSen
    '    _cassetteTransport.UD_ConveyerReachSen = _stackWaferLift.UD_ConveyerReachSen

    '    _cassetteTransport.CyExtendForthSen = New sensorControl With {.InputBit = inputAddress.DUMMY}   '設定輸入點(舌頭伸出感測器)
    '    _cassetteTransport.CyExtendBackSen = New sensorControl With {.InputBit = inputAddress.DUMMY}   '設定輸入點(舌頭縮回感測器)

    ''_cassetteTransport.CyFixCas(CassetteTransport.CyFixCasIndex.CY_1) = New CyFixCasInfo With {.sw = IS_ON,
    ''                                                                    .cy = cy1}
    ''_cassetteTransport.CyFixCas(CassetteTransport.CyFixCasIndex.CY_2) = New CyFixCasInfo With {.sw = IS_ON,
    ''.cy = cy2}
    ''卡匣形式選擇(ACI or JR)
    '    _cassetteTransport.SetCasStyle = CassetteStyle.MANZ

    ''=======================
    ''    CassetteButton
    ''=======================
    '    With _cassetteButton

    ''共用馬達連結
    '        .IN_ConveyerMotor = _cassetteLoad.IN_ConveyerMotor
    '        .OUT_ConveyerMotor = _cassetteUnload.OUT_ConveyerMotor
    '    End With


    '    _cassetteLoad.initialize()
    '    _cassetteUnload.initialize()
    '    _cassetteTransport.initialize()
    '    _stackWaferLift.initialize()
    '    _stackWaferPick.initialize()
    '    _stackWaferPlace.initialize()
    '    _cassetteButton.initialize()

    ''本站主狀態函式設定
    '    systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite       '鍊結主狀態函式
    '    systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute     '鍊結主狀態函式
    '    systemMainState = systemStatesEnum.IGNITE   '設定初始主狀態

    ''cassette lifter upstream link , hsien , 2015.04.11
    '    _stackWaferLift._UpstreamStation = New List(Of IFinishableStation) From {_cassetteTransport}



End Class
