Imports Automation
Imports Automation.Components.Services
Public Class userControlMainPanel
    Private confirmForm As formConfirm

    Property IOXReference As Assembly
        Get
            Return __assemblyReference
        End Get
        Set(value As Assembly)
            If (value IsNot Nothing) Then
                __assemblyReference = value
                BasicLoadMainPanel(Me, Nothing)  're-load
            End If
        End Set
    End Property

    Dim WithEvents __assemblyReference As Assembly
    Dim WithEvents pauseBlockReference As interceptObject
    Dim WithEvents messengerReference As messageHandler
    Property MaxLines As Integer = 8


    Private Sub BasicLoadMainPanel(sender As Object, e As EventArgs) Handles MyBase.Load

        If (__assemblyReference Is Nothing) Then
            Exit Sub
        End If

        'todo , implement project-depent codes here
        ButtonShutdown.Enabled = True
        enableInitializingButton(sender, e)

        messengerReference = __assemblyReference.CentralMessenger    'Hsien , 2015.05.14
        pauseBlockReference = __assemblyReference.PauseBlock


        'data monitor initialize
        'UserControlLaneTongueA.IsMirror = False
        'UserControlLaneMiddleA.IsMirror = False
        'UserControlLanePickZoneA.IsMirror = False
        'UserControlArm.IsMirror = True


        'message bus initialize
        With UserControlMessageMainPanel
            .messengerReference = __assemblyReference.CentralMessenger

            .IsValidToShow = userControlMessage.generateMessageFilters({AddressOf .isNonRedundantMessage,
                                                                        AddressOf Me.isAlarmOrStatusMessage})
            .MessageFormator = Function(__sender As messageHandler, __e As messagePackageEventArg) (String.Format(vbCrLf & "{0} {1}", __e.Message.TimeStamp, __e.Message.AdditionalInfo))
        End With

        TimerRefresh.Enabled = True
    End Sub
    Function isAlarmOrStatusMessage(sender As messageHandler, e As messagePackageEventArg) As Boolean
        Return e.Message.PrimaryKey.Equals(GetType(alarmGeneric)) Or e.Message.PrimaryKey.Equals(statusEnum.GENERIC_MESSAGE)
    End Function
    Sub pauseHandler() Handles pauseBlockReference.InterceptedEvent
        Me.Invoke(Sub()
                      ButtonPause.BackColor = Color.Yellow
                      'ButtonSetup.Enabled = True
                      'ButtonSetting.Enabled = True
                  End Sub)
    End Sub
    Sub unpauseHandler() Handles pauseBlockReference.UninterceptedEvent
        Me.Invoke(Sub()
                      ButtonPause.BackColor = DefaultBackColor
                      'ButtonSetup.Enabled = False
                      'ButtonSetting.Enabled = False
                  End Sub)
    End Sub


    Private Sub systemShutDownHandler(sender As Object, e As EventArgs) Handles __assemblyReference.SystemClosed
        Me.Invoke(Sub()

                      Try

                          confirmForm = New formConfirm()
                          confirmForm.DialogResult = DialogResult.Cancel
                          confirmForm.Message = String.Format("System Shudown , Reason : ({0:G})", e.ToString())
                          confirmForm.ButtonCancel.Enabled = False
                          If (confirmForm.ShowDialog() = DialogResult.OK) Then
                              My.Application.ApplicationContext.MainForm.Close()
                              End
                          End If

                      Catch ex As Exception

                          Throw New Exception("systemShutDownHandler(sender As Object, e As closeEvent)" + ex.Message, ex)

                      End Try

                  End Sub)
    End Sub

    Private flipStatus As Boolean = False
    Private Sub flashButton(sender As Object, e As EventArgs) Handles TimerFlash.Tick
        If (flipStatus) Then
            ButtonStart.BackColor = Color.LimeGreen
        Else
            ButtonStart.BackColor = SystemColors.Control 'Color.DimGray
        End If
        flipStatus = Not flipStatus
    End Sub
    '-------------------------------------
    '   Initializing button routine
    '-------------------------------------
    Public Sub enableInitializingButton(sender As Object, e As EventArgs)
        '--------
        '   Once start pressed to ingite
        '--------
        Me.Invoke(Sub()
                      ButtonStart.Enabled = True
                      TimerFlash.Enabled = True
                  End Sub)
    End Sub
    Sub disableInitialzingButton(sender As Object, e As EventArgs)
        '--------------------------------
        '   stop initializing button to act
        '--------------------------------
        ButtonStart.Enabled = False
        ButtonStart.BackColor = DefaultBackColor
        TimerFlash.Enabled = False
    End Sub


    '-------------------------------------------
    '   Operation Button Control
    '-------------------------------------------
    Private Sub systemIgnitedHandling(ByVal sender As Object, e As EventArgs) Handles __assemblyReference.SystemIgnited
        '------------------------------
        '   Enable control buttons
        '------------------------------
        Me.Invoke(Sub()
                      GroupBoxOperation.Enabled = True
                      'TextBoxTrayTotalCount.Enabled = False 'shouldnt change total count after ignited
                      ButtonPause.Enabled = True
                  End Sub)
    End Sub


    Private Sub BasicButtonClick(sender As Object, e As EventArgs) Handles ButtonShutdown.Click,
        ButtonPause.Click, ButtonStart.Click, ButtonCassette.Click, ButtonFinish.Click
        Select Case sender.Name
            '-------------
            '   System Part
            '-------------
            Case ButtonStart.Name
                ButtonStart.Enabled = False
                ButtonStart.BackColor = Color.LimeGreen
                TimerFlash.Enabled = False
                __assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.ABLE_IGNITE)
                __assemblyReference.operationSignals.setFlag(operationSignalsEnum.__START)
                '---------------------------------------------------------------------------------------
                'todo , setup ignite flag
                'i.e    'systemReference.unloaderMainControl.controlFlags.setFlag(unloaderSystemControl.controlFlagsEnum.ABLE_IGNITE)
                '---------------------------------------------------------------------------------------
            Case ButtonShutdown.Name
                confirmForm = New formConfirm()
                confirmForm.DialogResult = DialogResult.Cancel
                confirmForm.Message = "Do You Really Want To Shutdown System ?"
                If (confirmForm.ShowDialog() = DialogResult.OK) Then
                    __assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.IS_ABORT_SYSTEM)
                End If
            Case ButtonPause.Name
                __assemblyReference.controlFlags.setFlag(assemblyArch.controlFlagsEnum.PAUSE_PRESSED)
            Case ButtonCassette.Name

            Case ButtonCassette.Name

            Case ButtonFinish.Name
                Dim confirmForm As formConfirm = New formConfirm With {.DialogResult = DialogResult.Cancel,
                                    .Message = "Confirm to finish auto run?", .StartPosition = FormStartPosition.CenterScreen}
                If (confirmForm.ShowDialog = DialogResult.OK) Then
                    __assemblyReference.operationSignals.setFlag(operationSignalsEnum.__STOP)
                End If

        End Select
    End Sub

    Private Sub __assemblyReference_SystemStarted(sender As Object, e As EventArgs) Handles __assemblyReference.SystemStartPressed
        Me.Invoke(Sub()
                      ButtonStart.Enabled = False
                      TimerFlash.Enabled = False
                      ButtonStart.BackColor = Color.LimeGreen
                  End Sub)
    End Sub
End Class
