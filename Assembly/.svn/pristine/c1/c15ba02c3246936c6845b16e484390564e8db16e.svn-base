Imports Automation
Imports System.IO

Public Class FormCassetteHandlerTest

    Dim __testObject As LoaderStackAssembly = New LoaderStackAssembly

    Private Sub FormCassetteHandlerTest_Load(sender As Object, e As EventArgs) Handles MyBase.Load


        System.Diagnostics.Process.GetCurrentProcess.PriorityClass = ProcessPriorityClass.High  'set me as highest priority

        Dim di As DirectoryInfo = New DirectoryInfo(My.Application.Info.DirectoryPath + "\Data\")
        If (Not di.Exists) Then
            '--------------
            '   Once directory not existed , created one
            '--------------
            di.Create()
        End If
        'System.IO.File.WriteAllText(My.Application.Info.DirectoryPath + "\Data\" + "VersionInfo.rtf", rtb.Rtf)
      
        '---------------------------
        '   Test use
        '---------------------------
        With __testObject
            .CentralAlarmObject = New Automation.alarmManager
            .CentralMessenger = New Automation.messageHandler
            .PauseBlock = New Automation.interceptObject
        End With

        ''載出區D
        'For Each i As Integer In {motorAddress.MSD1B, motorAddress.MSD1A, motorAddress.MSD1D, motorAddress.MSD1E, motorAddress.MSE1A}
        '    AMaxM4_ServoOn(i, IsOn)
        'Next

        ''載入區G
        'For Each i As Integer In {motorAddress.MSD2B, motorAddress.MSD2A, motorAddress.MSD2D, motorAddress.MSD2E, motorAddress.MSE2A}
        '    AMaxM4_ServoOn(i, IsOn)
        'Next

        alarmContentSensor.InputsEnumType = GetType(inputAddress)
        alarmContentSensor.QueryInterface = Nothing
        mainIOHardware.Instance.Load(Nothing)   'load the configuration
        mainIOHardware.__initialize()   'initialize io hardware
        mainIOHardware.scanBit(GetType(inputAddress))   'make sure if all address valid
        mainIOHardware.scanBit(GetType(outputAddress))
        __testObject.initialize()

        Me.Panel1.Controls.Add(__testObject.raisingGUI())

        __testObject.IsEnabled = True
        __testObject.start()

    End Sub


    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim __dialog As formSetting = New formSetting
        __dialog.ShowDialog()

        '__testObject._stackLoad.loadFlags.writeFlag(flagsInLoaderUnloader.CasOn_UD_ConveyerReady_f, False)
        '__testObject._stackLoad.loadFlags.writeFlag(flagsInLoaderUnloader.CasUnloadEnable_f, True)
        '__testObject._stackLoad.loadFlags.writeFlag(flagsInLoaderUnloader.Start_f, True)

    End Sub
End Class