Imports AutoNumeric
Imports SmarPodAssembly
Imports SmarPodAssembly.smarPodControl.podCommands
Imports Automation

''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class sHtm
    Inherits eulerHtmTR
    'Implements IDrivable

    Public Event TransformationChanged(ByVal sender As Object, ByVal e As EventArgs)

    Public Overrides Property RotationMatrix As MathNet.Numerics.LinearAlgebra.Matrix(Of Double)
        Get
            Return MyBase.RotationMatrix
        End Get
        Set(value As MathNet.Numerics.LinearAlgebra.Matrix(Of Double))
            MyBase.RotationMatrix = value
            'trigger the smarpod moing
            Me.ControlVector = Me.ControlVector
        End Set
    End Property
    Public Overrides Property FrameVector(axis As frameVectorEnum) As MathNet.Numerics.LinearAlgebra.Vector(Of Double)
        Get
            Return MyBase.FrameVector(axis)
        End Get
        Set(value As MathNet.Numerics.LinearAlgebra.Vector(Of Double))
            MyBase.FrameVector(axis) = value
            'trigger the smarpod moing
            Me.ControlVector = Me.ControlVector
        End Set
    End Property
    ReadOnly Property PodCommand As podCommandBase
        Get
            Return __podCommand
        End Get
    End Property
    Dim __podCommand As podCommandBase = New podCommandBase

    ''' <summary>
    ''' Integrate coordinate system and actuator
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Property ControlVector As MathNet.Numerics.LinearAlgebra.Vector(Of Double)
        Get
            Return MyBase.ControlVector
        End Get
        Set(value As MathNet.Numerics.LinearAlgebra.Vector(Of Double))
            MyBase.ControlVector = value
            'transform the control vector to podCommnad
            With __podCommand
                .Px = value(controlVectorIndexesEnum.X)
                .Py = value(controlVectorIndexesEnum.Y)
                .Pz = value(controlVectorIndexesEnum.Z)
                .Rx = value(controlVectorIndexesEnum.A)
                .Ry = value(controlVectorIndexesEnum.B)
                .Rz = value(controlVectorIndexesEnum.C)
            End With
            RaiseEvent TransformationChanged(Me, EventArgs.Empty)
            ''drive smarpod to move
            '__smarpodControlReference.drive(GO_POSITION, __podCommand)
        End Set
    End Property

    'Dim __smarpodControlReference As smarPodControl = Nothing

    Shared ReadOnly Property Instance As sHtm
        Get
            Return __instance
        End Get
    End Property
    Shared __instance As sHtm = New sHtm
    Protected Sub New()
        MyBase.New(framesDefinition.S,
                   framesDefinition.S0)
    End Sub

    '#Region "IDrivable Interface"
    '    Public ReadOnly Property CommandDrivenState As IDrivable.drivenState Implements IDrivable.CommandDrivenState
    '        Get
    '            Return __smarpodControlReference.CommandDrivenState
    '        End Get
    '    End Property

    '    Public ReadOnly Property CommandEndStatus As IDrivable.endStatus Implements IDrivable.CommandEndStatus
    '        Get
    '            Return __smarpodControlReference.CommandEndStatus
    '        End Get
    '    End Property

    '    Public ReadOnly Property CommandInExecute As Object Implements IDrivable.CommandInExecute
    '        Get
    '            Return __smarpodControlReference.CommandInExecute
    '        End Get
    '    End Property

    '    Public Function drive(command As [Enum], Optional __arg As Object = Nothing) As IDrivable.endStatus Implements IDrivable.drive
    '        Return __smarpodControlReference.drive(command, __arg)
    '    End Function

    '    Public Function getCommands() As ICollection Implements IDrivable.getCommands
    '        Return __smarpodControlReference.getCommands
    '    End Function

    '    Public Property TimeoutLimit As TimeSpan Implements IDrivable.TimeoutLimit
    '#End Region

End Class

