Option Strict Off
Imports Automation
Imports Automation.Components.Services
Imports Automation.mainIOHardware
Imports Automation.Components
Imports System.ComponentModel
Imports Mes
Imports System.Net
Imports CameraAndImageProcess
Imports System.IO.Ports
Imports System.Text.RegularExpressions

Public Class Assembly
    Inherits assemblyArch
    Public Event SystemReady As EventHandler
    Public Event OperationStopped As EventHandler
    Public Event OperationStarted As EventHandler       'raised when system started
    'Public Property MesInterface As MesController_Asa05067
    Public mesReference As MesController_Asa05067 = Nothing
    Public WithEvents __headVirtualStation As headVirtualStation = New headVirtualStation


    Public WriteOnly Property IVisionReference As IVision
        Set(value As IVision)
#If USE_ROBOT = 1 Then
            RobotSystem.aligner.CamContent.Camera = value
#End If
        End Set
    End Property
    Public WithEvents genericSettings As settingBlock = New settingBlock
    Public Event SystemIgnited(ByVal sender As Object, ByVal e As EventArgs)    'inform gui to enable buttons
    Public Event SystemStartPressed(ByVal sender As Object, ByVal e As EventArgs)    'inform gui to enable buttons
    Property isIGNITED As Boolean
    Dim warningPack As New warningMessagePackage(Me)
    Dim door1OpenedWarning As New warningMessagePackage(Me, "SpD1B off, 門禁被開啟 --機台暫停")
    Dim door2OpenedWarning As New warningMessagePackage(Me, "SpD1C off, 門禁被開啟 --機台暫停")
    Dim door3OpenedWarning As New warningMessagePackage(Me, "SpD1D off, 門禁被開啟 --機台暫停")
    Dim door4OpenedWarning As New warningMessagePackage(Me, "SpD1E off, 門禁被開啟 --機台暫停")
    Public operationSignals As flagController(Of operationSignalsEnum) = New flagController(Of operationSignalsEnum)
    Dim tmr As New singleTimer

    Sub settingChanged(ByVal sender As settingBlock, ByVal e As EventArgs) Handles genericSettings.PropertyChanged

        Dim _sender As settingBlock = CType(sender, settingBlock)

        '-------------------------------------------
        '   Whether Lane1/Lane2 Disable , Affect Ignite stage only
        '-------------------------------------------
        'igniteList.Clear()
        '-------------------------------------------
        '   Whether communicate with Unloader
        '-------------------------------------------
        'todo 
        With RobotSystem.aligner.TargetObjectCollection
            With .Item(1) '156P
                With .TargetPoseCollection(clsRobotSystem.targetEnum.PICK)
                    .ManualOffsetX = _sender._156pPickPositionOffsetX
                    .ManualOffsetY = _sender._156pPickPositionOffsetY
                    .ManualOffsetR = _sender._156pPickPositionOffsetR
                End With
                With .TargetPoseCollection(clsRobotSystem.targetEnum.PLACE)
                    .ManualOffsetX = _sender._156pPlacePositionOffsetX
                    .ManualOffsetY = _sender._156pPlacePositionOffsetY
                    .ManualOffsetR = _sender._156pPlacePositionOffsetR
                End With
                With .TargetPoseCollection(clsRobotSystem.targetEnum.CALIBRATION)
                    .ManualOffsetX = _sender._156pCalibrationPositionOffsetX
                    .ManualOffsetY = _sender._156pCalibrationPositionOffsetY
                    .ManualOffsetR = _sender._156pCalibrationPositionOffsetR
                End With
            End With
            With .Item(2) '156M
                With .TargetPoseCollection(clsRobotSystem.targetEnum.PICK)
                    .ManualOffsetX = _sender._156mPickPositionOffsetX
                    .ManualOffsetY = _sender._156mPickPositionOffsetY
                    .ManualOffsetR = _sender._156mPickPositionOffsetR
                End With
                With .TargetPoseCollection(clsRobotSystem.targetEnum.PLACE)
                    .ManualOffsetX = _sender._156mPlacePositionOffsetX
                    .ManualOffsetY = _sender._156mPlacePositionOffsetY
                    .ManualOffsetR = _sender._156mPlacePositionOffsetR
                End With
                With .TargetPoseCollection(clsRobotSystem.targetEnum.CALIBRATION)
                    .ManualOffsetX = _sender._156mCalibrationPositionOffsetX
                    .ManualOffsetY = _sender._156mCalibrationPositionOffsetY
                    .ManualOffsetR = _sender._156mCalibrationPositionOffsetR
                End With
            End With
        End With
    End Sub

#Region "integration components"

    Dim startButton As sensorControl = New sensorControl() With {.InputBit = inputAddress.PB_START}
    Dim hmiPauseButton As sensorControl = New sensorControl() With {.InputBit = inputAddress.PB_PAUSE}
    Dim stopButton As sensorControl = New sensorControl() With {.InputBit = inputAddress.PB_END}
    Dim startLight As flipService = New flipService() With {.OutputBit = outputAddress.L_Start, .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Dim stopLight As flipService = New flipService() With {.OutputBit = outputAddress.L_End, .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Dim hmiPauseLight As flipService = New flipService() With {.OutputBit = outputAddress.L_Pause1, .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}
    'Dim pauseLightLane1 As flipService = New flipService() With {.OutputBit = outputAddress.LP_OutM1, .FlipGoal = New TimeSpan(0, 0, 0, 0, 500)}



    Dim isDoorInterlockMessageSended As Boolean = False
#End Region

#Region "sub systems"

#If USE_ROBOT = 1 Then
    Public WithEvents RobotSystem As New clsRobotSystem
#End If
    Public WithEvents CassetteSystem As New clsCassetteSystem
    Public igniteList As List(Of IFinishableStation) = New List(Of IFinishableStation) From {RobotSystem, CassetteSystem}
    Public WithEvents RobotCresboxHandshake As New clsRobotCresboxHandshake
#End Region
    Function initMappingAndSetup() As Integer

        With relatedFlags
            .AddRange(Me.controlFlags.FlagElementsArray)
        End With

        'state function configuration
        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.IDLE) = AddressOf stateIdle
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute 'Function() (0)
        systemMainState = systemStatesEnum.IGNITE

        'enable myself
        Me.IsEnabled = True

        'disable flip things
        actionComponents.ForEach(Sub(__drive As driveBase)
                                     If (TryCast(__drive, flipService) IsNot Nothing) Then
                                         __drive.IsEnabled = False
                                     End If
                                 End Sub)

        'link pause sensing
        PauseBlock.listening = AddressOf pauseSense
        PauseBlock.uninterceptListening = AddressOf unpauseSense

        'mount logger
        AddHandler CentralMessenger.MessagePoped, AddressOf basicLogger.logMessageToFile    'hsien ,2015.04.04

        'door interlock , Hsien , 2015.05.14
        messageTimer.TimerGoal = New TimeSpan(0, 0, 1)
        With doorInterlock '如果要bypass門禁，則將doorInterlock IsEnable=false
            'If utilities.IsInIDEmode = False Then
            .SensorsNeedToCheck.Add(New sensorCheckService.sensorCheckCondition(inputAddress.SpD1B, True)) '檢查此sensor的readbit是否為true, 若否則raise event CheckFailed
            .SensorsNeedToCheck.Add(New sensorCheckService.sensorCheckCondition(inputAddress.SpD1C, True))
            .SensorsNeedToCheck.Add(New sensorCheckService.sensorCheckCondition(inputAddress.SpD1D, True))
            .SensorsNeedToCheck.Add(New sensorCheckService.sensorCheckCondition(inputAddress.SpD1E, True))
            'End If

            AddHandler .CheckFailed, Sub(sender As Object, e As sensorCheckService.sensorCheckEventArgs)
                                         'if (not isdoorinterlockmessagesended) then
                                         Select Case e.Content.SensorBit
                                             Case inputAddress.SpD1B : sendWarningMessage(door1OpenedWarning)
                                             Case inputAddress.SpD1C : sendWarningMessage(door2OpenedWarning)
                                             Case inputAddress.SpD1D : sendWarningMessage(door3OpenedWarning)
                                             Case inputAddress.SpD1E : sendWarningMessage(door4OpenedWarning)
                                         End Select
                                         isDoorInterlockMessageSended = True
                                     End Sub
            AddHandler .CheckPassed, Sub()
                                         If isDoorInterlockMessageSended = True Then
                                             isDoorInterlockMessageSended = False
                                             sendMessage(statusEnum.GENERIC_MESSAGE, "所有安全門已關閉 -- ")
                                             removeWarningMessage(door1OpenedWarning)
                                             removeWarningMessage(door2OpenedWarning)
                                             removeWarningMessage(door3OpenedWarning)
                                             removeWarningMessage(door4OpenedWarning)
                                         End If
                                     End Sub
        End With

        buzzer.OutputBit = outputAddress.L_Buzzer
        redTowerLight.OutputBit = outputAddress.L_Red
        yellowTowerLight.OutputBit = outputAddress.L_Yellow
        greenTowerLight.OutputBit = outputAddress.L_Green
        ComPort = "COM1"
        pauseButtons.AddRange({hmiPauseButton})
        pauseLights.AddRange({hmiPauseLight})
        airMonitor.SensorsNeedToCheck.Add(New sensorCheckService.sensorCheckCondition(inputAddress.Air, True))
        Return 0

    End Function

    Function initCassetteSystemMappingAndSetup() As Integer
        With CassetteSystem
            .ShiftData = RobotSystem.PickPositionInfo
            .CassetteArrivedAction = AddressOf CassetteArrivedAction
            .readCassetteID = AddressOf readRFID
            With .motorCassette
                .MotorIndex = motorAddress.MSA1A
                .PositionDictionary.Clear()
                .PositionDictionary.Add(clsCassetteSystem.EnumCassetteMotorPoint.PITCH, CShort(motorPoints.MSA1A_PITCH_DIST))
                .PositionDictionary.Add(clsCassetteSystem.EnumCassetteMotorPoint.GAP, CShort(motorPoints.MSA1A_GAP_DIST))
                .PositionDictionary.Add(clsCassetteSystem.EnumCassetteMotorPoint.IDLE, CShort(motorPoints.MSA1A_IDLE))
                .PositionDictionary.Add(clsCassetteSystem.EnumCassetteMotorPoint.INSERT, CShort(motorPoints.MSA1A_INSERT))
                .PositionDictionary.Add(clsCassetteSystem.EnumCassetteMotorPoint.DOWN_TOUCH, CShort(motorPoints.MSA1A_TOUCH_DIST))
            End With
            With .motorTounge
                .MotorIndex = motorAddress.MSB1A
                .PositionDictionary.Clear()
                .PositionDictionary.Add(clsCassetteSystem.EnumToungueMotorPoint.BACK, CShort(motorPoints.MSB1A_PULL))
                .PositionDictionary.Add(clsCassetteSystem.EnumToungueMotorPoint.INSERT, CShort(motorPoints.MSB1A_INSERT))
            End With
            .CassetteSensorBit = inputAddress.SpA1A
            .CassetteButtonBit = inputAddress.PB_LIFTER
            .vacuumBit = outputAddress.VgB1A
            .vacuumBreakBit = outputAddress.VbB1A
            .vacuumSensorBit = inputAddress.VsB1A
            With .cyCassetteFix
                .ActuatorBit = outputAddress.CyA1A
                .OnEndSensor = inputAddress.A1a1
                .OffEndSensor = inputAddress.A1a0
            End With

            .lampCassette.OutputBit = outputAddress.LP_LIFTER
        End With
        Return 0
    End Function

    Private Sub CassetteSystem_CassetteRejectByUserEvent(sender As Object, e As EventArgs) Handles CassetteSystem.CassetteRejectByUserEvent
        mesReference.CntRejected(CassetteSystem.RFID, "Local")
    End Sub

    Private Sub CassetteSystem_CassetteRemovedEvent(sender As Object, e As EventArgs) Handles CassetteSystem.CassetteRemovedEvent
        mesReference.CntRmvd(CassetteSystem.RFID)
    End Sub

    Function CassetteArrivedAction() As Boolean
        Static cassetteActionState As Integer
        Select Case cassetteActionState
            Case 0
                'cassette id had read on IN_CONVEYOR_READY position
                CassetteSystem.RFID = PreparedCasstteId
                mesReference.CntRcvd(CassetteSystem.RFID, "100")
                '---------------
                '   TRIGGER THE MES
                '---------------
                mesReference.flagCntEnter = True
                cassetteActionState = 10

            Case 10
                If mesReference.flagCntEnter = False Then
                    'acceptable cassette conditon : CIM accepted and cassette style checked
                    CassetteSystem.flags.writeFlag(clsCassetteSystem.EnumFlags.IS_ACCEPTABLE, mesReference.flagRcmdCntAccepted)
                    cassetteActionState = 0
                    If mesReference.flagRcmdCntAccepted Then
                        CassetteSystem.LotID = mesReference.strLotID
                        Dim aryString As String() = Strings.Split(mesReference.SlotIdList, ",")
                        CassetteSystem.Slots.Clear()
                        For Each s As String In aryString
                            If IsNumeric(s) = True Then
                                CassetteSystem.Slots.Add(CInt(s))
                            End If
                        Next
                        mesReference.CntAccepted(CassetteSystem.RFID)
                    Else
                        mesReference.CntRejected(CassetteSystem.RFID, "Host")
                    End If

                    Return True
                End If
            Case Else

        End Select

        Return False
    End Function
#Region "RFID read sequence"
    Dim __serialPort As IO.Ports.SerialPort = New IO.Ports.SerialPort
    Dim readRFIDState As Integer = 0
    Dim comOpen As Boolean = False 'serialPort opened ornot
    Dim __rfidReadDelay As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 500)}
    Dim PreparedCasstteId As String
    Dim _RFIDEnabled As Boolean
    Function readRFID() As Integer '0:busy, 1
        Select Case readRFIDState
            Case 0
                _RFIDEnabled = genericSettings.RFIDEnabled
                If _RFIDEnabled = False Then
                    PreparedCasstteId = String.Format("DUMMY{0}", DateTime.Now.ToString) 'Hsien , 2015.10.26 , report dummy id
                    Return 1
                End If

                If comOpen = True Then
                    readRFIDState = 10 '若 serialPort 開啟成功, 檢查RFID
                Else
                    readRFIDState = 0 '開起失敗, return True 接受Cassette進入
                    Return -1
                End If
            Case 10
                __serialPort.DiscardInBuffer()
                __serialPort.DiscardOutBuffer()
                __serialPort.Write("~01 RMID*" & vbCr)
                __rfidReadDelay.IsEnabled = True
                readRFIDState = 100
            Case 100
                Dim Result As Integer
                If (__rfidReadDelay.IsTimerTicked) Then
                    __serialPort.Encoding = System.Text.Encoding.ASCII
                    'cassetteSubSystem.CassetteId = __serialPort.ReadExisting()
                    Dim test As String = __serialPort.ReadExisting
                    Dim __match As String() = Strings.Split(test, "~01 RMIDR NO ")
                    If __match.Count = 1 Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, String.Format("RAW Carrier ID={0}", test))
                        Result = -1
                    ElseIf __match(1) = "" Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, String.Format("RAW Carrier ID={0}", test))
                        Result = -1
                    Else
                        Dim __match2 As String() = Strings.Split(__match(1), "*")
                        PreparedCasstteId = __match2(0)
                        sendMessage(statusEnum.GENERIC_MESSAGE, String.Format("Carrier ID={0}", PreparedCasstteId))
                        Result = 1
                    End If
                    'Dim __match As Match = Regex.Match(__serialPort.ReadExisting, "~01 RMIDR NO (.+) \*")
                    'If __match.Success Then
                    ' PreparedCasstteId = __match.Groups(1).ToString
                    'End If
                    'PreparedCasstteId = __serialPort.ReadExisting
                    readRFIDState = 0
                    Return Result
                End If
        End Select

        Return False
    End Function
    Property ComPort As String
        Get
            Return __serialPort.PortName
        End Get
        Set(value As String)
            '1. com port name
            '2. baud rate
            '3. odd check
            '4. data bit length
            '5. stop bit
            __serialPort = New SerialPort(value,
                                          9600,
                                          Parity.None,
                                          8,
                                          StopBits.One)

            Try
                'reopen , and clear buffer content
                With __serialPort
                    .Open()
                    .DiscardInBuffer()
                    .DiscardOutBuffer()
                    .Encoding = System.Text.Encoding.ASCII
                    comOpen = __serialPort.IsOpen  'if serialPort open successed, comOpen = True
                End With
            Catch ex As Exception
                comOpen = False
                MsgBox("Error Open: " & ex.Message)
            End Try

        End Set
    End Property
    Dim warningPausePack As New warningMessagePackage(Me)
    Public Overrides Function unpauseSense() As Boolean
        Dim isAnyButtonPressed As Boolean =
            pauseButtons.Exists(Function(__button As sensorControl) (__button.PulseCount > 0 And __button.OnPulseWidth.TotalMilliseconds > 50))

        pauseButtons.ForEach(Sub(__button As sensorControl) __button.PulseCount = 0)


        Dim doorCondition As Boolean = (doorInterlock.IsAllConditionPassed Or Not doorInterlock.IsEnabled)

        If (Not doorCondition) Then
            Dim __theDoorNotClosed As [Enum] = [Enum].ToObject(alarmContentSensor.InputsEnumType,
                                                              doorInterlock.SensorsNeedToCheck.Find(Function(__sensor As sensorCheckService.sensorCheckCondition) (Not __sensor.IsConditionPassed)).SensorBit)
            warningPausePack.AdditionalInfo = String.Format("{0}未關閉  -- 系統暫停(關閉後按暫停鍵恢復運行)", __theDoorNotClosed.ToString)
            sendWarningMessage(warningPausePack)
        End If

        Return (controlFlags.readFlag(controlFlagsEnum.PAUSE_PRESSED) Or isAnyButtonPressed) AndAlso
            doorCondition

    End Function
    Overrides Sub unpauseHandler() Handles PauseBlock.UninterceptedEvent
        removeWarningMessage(warningPausePack)
        MyBase.unpauseHandler()
    End Sub
    Public Overrides Function close() As Integer
        If comOpen = True Then
            __serialPort.DiscardInBuffer()
            __serialPort.Close()
        End If
        Return MyBase.close()
    End Function
#End Region
    Function _afterVacuumGenerated() As Boolean
        Static cStep As Integer
        Static tmr As New singleTimer
        Select Case cStep
            Case 0
                Automation.mainIOHardware.writeBit(outputAddress.VgB1A, False)
                Automation.mainIOHardware.writeBit(outputAddress.VbB1A, True)
                tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.2) : tmr.IsEnabled = True
                cStep = 10
            Case 10
                If tmr.IsTimerTicked = True Then
                    Automation.mainIOHardware.writeBit(outputAddress.VbB1A, False)
                    Automation.mainIOHardware.writeBit(outputAddress.Light, True)
                    cStep = 0
                    Return True
                End If
        End Select
        Return False
    End Function

    Function initRobotSystemMappingAndSetup() As Integer
#If USE_ROBOT = 1 Then
        With RobotSystem
            .PickPositionInfo = New WaferData
            .PlacePositionInfo = New WaferData
            .VacuumBit = outputAddress.VgC1A
            .VacuumBreakBit = outputAddress.VbC1A
            .VacuumSensorBit = inputAddress.VsC1A
            .MeasurementCoverClosedBit = inputAddress.SpD1A
            .PickPositionVacuumBit = outputAddress.VgB1A
            .PickPositionVacuumBreakBit = outputAddress.VbB1A
            .LightOnBit = outputAddress.Light
            .afterVacuumGenerated = AddressOf _afterVacuumGenerated
            .flagRequestToLoadMeasurement = New flagController(Of interlockedFlag)
            .flagRequestToUnloadMeasurement = New flagController(Of interlockedFlag)

            With .aligner
                .CalibrationOffsetX = 20
                .CalibrationOffsetY = 20
                .CalibrationRotateAngle1 = 10
                .CalibrationRotateAngle2 = 10
                '載入校正檔
                Dim filePath As String = System.IO.Path.Combine(My.Application.Info.DirectoryPath, "Data", "CalibrationData.xml")
                If System.IO.File.Exists(filePath) = True Then
                    OpenXmlFile(.CamContent.calibrationData, filePath)
                End If
                '載入目標物件的設定檔
                filePath = System.IO.Path.Combine(My.Application.Info.DirectoryPath, "Data", "TargetObjectCollection")
                If System.IO.File.Exists(filePath) = True Then
                    OpenXmlFile(.TargetObjectCollection, filePath)
                Else
                    'make default target pose collection
                    '順序是 156P, 156M
                    Dim TargetPoseCollection As New List(Of VisionAlignment.clsVisionAlignment.clsTargetPose)
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "pick"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "place"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "alignment"})

                    .TargetObjectCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetObject With {.sName = "calibration", .TargetPoseCollection = TargetPoseCollection})

                    TargetPoseCollection = New List(Of VisionAlignment.clsVisionAlignment.clsTargetPose)
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "pick"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "place"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "alignment"})

                    .TargetObjectCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetObject With {.sName = "156P", .TargetPoseCollection = TargetPoseCollection})

                    TargetPoseCollection = New List(Of VisionAlignment.clsVisionAlignment.clsTargetPose)
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "pick"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "place"})
                    TargetPoseCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetPose With {.Name = "alignment"})

                    .TargetObjectCollection.Add(New VisionAlignment.clsVisionAlignment.clsTargetObject With {.sName = "156M", .TargetPoseCollection = TargetPoseCollection})


                End If
            End With
            With .saftyGuard
                .ButtonUnlockBits.Add(inputAddress.PB_UNLOCK)
                .LampUnlockBits.Add(outputAddress.LP_UNLOCK)
                .LockBits.Add(outputAddress.DoorCtrl1)
                .LockBits.Add(outputAddress.DoorCtrl2)
                .LockBits.Add(outputAddress.DoorCtrl3)
                .LockBits.Add(outputAddress.DoorCtrl4)
                .DoorBits.Add(inputAddress.SpD1B)
                .DoorBits.Add(inputAddress.SpD1C)
                .DoorBits.Add(inputAddress.SpD1D)
                .DoorBits.Add(inputAddress.SpD1E)


            End With
        End With
        With RobotCresboxHandshake
            .di_DoorOpen = inputAddress.SpD1A
            .di_EqReady = inputAddress.HS0I3_Ready
            .di_EqRunning = inputAddress.HS0I0_Running
            .di_LdRequest = inputAddress.HS0I1_LRequest
            .di_UldRequest = inputAddress.HS0I2_URequest
            .do_RbLoadBusy = outputAddress.HS0P2_LBusy
            .do_RbUnLdBusy = outputAddress.HS0P3_UBusy
            .do_RbComplete = outputAddress.HS0P4_Complete
            .do_RbRunning = outputAddress.HS0P0_Running
            .do_TrRequest = outputAddress.HS0P1_TR_Request
            .RobotLoad = RobotSystem.flagRequestToLoadMeasurement
            .RobotUnLoad = RobotSystem.flagRequestToUnloadMeasurement
        End With



#End If

        Return 0
    End Function
    Private Function initMappingLane1Conveyor() As Integer
        '-------------------------------------------------
        '   Conveyor Configuration
        '-------------------------------------------------
        'motor1.MotorIndex = motorAddress.MSA1A
        Return 0
    End Function


    Function initFinishFlagsLink() As Integer

        CassetteSystem.UpstreamStations = New List(Of IFinishableStation) From {__headVirtualStation}
        RobotSystem.UpstreamStations = New List(Of IFinishableStation) From {__headVirtualStation}
        __headVirtualStation.LastStations.Add(CassetteSystem)
        __headVirtualStation.LastStations.Add(RobotSystem)
        Return 0
    End Function


    Function initLoadSetting() As Integer
        Return 0
    End Function

    Function closeAssembly() As Integer
        '---------------------------
        '   Servo all motor off
        '---------------------------
        'For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
        '    AMaxM4_ServoOn(index, IS_OFF)
        'Next


        Return 0
    End Function
    Function initStartMotors() As Integer
        'release alarm , servo-on , clear register...etc
        '---------------------------
        '   Servo all motor off
        '---------------------------
        'Dim remainedErrorStatus As Integer
        'For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
        '    AMaxM4_ServoOn(index, IS_ON)
        '    AMaxM4_ResetALM(index, IS_ON)
        '    AMaxM4_ErrorStatus(index, remainedErrorStatus)
        'Next

        'do not servo-on steppers
        ' AMaxM4_ServoOn(motorAddress.MSD1C, IS_OFF)
        'AMaxM4_ServoOn(motorAddress.MSD2C, IS_OFF)
        'AMaxM4_ServoOn(motorAddress.MPA1A, IS_OFF)
        'AMaxM4_ServoOn(motorAddress.MPA2A, IS_OFF)

        Threading.Thread.Sleep(1000)    'sleep for a while
        'For index = 0 To [Enum].GetValues(GetType(motorAddress)).Length - 1
        '    AMaxM4_ResetALM(index, IS_OFF)
        'Next

        Return 0
    End Function

    Public Sub New()
        messageTimer.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1)
        'allocating central objects , hsien , 2015.03.31
        Me.CentralAlarmObject = New alarmManager
        Me.PauseBlock = New interceptObject
        Me.CentralMessenger = New messageHandler

        Me.initialize = CType([Delegate].Combine(Me.initialize,
            New Func(Of Integer)(AddressOf initLinkPause),
            New Func(Of Integer)(AddressOf initEnableAllDrives),
            New Func(Of Integer)(AddressOf initMappingAndSetup),
            New Func(Of Integer)(AddressOf initRobotSystemMappingAndSetup),
            New Func(Of Integer)(AddressOf initCassetteSystemMappingAndSetup),
            New Func(Of Integer)(AddressOf initSubsystemInitialize),
            New Func(Of Integer)(AddressOf initFinishFlagsLink),
            New Func(Of Integer)(AddressOf initStartMotors),
            New Func(Of Integer)(Function() As Integer
                                     doorInterlock.IsEnabled = False
                                     loadSetting(Me.genericSettings, "setting.xml")
                                     basicLogger.ContentFilter = Function(__handler As messageHandler, __e As messagePackageEventArg) As Boolean
                                                                     'return value : true , would pass and log / false : would be disposed
                                                                     If (__e.Message.Sender.GetType() = GetType(compSocket) Or
                                                                         (Not __e.Message.Sender.Equals(Me))) Then
                                                                         Return False
                                                                     End If
                                                                     Return True    'passed
                                                                 End Function
                                     Return 0
                                 End Function)), Global.System.Func(Of Integer))

        'Hsien , define shutdown script
        Me.shutdown = [Delegate].Combine(New Func(Of Integer)(AddressOf closeDumpAlarms2Message),
                                         New Func(Of Integer)(AddressOf closeFlushAllMessages),
                                         New Func(Of Integer)(AddressOf closeSubsystems),
                                         New Func(Of Integer)(AddressOf closeAssembly),
                                         New Func(Of Integer)(Function() As Integer
                                                                  genericSettings.Save()
                                                                  Return 0
                                                              End Function))
    End Sub
#Region "state functions"
    Function stateIgnite() As Integer

        Select Case systemSubState
            Case 0
                'MesController_Asa05067.euipmentStateReport(EquipmentState._STOP)
                systemSubState = 5
            Case 5
                '---------------------------------
                '   Wait until all hardware online
                '---------------------------------
                If (mainIOHardware.Instance.PhysicalHardwareList.TrueForAll(Function(__hardware As subHardwareNode) __hardware.Status = hardwareStatusEnum.HEALTHY)) Then
                    RaiseEvent SystemReady(Me, Nothing)
                    removeWarningMessage(warningPack)
                    sendMessage(statusEnum.GENERIC_MESSAGE, "All hardware connected")
                    systemSubState = 10
                Else
                    '----------------------------------------
                    '   Some hardware failed , wait reconnect
                    '----------------------------------------
                    warningPack.AdditionalInfo = String.Format("Waiting for hardware connected{0}",
                            mainIOHardware.Instance.PhysicalHardwareList.Find(Function(__hardware As subHardwareNode) __hardware.Status <> hardwareStatusEnum.HEALTHY).HardwareName)
                    sendWarningMessage(warningPack)
                End If

            Case 10
                RobotSystem.saftyGuard.LockBits.ForEach(Sub(obj As ULong) writeBit(obj, True)) 'set all door locked
                tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.5) : tmr.IsEnabled = True
                systemSubState = 20
            Case 20
                If tmr.IsTimerTicked = True Then
                    doorInterlock.IsEnabled = True
                    RobotSystem.saftyGuard.IsEnabled = True
                    systemMainState = systemStatesEnum.IDLE 'Hsien , 2015.04.30
                End If



        End Select
        Me.controlFlags.setFlag(controlFlagsEnum.IS_BUZZER_ON)
        Return 0
    End Function
    Function stateIdle() As Integer
        Select Case systemSubState

            Case 0
                'check physical start button
                If startButton.PulseCount > 0 AndAlso startButton.OnPulseWidth.TotalMilliseconds > 100 Then
                    startButton.PulseCount = 0
                    controlFlags.setFlag(controlFlagsEnum.ABLE_IGNITE)
                    operationSignals.setFlag(operationSignalsEnum.__START)
                End If
                If (controlFlags.readFlag(controlFlagsEnum.ABLE_IGNITE)) Then
                    RaiseEvent SystemStartPressed(Me, Nothing)
                    removeWarningMessage(warningPack) '清除 按下啟動鍵後系統啟動
                    igniteList.ForEach(Sub(__system As IFinishableStation) __system.FinishableFlags.setFlag(IFinishableStation.controlFlags.COMMAND_IGNITE))
                    startLight.IsEnabled = False : writeBit(startLight.OutputBit, True)
                    'Lane disable readonly
                    'Dim _Lane1Disable As PropertyDescriptor = TypeDescriptor.GetProperties(genericSettings)("Lane1Disable")
                    'Dim __readOnlyAttribute As ReadOnlyAttribute = CType(_Lane1Disable.Attributes(GetType(ReadOnlyAttribute)), ReadOnlyAttribute)
                    'Dim __isReadOnly As System.Reflection.FieldInfo = __readOnlyAttribute.GetType().GetField("isReadOnly", System.Reflection.BindingFlags.NonPublic Or System.Reflection.BindingFlags.Instance)
                    '__isReadOnly.SetValue(__readOnlyAttribute, True)

                    'Dim __buffer1 As PropertyDescriptor = TypeDescriptor.GetProperties(genericSettings)("E1BufferEnabled")
                    '__readOnlyAttribute = __buffer1.Attributes(GetType(ReadOnlyAttribute))
                    '__isReadOnly = __readOnlyAttribute.GetType().GetField("isReadOnly", System.Reflection.BindingFlags.NonPublic Or System.Reflection.BindingFlags.Instance)
                    '__isReadOnly.SetValue(__readOnlyAttribute, True)

                    isIGNITED = True
                    systemSubState = 10
                Else
                    If (Not startLight.IsEnabled) Then startLight.IsEnabled = True
                    warningPack.AdditionalInfo = "Please press the Start button" : sendWarningMessage(warningPack)
                End If


            Case 10

                If (igniteList.TrueForAll(Function(__system As IFinishableStation) (Not __system.FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)))) Then
                    RaiseEvent SystemIgnited(Me, Nothing)
                    removeWarningMessage(warningPack)
                    writeBit(outputAddress.L_Start, True)
                    systemSubState = 20
                    sendMessage(statusEnum.GENERIC_MESSAGE, "All sub system homing finished")
                Else
                    If (buzzer.IsEnabled) Then
                        buzzer.IsEnabled = False
                    End If
                    warningPack.AdditionalInfo = "Homing..." : sendWarningMessage(warningPack) 'sendWarningMessageTimed(statusEnum.GENERIC_MESSAGE, "Homing…")
                End If

            Case 20
                operationSignals.resetFlag(operationSignalsEnum.__STOP)
                controlFlags.resetFlag(controlFlagsEnum.ABLE_IGNITE) 'auto reset able ignite flag
                If (operationSignals.readFlag(operationSignalsEnum.__START)) Then
                    RaiseEvent OperationStarted(Me, Nothing)    'Hsien , 2015.04.15
                    genericSettings.applyPropertyChange()   'Hsien , re-apply user preseted settings , 2015.09.08
                    'start the chain
                    CassetteSystem.IsStarted = True

                    __headVirtualStation.operationSignals.setFlag(operationSignalsEnum.__START)

                    'MesController_Asa05067.euipmentStateReport(EquipmentState.RUN)


                    sendMessage(statusEnum.GENERIC_MESSAGE, "start to auto run")  'Hsien , 2015.09.01
                    systemMainState = systemStatesEnum.EXECUTE
                End If
        End Select
        Return 0
    End Function
    Function stateExecute() As Integer
        If doorInterlock.IsEnabled And Not doorInterlock.IsAllConditionPassed Then
            If buzzer.IsEnabled = False Then
                'buzzer.IsEnabled = True
            End If
        End If

        Select Case systemSubState
            Case 0
                If (stopButton.PulseCount > 0 AndAlso stopButton.OnPulseWidth.TotalMilliseconds > 100) Then
                    stopButton.PulseCount = 0
                    operationSignals.setFlag(operationSignalsEnum.__STOP)
                End If
                If (operationSignals.viewFlag(operationSignalsEnum.__STOP)) Then
                    writeBit(stopLight.OutputBit, True)
                    writeBit(startLight.OutputBit, False)   'Hsien , 2015.06.24
                    __headVirtualStation.operationSignals.setFlag(operationSignalsEnum.__STOP)   'chain head stop started
                    sendMessage(statusEnum.GENERIC_MESSAGE, "finishing auto run...")  'Hsien , 2015.04.15
                    systemSubState = 100
                End If

            Case 100
                If __headVirtualStation.MainState = systemStatesEnum.IDLE Then
                    'Hsien , direct control conveyor system , 2015.10.06
                    Me.buzzer.IsEnabled = False 'stop buzzer if had enabled by cassette minder
                    'return to idle
                    operationSignals.resetFlag(operationSignalsEnum.__START)
                    RaiseEvent OperationStopped(Me, Nothing)    'Hsien , 2015.04.15 
                    writeBit(stopLight.OutputBit, False)
                    'mesController.euipmentStateReport(EquipmentState._STOP)
                    systemMainState = systemStatesEnum.IDLE
                Else
                    '--------------------
                    '   Wait all component stopped
                    '--------------------
                End If


        End Select



        Return 0
    End Function

#End Region



    Private Sub __headVirtualStation_AllStationFalled(sender As Object, e As EventArgs) Handles __headVirtualStation.AllStationFalled

    End Sub

    Private Sub __headVirtualStation_AllStationRised(sender As Object, e As EventArgs) Handles __headVirtualStation.AllStationRised
        CassetteSystem.FinishableFlags.resetFlag(IFinishableStation.controlFlags.STATION_FINISHED)
        RobotSystem.FinishableFlags.resetFlag(IFinishableStation.controlFlags.STATION_FINISHED)
    End Sub

    Private Sub RobotCresboxHandshake_MeasureResultEvent(sender As Object, e As clsRobotCresboxHandshake.MeasureEventArgs) Handles RobotCresboxHandshake.MeasureResultEvent
        mesReference.MatMeasure((CassetteSystem.CurrentSlot + 1).ToString, e.resutlList)
    End Sub

    Private Sub RobotSystem_PutCompleteEvent(sender As Object, e As EventArgs) Handles RobotSystem.PutCompleteEvent
        Dim filePath As String = "Z:\LotID.csv"
        If System.IO.File.Exists(filePath) = True Then
            System.IO.File.Delete(filePath)
        End If
    End Sub
End Class

