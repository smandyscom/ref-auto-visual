Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components.Services
Imports System.IO.Ports
Imports System.Text
Imports Automation.mainIOHardware

Public Class clsRobotSystem
    Inherits systemControlPrototype
    Implements IFinishableStation
    '資料結構
    '156P
    '   pick
    '   place
    '   calibration
    '156M
    '   pick
    '   place
    '   calibration


    Public genericSettingReference As settingBlock  'Ready link to system setting block , Hsien , 2015.05.06
#Region "Enums"
    Enum IgniteEnum
        _0
        _10
        _100
        _110
    End Enum
    Enum EnumScaraPoint
        PICK
        PLACE
        LIMZ
        PICK_STANDBY
        ALIGNMENT
        PLACE_STANDBY
        CALIBRATION
    End Enum
    Enum executeEnum
        _0
        _100
        _110

        _120

        _130
        _200

        _210

        _300

        _320

        vacuumFailProcedure_0

        vacuumFailProcedure_10

        _330

        _340

        _350

        _360

        _370

        _380

        _390

        _410

        _430

        _440

        _310

        _400

        _420







        removeFirstWaferFromMeasurement_0

        removeWaferFromMeasurement_10

        removeFirstWaferFromMeasurement_20

        removeFirstWaferFromMeasurement_30

        removeFirstWaferFromMeasurement_40

        removeFirstWaferFromMeasurement_10_vacuumFail

        removeFirstWaferFromMeasurement_10_vacuumFail_10

        _380_vacuumFail_0

        _500

        _510

        _510_vacuumFail

        _520

        _530

        _540

        _550

        _560

        _570

    End Enum
    Enum flagEnum
        GET_PICK_TARGET
        GET_PLACE_TARGET
        GET_CALIBRATION_TARGET
    End Enum
    Enum targetEnum
        PICK = 0
        PLACE = 1
        CALIBRATION = 2
    End Enum
#End Region

#Region "Data Declare"
    Public Event PutCompleteEvent As EventHandler
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags 'used for ignite control
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations
    Public Property PickPositionInfo As shiftDataPackBase
    Public Property PlacePositionInfo As shiftDataPackBase
    Public Property GripperPositionInfo As shiftDataPackBase

    Public Property flagRequestToLoadMeasurement As flagController(Of interlockedFlag)
    Public Property flagRequestToUnloadMeasurement As flagController(Of interlockedFlag)
    Public Property flags As New flagController(Of flagEnum)

    Public Property VacuumBit As ULong
    Public Property VacuumBreakBit As ULong
    Public Property VacuumSensorBit As ULong
    Public Property MeasurementCoverClosedBit As ULong
    Public Property PickPositionVacuumBit As ULong
    Public Property PickPositionVacuumBreakBit As ULong
    Public Property LightOnBit As ULong

    Property afterVacuumGenerated() As Func(Of Boolean) = Function() (True)
    Property afterVacuumBreaked() As Func(Of Boolean) = Function() (True)
#End Region
#Region "control members"
    Dim PreparedCasstteId As String = ""
    Public _smarPod As New smarpod With {.IsEnabled = True}
    Public WithEvents aligner As New VisionAlignment.clsVisionAlignment With {.IsEnabled = True}
    Public saftyGuard As New clsSaftyGuard
    Dim tmr As New singleTimer
    Dim warningPack As New warningMessagePackage(Me)
#End Region
    Function initMappingAndSetup() As Integer
        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
        End With

        systemMainStateFunctions(systemStatesEnum.IGNITE) = Function() (Ignite(systemSubState))
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = Function() (execute(systemSubState))
        systemMainState = systemStatesEnum.IGNITE
        Return 0
    End Function

    Function initPostLink() As Integer
        '------------------------------------
        '   Loading Bridge Configuration
        '------------------------------------
        '----------------------
        '   Disable wafer time/sensor
        '----------------------
        Return 0
    End Function

    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initLinkPause),
                                   New Func(Of Integer)(AddressOf initMappingAndSetup),
                                   New Func(Of Integer)(AddressOf initMappingScara),
                                   New Func(Of Integer)(AddressOf initMappingAligner),
                                   New Func(Of Integer)(AddressOf initSubsystemInitialize),
                                   New Func(Of Integer)(AddressOf initPostLink)) ',
    End Sub
    Function initMappingScara() As Integer
        With SCARA
            .PositionDictionary.Add(EnumScaraPoint.PICK, EnumScaraPoint.PICK)
            .PositionDictionary.Add(EnumScaraPoint.PLACE, EnumScaraPoint.PLACE)
            .PositionDictionary.Add(EnumScaraPoint.LIMZ, EnumScaraPoint.LIMZ)
            .PositionDictionary.Add(EnumScaraPoint.PICK_STANDBY, EnumScaraPoint.PICK_STANDBY)
            .PositionDictionary.Add(EnumScaraPoint.ALIGNMENT, EnumScaraPoint.ALIGNMENT)
            .PositionDictionary.Add(EnumScaraPoint.PLACE_STANDBY, EnumScaraPoint.PLACE_STANDBY)
        End With
        Return 0
    End Function
    Function initMappingAligner() As Integer
        With aligner
            .XYRTable = SCARA
        End With
        Return 0
    End Function


    Private Function Ignite(ByRef cStep As IgniteEnum) As Integer

        Select Case cStep
            Case IgniteEnum._0
                '-----------------------------
                '   Let all ignite
                '-----------------------------
                If (FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)) Then '等待啟動flag
                    'scara start to home
                    SCARA.drive(Global.SCARA.compScaraBase.motorCommandEnum.HOME)

                    cStep = IgniteEnum._10

                End If

            Case IgniteEnum._10 '等待所有復歸完成
                If SCARA.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    cStep = IgniteEnum._100

                End If
            Case IgniteEnum._100

                FinishableFlags.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False) '清除自己的ignite task
                systemMainState = systemStatesEnum.EXECUTE  'hsien , come to execute

        End Select
        Return 0
    End Function

    Protected Function execute(ByRef cStep As executeEnum) As Integer
        Static offsetX As Single
        Static offsetY As Single
        Static offsetR As Single
        Static targetPoint As EnumScaraPoint
        Select Case cStep
            Case executeEnum._0
                If UpstreamStations.Count > 0 AndAlso
                    UpstreamStations.TrueForAll(Function(obj As IFinishableStation) obj.FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED)) Then
                    '收料結束
                    FinishableFlags.setFlag(IFinishableStation.controlFlags.STATION_FINISHED)
                    systemMainState = systemStatesEnum.IGNITE '跳回ignite
                ElseIf flags.readFlag(flagEnum.GET_PICK_TARGET) = True Then
                    '至pick的位罝取片，並移至影像中找出目標物件，再記錄至檔案
                    targetPoint = EnumScaraPoint.PICK
                    cStep = executeEnum._500
                ElseIf flags.readFlag(flagEnum.GET_PLACE_TARGET) = True Then
                    targetPoint = EnumScaraPoint.PLACE
                    cStep = executeEnum._500
                ElseIf flags.readFlag(flagEnum.GET_CALIBRATION_TARGET) = True Then
                    targetPoint = EnumScaraPoint.CALIBRATION
                    cStep = executeEnum._500
                ElseIf flagRequestToUnloadMeasurement.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                    cStep = executeEnum.removeFirstWaferFromMeasurement_0
                ElseIf flagRequestToLoadMeasurement.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                    cStep = executeEnum._100
                End If


            Case executeEnum._100 'go to pick wafer from tongue
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.PICK_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    cStep = executeEnum._110
                End If
            Case executeEnum._110 'wait tongue pull wafer done
                '等待舌頭取出wafer後取片
                If UpstreamStations.Count > 0 AndAlso
                   UpstreamStations.TrueForAll(Function(obj As IFinishableStation) obj.FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED)) Then
                    '收料結束
                    FinishableFlags.setFlag(IFinishableStation.controlFlags.STATION_FINISHED)
                    systemMainState = systemStatesEnum.IGNITE '跳回ignite
                ElseIf flags.readFlag(flagEnum.GET_PICK_TARGET) = True Then
                    '至pick的位罝取片，並移至影像中找出目標物件，再記錄至檔案
                    targetPoint = EnumScaraPoint.PICK
                    cStep = executeEnum._500
                ElseIf flags.readFlag(flagEnum.GET_PLACE_TARGET) = True Then
                    targetPoint = EnumScaraPoint.PLACE
                    cStep = executeEnum._500
                ElseIf flags.readFlag(flagEnum.GET_CALIBRATION_TARGET) = True Then
                    targetPoint = EnumScaraPoint.CALIBRATION
                    cStep = executeEnum._500
                ElseIf flagRequestToLoadMeasurement.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    '等待儀器可放片
                    warningPack.AdditionalInfo = "waiting measurement could put wafer signal"
                    sendWarningMessage(warningPack)
                ElseIf PickPositionInfo.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                    removeWarningMessage(warningPack)
                    cStep = executeEnum._120
                End If
            Case executeEnum._120 '向下吸片
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, EnumScaraPoint.PICK) Then
                    writeBit(VacuumBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                    cStep = executeEnum._130
                End If
            Case executeEnum._130 '吸取舌頭wafer真空確認
                If readBit(VacuumSensorBit) = True AndAlso afterVacuumGenerated.Invoke = True Then
                    cStep = executeEnum._200
                ElseIf tmr.IsTimerTicked = True Then
                    Dim ap As New alarmContentSensor
                    With ap
                        .Sender = Me
                        .Inputs = VacuumSensorBit
                        .PossibleResponse = alarmContextBase.responseWays.RETRY Or alarmContextBase.responseWays.IGNORE
                        .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                        .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                     tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                                                                                     Return True
                                                                                 End Function
                        .CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                      systemSubState = executeEnum.vacuumFailProcedure_0
                                                                                      Return True
                                                                                  End Function
                        CentralAlarmObject.raisingAlarm(ap)
                    End With
                End If



            Case executeEnum._200 'go to alignment position
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.ALIGNMENT, EnumScaraPoint.LIMZ) = IDrivable.endStatus.EXECUTION_END Then
                    aligner.Align(True)
                    cStep = executeEnum._210
                End If
            Case executeEnum._210 '等待光學定位完成
                Select Case aligner.AlignmentStatus
                    Case VisionAlignment.clsVisionAlignment.ProcessResult.SUCCESS
                        writeBit(LightOnBit, False)
                        cStep = executeEnum._300
                    Case VisionAlignment.clsVisionAlignment.ProcessResult.FAIL
                        writeBit(LightOnBit, False)
                        Dim ap As New alarmContextBase With {.Sender = Me}
                        With ap
                            .PossibleResponse = alarmContextBase.responseWays.RETRY
                            .AdditionalInfo = "Optical alignment fail, retry: back to the cassette."
                            .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                         Return True
                                                                                     End Function
                            CentralAlarmObject.raisingAlarm(ap)
                        End With
                        scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.PICK, EnumScaraPoint.LIMZ)
                        cStep = executeEnum._420
                End Select


            Case executeEnum._300 'go to place standby position with offset
                Dim pointPlaceStandbyWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PLACE_STANDBY)
                offsetX = aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PLACE).TotalOffsetX
                offsetY = aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PLACE).TotalOffsetY
                offsetR = aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PLACE).TotalOffsetR
                With pointPlaceStandbyWithOffset
                    .X += offsetX
                    .Y += offsetY
                    .U += offsetR
                End With
                scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, pointPlaceStandbyWithOffset, scara.GetPoint(EnumScaraPoint.LIMZ))
                cStep = executeEnum._310

            Case executeEnum._310
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    '確定儀器上蓋已打開
                    If readBit(MeasurementCoverClosedBit) = False Then
                        cStep = executeEnum._320
                    ElseIf tmr.IsTimerTicked = True Then '發出報警，儀器上蓋未開，請確認
                        Dim ap As New alarmContentSensor With {.Sender = Me}
                        With ap
                            .Inputs = MeasurementCoverClosedBit
                            .PossibleResponse = alarmContextBase.responseWays.RETRY
                            .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
                            .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                         tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                                                                                         Return True
                                                                                     End Function
                            CentralAlarmObject.raisingAlarm(ap)
                        End With
                    End If
                End If
            Case executeEnum._320 'go to place position to put wafer in the measurement
                Dim pointPlaceWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PLACE)
                With pointPlaceWithOffset
                    .X += offsetX
                    .Y += offsetY
                    .U += offsetR
                End With
                scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, pointPlaceWithOffset)
                cStep = executeEnum._330
            Case executeEnum._330 'wait motion done and vacuum off
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, False)
                    writeBit(VacuumBreakBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.2)
                    cStep = executeEnum._340
                End If
            Case executeEnum._340 'vacuum break off
                If tmr.IsTimerTicked = True Then
                    writeBit(VacuumBreakBit, False)
                    Dim pointPlaceStandbyWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PLACE_STANDBY)
                    With pointPlaceStandbyWithOffset
                        .X += offsetX
                        .Y += offsetY
                        .U += offsetR
                    End With
                    scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, pointPlaceStandbyWithOffset)
                    cStep = executeEnum._350
                End If
            Case executeEnum._350 'back to place standby position
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    'send place done signal
                    RaiseEvent PutCompleteEvent(Me, Nothing)
                    flagRequestToLoadMeasurement.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    cStep = executeEnum._360
                End If
            Case executeEnum._360 'wait the measurement measure done
                If flagRequestToUnloadMeasurement.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                    Dim pointPlaceWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PLACE)
                    With pointPlaceWithOffset
                        .X += offsetX
                        .Y += offsetY
                        .U += offsetR
                    End With
                    scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, pointPlaceWithOffset)
                    cStep = executeEnum._370
                End If
            Case executeEnum._370  'pick the wafer from measurement
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                    cStep = executeEnum._380
                End If
            Case executeEnum._380 '吸取儀器wafer真空確認
                If readBit(VacuumSensorBit) = True Then
                    cStep = executeEnum._390
                ElseIf tmr.IsTimerTicked = True Then
                    Dim ap As New alarmContentSensor With {.Sender = Me}
                    With ap
                        .Inputs = VacuumSensorBit
                        .PossibleResponse = alarmContextBase.responseWays.RETRY Or alarmContextBase.responseWays.IGNORE
                        .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                        .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                     tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                                                                                     Return True
                                                                                 End Function
                        .CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                      systemSubState = executeEnum._380_vacuumFail_0
                                                                                      Return True
                                                                                  End Function
                        CentralAlarmObject.raisingAlarm(ap)
                    End With
                End If
            Case executeEnum._380_vacuumFail_0
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, EnumScaraPoint.PLACE_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    flagRequestToUnloadMeasurement.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    cStep = executeEnum._0
                End If
            Case executeEnum._390  'back to place standby position
                Dim pointWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PLACE_STANDBY)
                With pointWithOffset
                    .X += offsetX
                    .Y += offsetY
                    .U += offsetR
                End With
                scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, pointWithOffset)
                cStep = executeEnum._400
            Case executeEnum._400
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    'send signal that picked wafer from measurement done
                    flagRequestToUnloadMeasurement.resetFlag(interlockedFlag.POSITION_OCCUPIED) '通知儀器已取完
                    cStep = executeEnum._410
                End If
            Case executeEnum._410 'jump to the pick wafer position 
                Dim pointWithOffset As SCARA.compScaraBase.scaraPoint = scara.GetPoint(EnumScaraPoint.PICK)
                With pointWithOffset
                    .X += aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PICK).TotalOffsetX
                    .Y += aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PICK).TotalOffsetY
                    .U += aligner.targetObjectPointer.TargetPoseCollection(targetEnum.PICK).TotalOffsetR
                End With
                scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, pointWithOffset, scara.GetPoint(EnumScaraPoint.LIMZ))
                cStep = executeEnum._420
            Case executeEnum._420
                If scara.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, False)
                    writeBit(VacuumBreakBit, True)
                    writeBit(PickPositionVacuumBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.2)
                    cStep = executeEnum._430
                End If
            Case executeEnum._430
                If tmr.IsTimerTicked = True Then
                    writeBit(VacuumBreakBit, False)
                    cStep = executeEnum._440
                End If
            Case executeEnum._440
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, EnumScaraPoint.PICK_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    PickPositionInfo.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False) 'reset pick position module action to let tounge insert the wafer
                    cStep = executeEnum._110
                End If

            Case executeEnum.removeFirstWaferFromMeasurement_0 'remove first wafer from measurement
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.PLACE) = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                    cStep = executeEnum.removeWaferFromMeasurement_10
                End If
            Case executeEnum.removeWaferFromMeasurement_10 '吸取儀器殘料真空確認
                If readBit(VacuumSensorBit) = True Then
                    cStep = executeEnum.removeFirstWaferFromMeasurement_20
                ElseIf tmr.IsTimerTicked = True Then
                    Dim ap As New alarmContentSensor
                    With ap
                        .Sender = Me
                        .Inputs = VacuumSensorBit
                        .PossibleResponse = alarmContextBase.responseWays.RETRY Or alarmContextBase.responseWays.IGNORE
                        .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                        .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                     tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                                                                                     Return True
                                                                                 End Function
                        .CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                      systemSubState = executeEnum.removeFirstWaferFromMeasurement_10_vacuumFail
                                                                                      Return True
                                                                                  End Function
                        CentralAlarmObject.raisingAlarm(ap)
                    End With
                End If
            Case executeEnum.removeFirstWaferFromMeasurement_10_vacuumFail
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, EnumScaraPoint.PLACE_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    flagRequestToUnloadMeasurement.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    cStep = executeEnum.removeFirstWaferFromMeasurement_10_vacuumFail_10
                End If
            Case executeEnum.removeFirstWaferFromMeasurement_10_vacuumFail_10
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.PICK_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    cStep = executeEnum._0
                End If

            Case executeEnum.removeFirstWaferFromMeasurement_20
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.GO, EnumScaraPoint.PLACE_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    flagRequestToUnloadMeasurement.resetFlag(interlockedFlag.POSITION_OCCUPIED) '通知儀器已取完
                    cStep = executeEnum.removeFirstWaferFromMeasurement_30
                End If
            Case executeEnum.removeFirstWaferFromMeasurement_30 '將廢片取出至校正片的位置
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.CALIBRATION) = IDrivable.endStatus.EXECUTION_END Then
                    cStep = executeEnum.removeFirstWaferFromMeasurement_40
                End If
            Case executeEnum.removeFirstWaferFromMeasurement_40
                Dim ap As New alarmContextBase With {.Sender = Me}
                With ap
                    .PossibleResponse = alarmContextBase.responseWays.RETRY
                    .AdditionalInfo = "Robot已取出量測儀器內的殘料，請至放置校正片的位置取出!"
                    .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                 Return True
                                                                             End Function
                    CentralAlarmObject.raisingAlarm(ap)
                End With
                cStep = executeEnum._0 '回到初始狀態


            Case executeEnum.vacuumFailProcedure_0 'give up pick wafer procedure
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.PICK_STANDBY) = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, False)
                    cStep = executeEnum.vacuumFailProcedure_10
                End If
            Case executeEnum.vacuumFailProcedure_10
                PickPositionInfo.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
                PickPositionInfo.IsPositionOccupied = False
                cStep = executeEnum._0

            Case executeEnum._500
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, targetPoint) = IDrivable.endStatus.EXECUTION_END Then
                    '完成取片，再取像，找出影像物件
                    writeBit(VacuumBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                    cStep = executeEnum._510
                End If
            Case executeEnum._510
                If readBit(VacuumSensorBit) = True Then
                    cStep = executeEnum._520
                ElseIf tmr.IsTimerTicked = True Then
                    Dim ap As New alarmContentSensor With {.Sender = Me}
                    With ap
                        .Inputs = VacuumSensorBit
                        .PossibleResponse = alarmContextBase.responseWays.RETRY Or alarmContextBase.responseWays.IGNORE
                        .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                        .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                     tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 1) : tmr.IsEnabled = True
                                                                                     Return True
                                                                                 End Function
                        .CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                      systemSubState = executeEnum._510_vacuumFail
                                                                                      Return True
                                                                                  End Function
                        CentralAlarmObject.raisingAlarm(ap)
                    End With
                End If
            Case executeEnum._510_vacuumFail
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.HOME) = IDrivable.endStatus.EXECUTION_END Then
                    cStep = executeEnum._0
                End If
            Case executeEnum._520
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, EnumScaraPoint.ALIGNMENT) = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(LightOnBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.5) : tmr.IsEnabled = True
                    cStep = executeEnum._530
                End If
            Case executeEnum._530
                If tmr.IsTimerTicked = True Then
                    aligner.Find()
                    cStep = executeEnum._540
                End If
            Case executeEnum._540
                If aligner.FindStatus = VisionAlignment.clsVisionAlignment.ProcessResult.PROGRESS Then Return 0
                writeBit(LightOnBit, False)
                Select Case aligner.FindStatus
                    Case VisionAlignment.clsVisionAlignment.ProcessResult.SUCCESS
                        Dim i As Integer
                        Select Case targetPoint
                            Case EnumScaraPoint.PICK
                                i = 0
                            Case EnumScaraPoint.PLACE
                                i = 1
                            Case EnumScaraPoint.CALIBRATION
                                i = 2
                        End Select
                        aligner.targetObjectPointer.TargetPoseCollection(i).PixelX = aligner.CamContent.Camera.PatResult.dblCenterX
                        aligner.targetObjectPointer.TargetPoseCollection(i).PixelY = aligner.CamContent.Camera.PatResult.dblCenterY
                        aligner.targetObjectPointer.TargetPoseCollection(i).PixelR = aligner.CamContent.Camera.PatResult.dblAngle
                        SaveXmlFile(aligner.TargetObjectCollection, System.IO.Path.Combine(My.Application.Info.DirectoryPath, "Data", "TargetObjectCollection"))
                        MsgBox("Target(" & aligner.targetObjectPointer.sName & ") found!")
                        cStep = executeEnum._550
                    Case VisionAlignment.clsVisionAlignment.ProcessResult.FAIL
                        MsgBox("Cannot find the Target!")
                        cStep = executeEnum._550
                End Select
            Case executeEnum._550 '放到calibration去
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.JUMP, targetPoint) = IDrivable.endStatus.EXECUTION_END Then
                    writeBit(VacuumBit, False)
                    writeBit(VacuumBreakBit, True)
                    tmr.TimerGoal = New TimeSpan(TimeSpan.TicksPerSecond * 0.2) : tmr.IsEnabled = True
                    cStep = executeEnum._560
                End If
            Case executeEnum._560
                If tmr.IsTimerTicked = True Then
                    writeBit(VacuumBreakBit, False)
                    cStep = executeEnum._570
                End If
            Case executeEnum._570
                If scara.drive(Global.SCARA.compScaraBase.motorCommandEnum.HOME) = IDrivable.endStatus.EXECUTION_END Then
                    cStep = executeEnum._0
                End If
        End Select
        Return 0
    End Function
    Private Sub aligner_CalibrationSuccessEvent(sender As Object, e As EventArgs) Handles aligner.CalibrationSuccessEvent
        SaveXmlFile(aligner.CamContent.calibrationDataTemp, System.IO.Path.Combine(My.Application.Info.DirectoryPath, "Data", "CalibrationData.xml"))
        OpenXmlFile(aligner.CamContent.calibrationData, System.IO.Path.Combine(My.Application.Info.DirectoryPath, "Data", "CalibrationData.xml"))
    End Sub
End Class

