Imports AutoNumeric
Imports Automation
Imports MathNet.Numerics.LinearAlgebra
Imports Automation.Components.Services


''' <summary>
''' Offered the 
''' </summary>
''' <remarks></remarks>
Public Class cameraCalibrationBase
    Inherits measureProcedureType1Base

    ReadOnly Property IdealX As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.X
            Else
                Return 0
            End If
        End Get
    End Property
    ReadOnly Property IdealY As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.Y
            Else
                Return 0
            End If
        End Get
    End Property
    ReadOnly Property IdealZ As Double
        Get
            If idealPosition.Current IsNot Nothing Then
                Return idealPosition.Current.Z
            Else
                Return 0
            End If
        End Get
    End Property

    Protected ReadOnly Property Setting As cameraCalibrationSettingBase
        Get
            Return CType(__measureSetting, cameraCalibrationSettingBase)
        End Get
    End Property

    Protected idealPosition As List(Of PositionVector).Enumerator = Nothing

    Dim delayTimer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 100)}
    ''' <summary>
    ''' The detailed moving procedure
    ''' </summary>
    ''' <remarks></remarks>
    Protected Friend Overridable Sub moveAction()
        'move the smart pod
        Dim transformationBallToTarget = New htmEdgeElementary(framesDefinition.BALL, Setting.RealReference)
        With transformationBallToTarget
            'maintain the original orientation
            .RotationMatrix = frames.Instance.Transformation(framesDefinition.BALL, Setting.RealReference).RotationMatrix

            .PositionVector = idealPosition.Current.RawValue
        End With
        frames.Instance.solveS(transformationBallToTarget)
    End Sub
    ''' <summary>
    ''' Z value is simulated by previous pitch/roll
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Friend Overridable Function postHandlingAction(idealPosition As PositionVector, measuredPosition As PositionVector) As measuredDataPair
        Return New measuredDataPair(idealPosition.RawValue,
                                    measuredPosition.RawValue,
                                    AutoNumeric.utilities.selectionEnums.X Or
                                    AutoNumeric.utilities.selectionEnums.Y)
    End Function

    ''' <summary>
    ''' Ax go to netural position
    ''' c1,c2 to chuker , c3 to c3 origin
    ''' select referenced in Cn , P_c (nominal)
    ''' measure points generated by following parameters : X-pitch,X-times,Y-pitch,Y-times
    ''' calculate T_S_S0(fixed pose) , P_C =  T_S_C * P_S , translation = P_C[3:1] - R_S_C*P_S[3:1]
    ''' move smarpod
    ''' trigger camera to measure
    ''' output real position , and nomial position
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function measureProcedure(ByRef state As Integer) As Boolean
        With Setting

            Select Case state
                Case 0
                    idealPosition = .MeasurePoints.GetEnumerator
                    idealPosition.MoveNext() ' take first point
                    state = 10
                Case 10
                    'moving method
                    moveAction()
                    state = 20
                Case 20
                    If Assembly.Instance.IsAllAxesSettled Then
                        delayTimer.IsEnabled = True
                        state = 30
                    Else
                        '--------------
                        'axes action
                        '--------------
                    End If
                Case 30
                    If delayTimer.IsTimerTicked Then
                        '------------------
                        'Trigger the camera
                        '------------------
                        .ImageProcessSetting.onCameraTriggered()
                        state = 100
                    Else
                        '------------
                        '   Counting
                        '------------
                    End If
                Case 100
                    '-------------------
                    '   Camera done
                    '-------------------
                    If .ImageProcessSetting.IsImageProcessDone Then

                        If .ImageProcessSetting.Result = Cognex.VisionPro.CogToolResultConstants.Accept Then
                            '----------------------
                            '   Wait some call back
                            '----------------------
                            'camera task done
                            'pick the X,Y values only
                            dataPairCollection.Add(postHandlingAction(idealPosition.Current,
                                                                     New PositionVector(.ImageProcessSetting.Coordinates.First,
                                                                                        .RealReference)))
                        Else

                            '----------------
                            '   Skip this measure
                            '----------------
                            sendMessage(internalEnum.GENERIC_MESSAGE, String.Format("Image Process Failed At:{0}",
                                                                                   idealPosition.Current.RawValue.ToVectorString.Replace(vbCrLf, vbTab)))

                        End If

                        state = 500

                    Else
                        '-----------------
                        '   Camera working
                        '-----------------
                    End If

                Case 500
                    If idealPosition.MoveNext() Then
                        '-------------------------
                        '   Measure next one point
                        '-------------------------
                        state = 10 'rewind
                    Else
                        '----------------
                        '   All measure points had been done
                        '----------------
                        Return True
                    End If

            End Select
        End With

        Return False

    End Function
    ''' <summary>
    ''' Take gripper/c4 to initial position
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                sHtm.Instance.ControlVector = sHtm.Instance.SafePose.Clone
                mainIOHardware.writeBit(outputAddress.GRIP_VAC, True)
                state = 10
            Case 10
                If Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) =
                     IDrivable.endStatus.EXECUTION_END Then
                    state = 20
                End If
            Case 20
                'go there to loading gripper
                With frames.Instance
                    .CurrentMovingItem = framesDefinition.S0
                    .CurrentRItem = itemsDefinition.C3_ORIGIN
                    state = 30
                End With
            Case 30
                With Assembly.Instance
                    If .IsAllAxesSettled Then

                        With frames.Instance
                            'the preparation sequences
                            .solveAbsAxAy(.Transformation(Setting.RealReference, framesDefinition.R).Origin,framesDefinition.S0)
                        End With

                        'reminder
                        Assembly.Instance.alarmPackGripperMount.Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                        CentralAlarmObject.raisingAlarm(Assembly.Instance.alarmPackGripperMount)

                        state = 100
                    Else
                        '-------------------------
                        '   Axis Settling
                        '-------------------------
                    End If
                End With
            Case 100
                Return Assembly.Instance.IsAllAxesSettled
        End Select

        Return False
    End Function
    ''' <summary>
    ''' Raise smarpod
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function abortProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                sHtm.Instance.ControlVector = sHtm.Instance.SafePose.Clone
                state = 10
            Case 10
                Return Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) =
                    IDrivable.endStatus.EXECUTION_END
        End Select

        Return False

    End Function

    Public Sub New(idealCameraFrame As framesDefinition,
                   realCameraFrame As framesDefinition)

        MyBase.New(compenstationMethodEnums.AS_OBSERVER,
                   New cameraCalibrationSettingRectangle(realCameraFrame, idealCameraFrame),
                   frames.Instance.Elementray(realCameraFrame, idealCameraFrame)) 'would be selected by CurrentTarget

    End Sub
End Class
