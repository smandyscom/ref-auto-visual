Imports MathNet.Numerics.LinearAlgebra
Imports AutoNumeric
Imports Automation
Imports Cognex.VisionPro.ToolBlock
Imports Cognex.VisionPro

Imports System.Xml.Serialization
Imports System.IO


Public Class imageProcessEndEventArgs
    Inherits EventArgs

    ReadOnly Property OutputPosition As Vector(Of Double)
        Get
            'TODO, handling process
            Return CreateVector.Dense(Of Double)(3)
        End Get
    End Property
    ReadOnly Property Result As CogToolResultConstants
        Get
            Return __result.Result
        End Get
    End Property

    Dim __outputPosition As CogToolBlockTerminalCollection = Nothing
    Dim __result As ICogRunStatus = Nothing

    Sub New(ByVal outputPosition As CogToolBlockTerminalCollection,
            result As ICogRunStatus)
        Me.__outputPosition = outputPosition
        Me.__result = result
    End Sub

End Class

''' <summary>
''' Used to trigger camera
''' </summary>
''' <remarks></remarks>
Public Class imageProcessTriggerEventArgs
    Inherits EventArgs

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Event ImageProcessDone(ByVal sender As Object, ByVal e As EventArgs)

    ''' <summary>
    ''' The cognex tool block object
    ''' Contains some specific image process flow
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    ReadOnly Property ToolBlock As CogToolBlock
        Get
            Return __toolBlock
        End Get
    End Property

    Dim WithEvents __toolBlock As CogToolBlock = Nothing

    Sub New(__toolBlock As CogToolBlock)
        Me.__toolBlock = __toolBlock
    End Sub

    ''' <summary>
    ''' Regular the interface
    ''' </summary>
    ''' <remarks></remarks>
    Protected Sub toolBlockExecuted(sender As Object, e As EventArgs) Handles __toolBlock.Ran

        With __toolBlock
            RaiseEvent ImageProcessDone(Me, New imageProcessEndEventArgs(.Outputs,
                                                                         .RunStatus))

        End With

    End Sub

    ''' <summary>
    ''' Mount on source event
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Public Shared Sub toolBlockExecute(sender As Object, e As imageProcessTriggerEventArgs)
        '------------------
        '   Initiate Runing
        '------------------
        e.ToolBlock.Run()
    End Sub


End Class


''' <summary>
''' Loading only
''' </summary>
''' <remarks></remarks>
Public Class imageProcessSettingBlock
    Inherits settingBase

#Region "persistance interface"
    Shared vppPath As String = My.Application.Info.DirectoryPath & "\Data\vpps\"
    Public Overrides Property Filename As String
        Get
            If Not Directory.Exists(vppPath) Then
                Directory.CreateDirectory(vppPath)
            End If
            Return String.Format("{0}{1}.vpp",
                                 vppPath,
                                 Me.ToString)
        End Get
        Set(value As String)

        End Set
    End Property
#End Region


    ReadOnly Property ToolBlock As CogToolBlock
        Get
            Return __toolBlock
        End Get
    End Property
    Dim __toolBlock As CogToolBlock = Nothing

    ''' <summary>
    ''' In percentage representation
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property LightDensity As Double = 1.0F
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Sub reloadVppObject(sender As Object, e As EventArgs) Handles Me.PropertyChanged
        'Load cog block
        __toolBlock = TryCast(CogSerializer.LoadObjectFromFile(Me.Filename), CogToolBlock)
        If __toolBlock Is Nothing Then
            MessageBox.Show(String.Format("vpp loading failed, {0}",
                                           Me.Filename))
        End If
    End Sub

    Sub New(Optional tag As Object = "calibration")
        Me.tag = tag
    End Sub
    ''' <summary>
    ''' For loading use
    ''' </summary>
    ''' <remarks></remarks>
    Protected Sub New()

    End Sub

    Dim tag As Object = "calibration"
    Public Overrides Function ToString() As String
        Return String.Format("{0}",
                             tag)
    End Function
End Class