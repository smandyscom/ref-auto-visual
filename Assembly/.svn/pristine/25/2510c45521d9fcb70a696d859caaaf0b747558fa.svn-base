Imports MathNet.Numerics.LinearAlgebra
Imports AutoNumeric

Imports AutoNumeric.fittingMethods.coeffsDefinition

Public Enum independentsDefine As Integer
    X = 0
    Y = 1
End Enum
Public Enum dependentsDefine As Integer
    VOLTAGE_LEFT = 2
    VOLTAGE_RIGHT = 3
End Enum

''' <summary>
''' The bonded material data , going to report
''' </summary>
''' <remarks></remarks>
Public Class materialData

    'image
    'intensity

    'raw dry/wet

    'peak value
    'width

    'eproxy diameter/position

    Public rawDatas As Dictionary(Of framesDefinition, List(Of Vector(Of Double))) =
        New Dictionary(Of framesDefinition, List(Of Vector(Of Double)))

    Dim profiles As Dictionary(Of framesDefinition, List(Of Vector(Of Double))) =
        New Dictionary(Of framesDefinition, List(Of Vector(Of Double)))


    Function getParabolicCoefficient(rawData As List(Of Vector(Of Double)),
                                   chosenIndependent As independentsDefine,
                                   chosenDependent As dependentsDefine) As Vector(Of Double)

        Dim chosenPair As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))

        For index = 0 To rawData.Count - 1
            chosenPair.Add(CreateVector.Dense(Of Double)({rawData(index).Item(chosenIndependent),
                                                          rawData(index).Item(chosenDependent)}))
        Next


        Return AutoNumeric.fittingMethods.data2DFitting(chosenPair, fittingMethods.fitting2DMethodsEnum.PARABOLIC)

    End Function

End Class


''' <summary>
''' Given raw data 
''' Output:
''' 1. parabolic profiles
''' 2. peak values ( left/right)
''' </summary>
''' <remarks></remarks>
Public Class scanningData

    ''' <summary>
    ''' Mixed two channel
    ''' </summary>
    ''' <remarks></remarks>
    Dim rawData As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))
    Dim channelRawData As Dictionary(Of dependentsDefine, List(Of Vector(Of Double))) =
        New Dictionary(Of dependentsDefine, List(Of Vector(Of Double)))
    Dim __channelProfile As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))

    ''' <summary>
    ''' Calculated from parablic coefficient
    ''' </summary>
    ''' <remarks></remarks>
    Dim profilePeakValues As Dictionary(Of dependentsDefine, Double) =
        New Dictionary(Of dependentsDefine, Double)
    ''' <summary>
    ''' The real value detected by sensor
    ''' </summary>
    ''' <remarks></remarks>
    Dim detectedPeakValues As Dictionary(Of dependentsDefine, Double) =
        New Dictionary(Of dependentsDefine, Double)

    Dim __isHandled As Boolean = False
    Dim __isPeakWithinRange As Boolean = False

    ''' <summary>
    ''' the distance between -x/+x in value of -3db peak value
    ''' </summary>
    ''' <remarks></remarks>
    Dim __beamWidth As Dictionary(Of dependentsDefine, Double) =
        New Dictionary(Of dependentsDefine, Double)


    Function getParabolicCoefficient(chosenIndependent As independentsDefine,
                                     chosenDependent As dependentsDefine) As Vector(Of Double)

        Dim chosenPair As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))

        For index = 0 To rawData.Count - 1
            chosenPair.Add(CreateVector.Dense(Of Double)({rawData(index).Item(chosenIndependent),
                                                          rawData(index).Item(chosenDependent)}))
        Next


        Return AutoNumeric.fittingMethods.data2DFitting(chosenPair, fittingMethods.fitting2DMethodsEnum.PARABOLIC)

    End Function


    Sub New(__rawData As List(Of Vector(Of Double)))
        Me.rawData = __rawData

        '-----------------
        '   Data Handling
        '-----------------
        Dim coeff As Vector(Of Double) = Nothing
        For Each channel As dependentsDefine In {dependentsDefine.VOLTAGE_LEFT,
                                                 dependentsDefine.VOLTAGE_RIGHT}

            For Each direction As independentsDefine In {independentsDefine.X,
                                                         independentsDefine.Y}
                __channelProfile.Add(getParabolicCoefficient(direction,
                                                       channel))
                coeff = getParabolicCoefficient(direction, channel)
            Next



            '--------------------
            '   Find out real peak
            '--------------------
            detectedPeakValues(channel) =
                rawData.Max(Function(data As Vector(Of Double)) data(channel))
            'TODO , logic value
            profilePeakValues(dependentsDefine.VOLTAGE_LEFT) = fittingMethods.parabolicMaximum(coeff)

            'verify
            ' the peak value is happened within searching range
            'solve corresponding X/Y , check if X/Y is in the scanning range

            'calculate beam width

        Next



    End Sub

End Class


Public Class channelData

    Property Profile As Vector(Of Double)
        Get
            Return __profile
        End Get
        Set(value As Vector(Of Double))
            __profile = value

            peakCoordinate = CreateVector.Dense(Of Double)({-__profile(B) / (2 * __profile(A)),
                                                            -__profile(E) / (2 * __profile(D))})
        End Set
    End Property

    ''' <summary>
    ''' 0: X
    ''' 1: Y
    ''' 2: VOLTAGE
    ''' </summary>
    ''' <remarks></remarks>
    Dim rawData As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))
    Dim rangeX As Vector(Of Double) = Nothing
    Dim rangeY As Vector(Of Double) = Nothing


    ''' <summary>
    ''' 6x1 vector
    ''' ax^2 + bx + cy^2 + dy + ez + f = 0
    ''' </summary>
    ''' <remarks></remarks>
    Dim __profile As Vector(Of Double) = Nothing
    Dim peakValueDetected As Double = Nothing
    Dim peakValueFitted As Double = Nothing

    Dim peakCoordinate As Vector(Of Double) = Nothing

    Dim __isProfileAccepted As Boolean = False

    Sub New()

        '--------------
        '
        '--------------
        rangeX = CreateVector.Dense(Of Double)({rawData.Min(Function(data As Vector(Of Double)) data.First),
                                                rawData.Max(Function(data As Vector(Of Double)) data.First)})
        rangeY = CreateVector.Dense(Of Double)({rawData.Min(Function(data As Vector(Of Double)) data.Last),
                                                rawData.Max(Function(data As Vector(Of Double)) data.Last)})


        __profile = fittingMethods.data3DFitting(rawData, fittingMethods.fitting3DMethodsEnum.DOUBLE_PARABOLA)

        '--------------------
        '   Find out real peak
        '--------------------
        peakValueDetected =
            rawData.Max(Function(data As Vector(Of Double)) data.Last)
        peakValueFitted = fittingMethods.data3D(peakCoordinate.First,
                                                peakCoordinate.Last,
                                                __profile)

        'verify
        ' the peak value is happened within searching range
        'solve corresponding X/Y , check if X/Y is in the scanning range
        __isProfileAccepted = peakCoordinate.First >= rangeX.First And
            peakCoordinate.First <= rangeX.Last And
            peakCoordinate.Last >= rangeY.First And
            peakCoordinate.Last <= rangeY.Last


        'calculate beam width
        'solve x1,x2,y1,y2 on -3db peak value

    End Sub

End Class