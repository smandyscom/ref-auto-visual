Imports Automation
Imports AutoNumeric
Imports Automation.Components
Imports Automation.Components.Services
Imports Automation.Components.CommandStateMachine
Imports System.IO.Ports
Public Enum commandList
    CONN '連接設備
    DCON '斷開設備
    LOC '鎖定前面板
    RUN '運行定時曝光
    OPN '打開檔板
    CLS '關閉檔板
    TON '打開燈泡
    TOF '關閉燈泡
    GIL '獲取光圈等級
    GTM '獲取曝光時間
    SIL '設置光圈等級n%, 0<n<=100
    STM '設置曝光時間n/10秒, 2<=n<=9999
    GUS '獲取設備狀況
End Enum
Public Enum ResponseList
    ''''Common Response''''
    READY = 130 '準備就緒
    CLOSED = 131 '已閉合
    Received = 132 '收到
    Invalid = 133 '無效
    EXP = 134 '正在運行曝光
    Err = 135 '錯誤
    ''''GUS Response''''
    BULBOFF = 32 '燈泡關閉
    BULBNOTREADY = 34 '尚未準備好
    BULBREADY = 50 '準備好
    EXPOSURE = 54 '曝光中
End Enum
Enum Setting As Integer
    COM = 1
    BaudRate = 19200
    DataBits = 8
End Enum

Public Class uvCure
    Inherits systemControlPrototype
    Implements IProcedure

    Private enc As New System.Text.ASCIIEncoding()

    Dim WithEvents omni As SerialPort = New System.IO.Ports.SerialPort("COM" & Convert.ToString(Setting.COM),
                               Setting.BaudRate,
                                Parity.None,
                                Setting.DataBits,
                                StopBits.One)

    Dim __inputIntensity() As Integer = {30, 50}
    Dim IrisLevel As Integer = __inputIntensity(0)
    Dim ExposureTime As Integer = __inputIntensity(1)
    Friend __data As String = Nothing
    Public __todoturnOFF As New flagController(Of interlockedFlag)
    'Dim systemSubstate As Integer = 0 '測試用
    Sub sendRequest(command As commandList)
        If command.ToString.Equals(commandList.SIL.ToString) Then
            omni.Write(crc8(command.ToString & IrisLevel.ToString) + Chr(13))
        ElseIf command.ToString.Equals(commandList.STM.ToString) Then
            omni.Write(crc8(command.ToString & ExposureTime.ToString) + Chr(13))
        Else
            omni.Write(crc8(command.ToString) + Chr(13))
        End If
        __data = Nothing ' reset
    End Sub
    Dim __timer As singleTimer = New singleTimer() With
        {.TimerGoal = New TimeSpan(0, 0, 5), .IsEnabled = True}
    Sub timerON(sec As Integer)
        __timer.TimerGoal = New TimeSpan(0, 0, sec)
        __timer.resetTimer()
        __timer.IsEnabled = True
    End Sub
    Sub timeOUT()
        If __timer.IsTimerTicked Then
            sendMessage(statusEnum.GENERIC_MESSAGE, "OmniCure回應時間過長")
            systemSubState = 0
        End If
    End Sub
    Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initMappingAndSetup))
        __todoturnOFF.resetFlag(interlockedFlag.POSITION_OCCUPIED)
    End Sub

    Function initMappingAndSetup() As Integer '本站主狀態函式設定
        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE
        Return 0
    End Function
#Region "GUS List"
    '             0     1
    '0 報警       OFF   ON   
    '1 燈泡       OFF   ON
    '2 檔板       打開  閉合
    '3 原點       通過  故障
    '4 燈泡準備好  NO   YES
    '5 鎖定       OFF   ON
    '6 是否校準    NO   YES
    '7 曝光故障    NO   YES
#End Region
    Public Function stateIgnite()
        Select Case systemSubState
            Case 0
                systemSubState = 10
            Case 10 '開啟serialport連線
                If Not omni.IsOpen Then
                    omni.Open()
                End If
                systemSubState = 12
            Case 12 '連線至omnicure
                sendRequest(commandList.CONN)
                timerON(5)
                systemSubState = 15
            Case 15
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.READY.ToString) Then
                        systemSubState = 16
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 16 '鎖定前面板
                sendRequest(commandList.LOC)
                timerON(5)
                systemSubState = 17
            Case 17
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemSubState = 18
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 18 '開啟燈泡
                sendRequest(commandList.TON)
                timerON(5)
                systemSubState = 20
            Case 20
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemSubState = 22
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 22 '關閉檔板
                sendRequest(commandList.CLS)
                timerON(5)
                systemSubState = 24
            Case 24
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemSubState = 27
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 27 '取得設備狀況
                sendRequest(commandList.GUS)
                timerON(5)
                systemSubState = 28
            Case 28
                If __data IsNot Nothing Then
                    If __data.Equals(CType([Enum].Parse(GetType(ResponseList), ResponseList.BULBREADY.ToString()), String)) Then
                        systemSubState = 30
                    ElseIf __data.Equals(CType([Enum].Parse(GetType(ResponseList), ResponseList.BULBNOTREADY.ToString()), String)) Then
                        '燈泡加熱中
                        systemSubState = 27
                    ElseIf __data.Equals(CType([Enum].Parse(GetType(ResponseList), ResponseList.BULBOFF.ToString()), String)) Then
                        '尚未連線或燈泡關閉
                        systemSubState = 0
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    Else
                        sendMessage(statusEnum.GENERIC_MESSAGE, "額外狀況為:GUS" & __data)
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 30 '設定光圈強度
                sendRequest(commandList.SIL)
                timerON(5)
                systemSubState = 35
            Case 35
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemSubState = 40
                    ElseIf __data.Equals(ResponseList.Invalid.ToString) Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, "光圈強度值超出範圍")
                        systemSubState = 0
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 40 '設定曝光時間
                sendRequest(commandList.STM)
                timerON(5)
                systemSubState = 45
            Case 45
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemMainState = systemStatesEnum.EXECUTE
                        systemSubState = 0
                    ElseIf __data.Equals(ResponseList.Invalid.ToString) Then
                        sendMessage(statusEnum.GENERIC_MESSAGE, "曝光時間超出範圍")
                        systemSubState = 0
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
        End Select
        Return 0
    End Function
    Public Function stateExecute()
        Select Case systemSubState
            Case 0 '運行定時曝光
                If __todoturnOFF.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    If IsProcedureStarted.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                        'If True Then '測試用
                        sendRequest(commandList.RUN)
                        timerON(5)
                        systemSubState = 10
                    Else
                        'continuing
                    End If
                Else '關閉燈泡
                    sendRequest(commandList.TOF)
                    timerON(5)
                    systemSubState = 40
                End If
            Case 10
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        systemSubState = 15
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 15
                sendRequest(commandList.GUS)
                timerON(5)
                systemSubState = 20
            Case 20
                If __data IsNot Nothing Then
                    If __data.Equals(CType([Enum].Parse(GetType(ResponseList), ResponseList.BULBREADY.ToString()), String)) Then
                        IsProcedureStarted.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                        Result = IProcedure.procedureResultEnums.SUCCESS
                        systemSubState = 0
                    ElseIf __data.Equals(CType([Enum].Parse(GetType(ResponseList), ResponseList.EXPOSURE.ToString()), String)) Then
                        '曝光中
                        systemSubState = 15
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    Else
                        sendMessage(statusEnum.GENERIC_MESSAGE, "額外狀況為:GUS" & __data)
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
            Case 40
                If __data IsNot Nothing Then
                    If __data.Equals(ResponseList.Received.ToString) Then
                        __todoturnOFF.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                        sendMessage(statusEnum.GENERIC_MESSAGE, "已關閉燈泡")
                    ElseIf __data.Equals(ResponseList.Err.ToString) Then
                        systemSubState = 0
                    End If
                Else
                    timeOUT()
                End If
        End Select
        Return 0
    End Function
#Region "CRC8 transfer"
    Private Function crc8(str As String) As String
        Dim bData() As Byte = enc.GetBytes(str)
        Dim crc_Temp As Byte
        Dim crc_Index As Byte
        Dim i As Long
        Dim toHex As String
        crc_Temp = 0
        For i = 0 To bData.Length - 1
            crc_Index = crc_Temp Xor bData(i)
            crc_Temp = getCRC8(crc_Index)
        Next
        toHex = String.Format("{0:X}", Convert.ToInt32(crc_Temp))
        If toHex.Length = 1 Then
            Return str & "0" & toHex
        Else
            Return str & String.Format("{0:X}", Convert.ToInt32(crc_Temp))
        End If
    End Function
    Private Function getCRC8(Index As Byte) As Byte
        getCRC8 = Choose(Index + 1,
        &H0, &H5E, &HBC, &HE2, &H61, &H3F, &HDD, &H83, &HC2, &H9C, &H7E, &H20, &HA3, &HFD, &H1F, &H41,
        &H9D, &HC3, &H21, &H7F, &HFC, &HA2, &H40, &H1E, &H5F, &H1, &HE3, &HBD, &H3E, &H60, &H82, &HDC,
        &H23, &H7D, &H9F, &HC1, &H42, &H1C, &HFE, &HA0, &HE1, &HBF, &H5D, &H3, &H80, &HDE, &H3C, &H62,
        &HBE, &HE0, &H2, &H5C, &HDF, &H81, &H63, &H3D, &H7C, &H22, &HC0, &H9E, &H1D, &H43, &HA1, &HFF,
        &H46, &H18, &HFA, &HA4, &H27, &H79, &H9B, &HC5, &H84, &HDA, &H38, &H66, &HE5, &HBB, &H59, &H7,
        &HDB, &H85, &H67, &H39, &HBA, &HE4, &H6, &H58, &H19, &H47, &HA5, &HFB, &H78, &H26, &HC4, &H9A,
        &H65, &H3B, &HD9, &H87, &H4, &H5A, &HB8, &HE6, &HA7, &HF9, &H1B, &H45, &HC6, &H98, &H7A, &H24,
        &HF8, &HA6, &H44, &H1A, &H99, &HC7, &H25, &H7B, &H3A, &H64, &H86, &HD8, &H5B, &H5, &HE7, &HB9,
        &H8C, &HD2, &H30, &H6E, &HED, &HB3, &H51, &HF, &H4E, &H10, &HF2, &HAC, &H2F, &H71, &H93, &HCD,
        &H11, &H4F, &HAD, &HF3, &H70, &H2E, &HCC, &H92, &HD3, &H8D, &H6F, &H31, &HB2, &HEC, &HE, &H50,
        &HAF, &HF1, &H13, &H4D, &HCE, &H90, &H72, &H2C, &H6D, &H33, &HD1, &H8F, &HC, &H52, &HB0, &HEE,
        &H32, &H6C, &H8E, &HD0, &H53, &HD, &HEF, &HB1, &HF0, &HAE, &H4C, &H12, &H91, &HCF, &H2D, &H73,
        &HCA, &H94, &H76, &H28, &HAB, &HF5, &H17, &H49, &H8, &H56, &HB4, &HEA, &H69, &H37, &HD5, &H8B,
        &H57, &H9, &HEB, &HB5, &H36, &H68, &H8A, &HD4, &H95, &HCB, &H29, &H77, &HF4, &HAA, &H48, &H16,
        &HE9, &HB7, &H55, &HB, &H88, &HD6, &H34, &H6A, &H2B, &H75, &H97, &HC9, &H4A, &H14, &HF6, &HA8,
        &H74, &H2A, &HC8, &H96, &H15, &H4B, &HA9, &HF7, &HB6, &HE8, &HA, &H54, &HD7, &H89, &H6B, &H35)
    End Function
#End Region
    ''' <summary>
    ''' Raised by back-ground thread
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Sub dataReceived(sender As Object, e As System.IO.Ports.SerialDataReceivedEventArgs) Handles omni.DataReceived
        Dim getdata As String = CType(sender, SerialPort).ReadTo(Chr(13))
        __data = Strings.Left(getdata, Len(getdata) - 2)
    End Sub
    ''' <summary>
    ''' {SIL (percentage),STM (1/10 second) }
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property Arguments As Object Implements IProcedure.Arguments
        Get
            Return True
        End Get
        Set(value As Object)
            __inputIntensity = value
        End Set
    End Property
    Public Property IsProcedureStarted As New flagController(Of interlockedFlag) Implements IProcedure.IsProcedureStarted
    Public Property Result As IProcedure.procedureResultEnums Implements IProcedure.Result


End Class
