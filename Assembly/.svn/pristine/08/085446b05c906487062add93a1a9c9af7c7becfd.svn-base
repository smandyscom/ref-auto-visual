Imports AutoNumeric
Imports Automation
Imports MathNet.Numerics.LinearAlgebra
Imports System.IO
Imports System.Linq

''' <summary>
''' The camera calibration usage data structrue
''' For C1,C2,C3
''' </summary>
''' <remarks></remarks>
Public Class c1c2c3
    Inherits cameraCalibrationBase

    Property CenterX As Double
        Get
            Return CurrentTarget.centerPosition.X
        End Get
        Set(value As Double)
            CurrentTarget.centerPosition.X = value
        End Set
    End Property
    Property CenterY As Double
        Get
            Return CurrentTarget.centerPosition.Y
        End Get
        Set(value As Double)
            CurrentTarget.centerPosition.Y = value
        End Set
    End Property
    
    Property Radius As Double
        Get
            Return CurrentTarget.Radius
        End Get
        Set(value As Double)
            CurrentTarget.Radius = value
        End Set
    End Property

    Property CurrentCalibration As framesDefinition
        Get
            Return CurrentTarget.RealReference
        End Get
        Set(value As framesDefinition)
            CurrentTarget = measureSettingDictionary(value)
        End Set
    End Property

    'Ax go to netural position
    'c1,c2 to chuker , c3 to c3 origin
    'select referenced in Cn , P_c (nominal)
    'measure points generated by following parameters : X-pitch,X-times,Y-pitch,Y-times
    'calculate T_S_S0(fixed pose) , P_C =  T_S_C * P_S , translation = P_C[3:1] - R_S_C*P_S[3:1]
    'move smarpod
    'trigger camera to measure
    'output real position , and nomial position
    Dim measureSettingDictionary As Dictionary(Of framesDefinition, cameraCalibrationSettingBase) =
        New Dictionary(Of framesDefinition, cameraCalibrationSettingBase)

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Function preparationProcedure(ByRef state As Integer) As Boolean
        Select Case state
            Case 0
                With frames.Instance
                    'the preparation sequences
                    .CurrentMovingItem = framesDefinition.S0
                    Select Case CurrentTarget.RealReference
                        Case framesDefinition.C1REAL
                            .CurrentRItem = itemsDefinition.C1_ORIGIN
                        Case framesDefinition.C2REAL
                            .CurrentRItem = itemsDefinition.C2_ORIGIN
                        Case framesDefinition.C3REAL
                            .CurrentRItem = itemsDefinition.C3_ORIGIN
                    End Select
                    state = 10
                End With
            Case 10
                '-----------------------
                '   End when XYZ settled
                '-----------------------
                If Assembly.Instance.IsAllAxesSettled Then
                    sHtm.Instance.AxisValue(axisEntityEnum.Z) = -5
                    state = 100
                Else
                    '---------------------
                    '
                    '---------------------
                End If
            Case 100
                Return Assembly.Instance.CommandEndStatus(controlUnitsEnum.S) = IDrivable.endStatus.EXECUTION_END
        End Select
        Return False
    End Function


#Region "singleton interface"
    ''' <summary>
    ''' Singalton pattern
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared ReadOnly Property Instance As c1c2c3
        Get
            If __instance Is Nothing Then
                __instance = New c1c2c3
            End If
            Return __instance
        End Get
    End Property
    Shared __instance As c1c2c3 = Nothing
#End Region

    Protected Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                           New Func(Of Integer)(AddressOf initMappingAndSetup))
    End Sub
    Function initMappingAndSetup() As Integer
        '------------------------
        '   Loading Setting Files
        '------------------------
        With measureSettingDictionary
            .Add(framesDefinition.C1REAL, New cameraCalibrationSettingBase(framesDefinition.C1REAL, framesDefinition.C1))
            .Add(framesDefinition.C2REAL, New cameraCalibrationSettingBase(framesDefinition.C2REAL, framesDefinition.C2))
            .Add(framesDefinition.C3REAL, New cameraCalibrationSettingBase(framesDefinition.C3REAL, framesDefinition.C3))

            For Each item As cameraCalibrationSettingBase In .Values
                item.Load(Nothing)
            Next

        End With

        CurrentCalibration = framesDefinition.C1REAL

        Return 0
    End Function

    Public Overrides Sub moveAction()
        'move the smart pod
        Dim transformationBallToTarget = New htmEdgeElementary(framesDefinition.BALL, CurrentTarget.RealReference)
        With transformationBallToTarget
            'maintain the original orientation
            .RotationMatrix = frames.Instance.Transformation(framesDefinition.BALL, CurrentTarget.RealReference).RotationMatrix
            .PositionVector = nominalPosition.Current.RawValue
        End With
        frames.Instance.solveS(transformationBallToTarget)
    End Sub

    Public Overrides Sub settingSaveAction()
        For Each item As cameraCalibrationSettingBase In measureSettingDictionary.Values
            item.Save()
        Next
    End Sub
End Class
