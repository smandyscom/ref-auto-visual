Imports MathNet.Numerics.LinearAlgebra
Imports MathNet.Spatial.Euclidean
Imports MathNet.Numerics.Data.Text
Imports Automation
Imports System.IO

Public Enum frameVectorEnum As Integer
    VX = 0
    VY = 1
    VZ = 2
    ''' <summary>
    ''' The Position Vector
    ''' </summary>
    ''' <remarks></remarks>
    P = 3
End Enum

Public MustInherit Class htmEdgeBase

    MustOverride ReadOnly Property RawValue As Matrix(Of Double)
    MustOverride ReadOnly Property Value As htmEdgeBase
    ''' <summary>
    ''' give a inverse
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    MustOverride ReadOnly Property Inverse As htmEdgeBase
    ReadOnly Property From As [Enum]
        Get
            Return __from
        End Get
    End Property
    ReadOnly Property To__ As [Enum]
        Get
            Return __to
        End Get
    End Property

    Protected __from As [Enum] = Nothing
    Protected __to As [Enum] = Nothing

    ''' <summary>
    ''' 3x3 Matrix
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Overridable Property RotationMatrix As Matrix(Of Double)
        Get
            Return RawValue.SubMatrix(0, 3, 0, 3)
        End Get
        Set(value As Matrix(Of Double))
            'update only for elementray
            Throw New NotImplementedException
        End Set
    End Property

    ''' <summary>
    ''' 4x1 Vector
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property PositionVector As Vector(Of Double)
        Get
            Return FrameVector(frameVectorEnum.P)
        End Get
        Set(ByVal value As Vector(Of Double))
            'update
            FrameVector(frameVectorEnum.P) = value
        End Set
    End Property

    ''' <summary>
    ''' 4x1 Vector
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property Origin As PositionVector
        Get
            Return New PositionVector(PositionVector, Me.__from)
        End Get
        Set(ByVal value As PositionVector)
            'update
            FrameVector(frameVectorEnum.P) = value.RawValue
        End Set
    End Property


    ''' <summary>
    ''' 4x1 Vector
    ''' </summary>
    ''' <param name="axis"></param>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Overridable Property FrameVector(axis As frameVectorEnum) As Vector(Of Double)
        Get
            Return RawValue.Column(axis)
        End Get
        Set(value As Vector(Of Double))
            'update
        End Set
    End Property


    Public Overrides Function ToString() As String
        Return String.Format("T_{0}_{1}",
                             __from,
                             __to)
    End Function

    ''' <summary>
    ''' Define matrix multiplication
    ''' </summary>
    ''' <param name="left"></param>
    ''' <param name="right"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared Operator *(ByVal left As htmEdgeBase, right As htmEdgeBase) As htmEdgeBase
        Return New htmEdgeElementary(left.RawValue * right.RawValue,
                                     right.__from,
                                     left.__to)
    End Operator

    ' ''' <summary>
    ' ''' Complete frameVector by cross product
    ' ''' </summary>
    ' ''' <remarks></remarks>
    'Public Sub CompleteFrameVector(__vector As frameVectorEnum)
    '    'Dim __vectorX As Vector3D
    '    '__vectorX.CrossProduct()
    'End Sub

End Class

''' <summary>
''' Decorator of Matrix(of Double) 
''' Has edge property , depict T_from_to
''' </summary>
''' <remarks></remarks>
Public Class htmEdgeElementary
    Inherits htmEdgeBase
    Implements IPersistance


    Public Overrides ReadOnly Property Inverse As htmEdgeBase
        Get
            Return New htmEdgeElementary(Me.RawValue.Inverse,
                                         Me.__to,
                                         Me.__from)
        End Get
    End Property

    Public Overrides ReadOnly Property RawValue As Matrix(Of Double)
        Get
            Return __matrixCore
        End Get
    End Property

    Public Overrides ReadOnly Property Value As htmEdgeBase
        Get
            Return Me
        End Get
    End Property
    ''' <summary>
    ''' Given a 3x3 matrix
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Property RotationMatrix As Matrix(Of Double)
        Get
            Return MyBase.RotationMatrix
        End Get
        Set(value As Matrix(Of Double))
            'For rowIndex = 0 To value.RowCount - 1
            '    For columnIndex = 0 To value.ColumnCount - 1
            '        __matrixCore(rowIndex, columnIndex) = value(rowIndex, columnIndex)
            '    Next
            'Next
            __matrixCore.SetSubMatrix(0, value.RowCount, 0, value.ColumnCount, value)
        End Set
    End Property
    ''' <summary>
    ''' Given a 4x1 column vector
    ''' </summary>
    ''' <param name="axis"></param>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Property FrameVector(axis As frameVectorEnum) As Vector(Of Double)
        Get
            Return MyBase.FrameVector(axis)
        End Get
        Set(value As Vector(Of Double))
            'For rowIndex = 0 To __matrixCore.RowCount - 1
            '    __matrixCore(rowIndex, axis) = value(rowIndex)
            'Next
            __matrixCore.SetSubMatrix(0, value.Count, axis, 1, value.ToColumnMatrix)
        End Set
    End Property
    ReadOnly Property Tag As Object
        Get
            Return __tag
        End Get
    End Property
    Dim __tag As Object = Nothing

    Protected __matrixCore As Matrix(Of Double) = Nothing

    Sub New(__matrixCore As Matrix(Of Double),
            __from As [Enum],
            __to As [Enum],
            Optional tag As Object = Nothing)

        Me.__matrixCore = __matrixCore
        Me.__from = __from
        Me.__to = __to

        Me.__tag = tag
    End Sub
    Sub New(__from As [Enum],
            __to As [Enum],
            Optional tag As Object = Nothing)
        Me.New(CreateMatrix.DenseIdentity(Of Double)(4),
                   __from,
                   __to,
                   tag)        'create eye(4)
    End Sub

#Region "persistance"
    Shared Property HtmDirectory As String = My.Application.Info.DirectoryPath & "/Data/htms"
    Public Sub Create(filename As String) Implements IPersistance.Create
        Save()
    End Sub
    Public Property Filename As String Implements IPersistance.Filename
        Get
            Return HtmDirectory & Me.ToString()
        End Get
        Set(value As String)
            Throw New NotImplementedException
        End Set
    End Property
    Public Sub Load(filename As String) Implements IPersistance.Load
        Try
            'override default filename , once input is valid
            If filename IsNot Nothing AndAlso
                filename.Length <> 0 Then
                Me.Filename = filename
            End If

            If (Not Directory.Exists(HtmDirectory)) Then
                Directory.CreateDirectory(HtmDirectory)
            End If

            If (Not File.Exists(Me.Filename)) Then
                Me.Create(Nothing)
                Exit Sub
            End If

            __matrixCore = DelimitedReader.Read(Of Double)(Me.Filename, False, ",")
        Catch ex As Exception

        End Try
    End Sub
    Public Sub Save() Implements IPersistance.Save
        Try
            DelimitedWriter.Write(Of Double)(Filename, __matrixCore, ",")
        Catch ex As Exception

        End Try
    End Sub

#End Region

End Class

''' <summary>
''' Composed by elementray htm
''' </summary>
''' <remarks></remarks>
Public Class htmEdgeComposed
    Inherits htmEdgeBase

    ReadOnly Property Chain As List(Of htmEdgeBase)
        Get
            Return __chain
        End Get
    End Property

    Public Overrides ReadOnly Property Inverse As htmEdgeBase
        Get
            Return Value.Inverse
        End Get
    End Property

    ''' <summary>
    ''' Assemble the chain
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides ReadOnly Property RawValue As Matrix(Of Double)
        Get
            Return Value.RawValue
        End Get
    End Property

    Dim __chain As List(Of htmEdgeBase) = New List(Of htmEdgeBase)

    ''' <summary>
    ''' Returned a assembled elementray htm
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides ReadOnly Property Value As htmEdgeBase
        Get
            Dim __assembledHtm As htmEdgeElementary = New htmEdgeElementary(Me.__to,
                                                                            Me.__to)
            Dim it As List(Of htmEdgeBase).Enumerator = __chain.GetEnumerator()

            While it.MoveNext()

                Dim node As htmEdgeBase = it.Current
                If Not node.To__.Equals(__assembledHtm.From) Then
                    'need inverse
                    node = node.Inverse
                    'Else
                    '    '-----------
                    '    '   Error Occured , chain is not in sequnece
                    '    '-----------
                    '    Throw New Exception("Chain is not in sequnece")
                End If

                'matrix cascade
                __assembledHtm = __assembledHtm * node

            End While

            Return __assembledHtm
        End Get
    End Property

    Sub New(__chain As List(Of htmEdgeBase),
            __from As [Enum],
            __to As [Enum])
        Me.__chain = __chain
        Me.__from = __from
        Me.__to = __to
    End Sub

End Class

''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class PositionVector
    Implements IPersistance

    ''' <summary>
    ''' Given a 4x1 
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Property RawValue As Vector(Of Double)
        Set(value As Vector(Of Double))
            __vectorCore.SetValues(value.ToArray)
        End Set
        Get
            Return __vectorCore
        End Get
    End Property

    ReadOnly Property X As Double
        Get
            Return __vectorCore.Item(0)
        End Get
    End Property
    ReadOnly Property Y As Double
        Get
            Return __vectorCore.Item(1)
        End Get
    End Property
    ReadOnly Property Z As Double
        Get
            Return __vectorCore.Item(2)
        End Get
    End Property

    ReadOnly Property ReferencedFrame As [Enum]
        Get
            Return __referencedFrame
        End Get
    End Property
    Dim __referencedFrame As [Enum] = Nothing

    ReadOnly Property Name As String
        Get
            Return __name
        End Get
    End Property
    Dim __name As String = ""

    Dim __vectorCore As Vector(Of Double) = Nothing

    Sub New(__vectorCore As Vector(Of Double),
            __referencedFrame As [Enum],
            Optional name As String = "")
        Me.__vectorCore = __vectorCore
        Me.__referencedFrame = __referencedFrame

        Me.__name = name

    End Sub
    Sub New(__referencedFrame As [Enum],
           Optional name As String = "")
        Me.New(CreateVector.DenseOfArray(Of Double)({0,
                                                     0,
                                                     0,
                                                     1}),
                                             __referencedFrame,
                                             name)
    End Sub

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="left"></param>
    ''' <param name="right"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared Operator *(left As htmEdgeBase, right As PositionVector)
        Return New PositionVector(left.RawValue * right.RawValue,
                                  left.To__)
    End Operator

#Region "persistance"
    Shared Property PositionsDirectory As String = My.Application.Info.DirectoryPath & "/Data/ptns"

    Public Sub Create(filename As String) Implements IPersistance.Create
        Save()
    End Sub

    Public Property Filename As String Implements IPersistance.Filename
        Get
            Return PositionsDirectory & Me.ToString()
        End Get
        Set(value As String)
            Throw New NotImplementedException
        End Set
    End Property

    Public Sub Load(filename As String) Implements IPersistance.Load
        Try
            'override default filename , once input is valid
            If filename IsNot Nothing AndAlso
                filename.Length <> 0 Then
                Me.Filename = filename
            End If

            If (Not Directory.Exists(PositionsDirectory)) Then
                Directory.CreateDirectory(PositionsDirectory)
            End If

            If (Not File.Exists(Me.Filename)) Then
                Me.Create(Nothing)
                Exit Sub
            End If

            Dim __matrixForm As Matrix(Of Double) = DelimitedReader.Read(Of Double)(Me.Filename, False, ",")

            __vectorCore = CreateVector.Dense(Of Double)(__matrixForm.ToColumnMajorArray)
        Catch ex As Exception

        End Try
    End Sub

    Public Sub Save() Implements IPersistance.Save
        Try
            DelimitedWriter.Write(Of Double)(Filename, __vectorCore.ToColumnMatrix, ",")
        Catch ex As Exception

        End Try
    End Sub
#End Region

    ''' <summary>
    ''' As P_r pattern
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides Function ToString() As String
        Return String.Format("P_{0}_{1}",
                             Me.__referencedFrame,
                             Me.__name)
    End Function

End Class