Imports MathNet.Numerics.LinearAlgebra
Imports System.Runtime.CompilerServices
Imports System.IO
Imports MathNet.Numerics.Data.Text
Imports System.Math
''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class utilities

    ''' <summary>
    ''' 3x3 Matrix
    '''               |  1     0      0     |
    ''' T_rotateX =   |  0  cos(a) -sin(a)  |
    '''               |  0  sin(a)  cos(a)  |
    ''' 
    '''               |  cos(b)  0  sin(b)  |
    ''' T_rotateY =   |    0     1    0     |
    '''               | -sin(b)  0  cos(b)  |
    ''' 
    '''               |  cos(c) -sin(c)  0  |
    ''' T_rotateZ =   |  sin(c)  cos(c)  0  |
    '''               |    0       0     1  |
    ''' </summary>
    ''' <param name="theta_x"></param>
    ''' <param name="theta_y"></param>
    ''' <param name="theta_z"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function RotateTransformation(theta_x As Double, theta_y As Double, theta_z As Double) As Matrix(Of Double)
        Dim mat_rotateX As Matrix(Of Double) = CreateMatrix.DenseOfRowArrays(Of Double)({1, 0, 0},
                                                                                        {0, Cos(theta_x), -Sin(theta_x)},
                                                                                        {0, Sin(theta_x), Cos(theta_x)})

        Dim mat_rotateY As Matrix(Of Double) = CreateMatrix.DenseOfRowArrays(Of Double)({Cos(theta_y), 0, Sin(theta_y)},
                                                                                        {0, 1, 0},
                                                                                        {-Sin(theta_y), 0, Cos(theta_y)})

        Dim mat_rotateZ As Matrix(Of Double) = CreateMatrix.DenseOfRowArrays(Of Double)({Cos(theta_z), -Sin(theta_z), 0},
                                                                                        {Sin(theta_z), Cos(theta_z), 0},
                                                                                        {0, 0, 1})
        Return mat_rotateX * mat_rotateY * mat_rotateZ
    End Function


    ''' <summary>
    ''' Error is defined by nominal-real
    ''' Given Nominal Postion , turns into Error Gain Form
    ''' {0, -.Z, .Y, -1, 0, 0
    ''' .Z, 0, -.X, 0, -1, 0,
    ''' -.Y, .X, 0, 0, 0, -1,}
    ''' </summary>
    ''' <param name="nominalPostion"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function position2ErrorGain(nominalPostion As PositionVector, Optional __option As optionEnums = optionEnums.GEOMETRIC) As Matrix(Of Double)
        With nominalPostion

            Select Case __option
                Case optionEnums.GEOMETRIC
                    Return CreateMatrix.DenseOfRowArrays(Of Double)({0, -.Z, .Y, -1, 0, 0},
                                                                    {.Z, 0, -.X, 0, -1, 0},
                                                                    {-.Y, .X, 0, 0, 0, -1})
                Case optionEnums.SCALING
                    Return CreateMatrix.DenseOfRowArrays(Of Double)({-.X, 0, 0},
                                                                    {0, -.Y, 0},
                                                                    {0, 0, -.Z})
                Case Else
                    Return Nothing
            End Select
        End With
    End Function
    ''' <summary>
    ''' Error is defined by nominal-real
    ''' Given Nominal Postion , turns into Error Gain Form
    ''' According to nominal position's valid dimension
    ''' </summary>
    ''' <param name="nominalPostion"></param> 
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function position2ErrorGain(nominalPostion As Vector(Of Double), Optional __option As optionEnums = optionEnums.GEOMETRIC) As Matrix(Of Double)
        Dim __matrix = position2ErrorGain(New PositionVector(nominalPostion,
                                                              Nothing),
                                                          __option)

        Return __matrix.SubMatrix(0, nominalPostion.Count, 0, __matrix.ColumnCount)
    End Function

    Public Enum optionEnums
        GEOMETRIC
        SCALING
    End Enum

    Public Enum selectionEnums As Integer
        X = &H1
        Y = &H2
        Z = &H4
    End Enum
    ''' <summary>
    ''' Select the correspond error gain row
    ''' </summary>
    ''' <param name="nominalPostion"></param> 
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function position2ErrorGain(nominalPostion As Vector(Of Double),
                                              selection As selectionEnums,
                                              Optional __option As optionEnums = optionEnums.GEOMETRIC) As Matrix(Of Double)

        Dim __matrix = position2ErrorGain(New PositionVector(nominalPostion,
                                                              Nothing),
                                                          __option)

        Dim __vectorCollection As List(Of Vector(Of Double)) = New List(Of Vector(Of Double))
        Dim values = [Enum].GetValues(GetType(selectionEnums))

        For index = 0 To values.Length - 1
            If selection And values(index) Then
                __vectorCollection.Add(__matrix.Row(index))
            End If
        Next

        Return CreateMatrix.DenseOfRowVectors(Of Double)(__vectorCollection.ToArray)
    End Function


    Public Shared Function matrix2String(value As Matrix(Of Double)) As String
        Dim sw As StringWriter = New StringWriter()
        DelimitedWriter.Write(Of Double)(sw, value, ",")
        Return sw.ToString
    End Function
    Public Shared Function string2Matrix(value As String) As Matrix(Of Double)
        Dim sr As StringReader = New StringReader(value)
        Return DelimitedReader.Read(Of Double)(sr, False, ",")
    End Function

End Class

'Public Module matrixExtension
'    ''' <summary>
'    ''' Return a pseudo inverse
'    ''' </summary>
'    ''' <param name="matrice"></param>
'    ''' <returns></returns>
'    ''' <remarks></remarks>
'    <Extension()>
'    Public Function PseudoInverse(matrice As Matrix(Of Double)) As Matrix(Of Double)
'        ' Reference: https://github.com/mathnet/mathnet-numerics/issues/432

'        Dim svd As Factorization.Svd(Of Double) = matrice.Svd(True)
'        Dim mat_W As Matrix(Of Double) = svd.W
'        Dim vec_s As Vector(Of Double) = svd.S
'        Dim torlerance As Double = Math.Max(matrice.RowCount, matrice.ColumnCount) * matrice.L2Norm * MathNet.Numerics.Precision.DoublePrecision

'        For Each si In vec_s
'            If si < torlerance Then
'                si = 0
'            Else
'                si = 1 / si
'            End If
'        Next

'        mat_W.SetDiagonal(vec_s)

'        Return (svd.U * mat_W * svd.VT).Transpose()
'    End Function
'End Module