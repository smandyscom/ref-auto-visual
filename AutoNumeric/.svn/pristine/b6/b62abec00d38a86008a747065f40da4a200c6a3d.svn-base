Imports MathNet.Numerics.LinearAlgebra

''' <summary>
''' 
''' </summary>
''' <remarks></remarks>
Public Class utilities

    
    ''' <summary>
    '               |  1     0      0     0  |
    ' T_rotateX =   |  0  cos(a) -sin(a)  0  |
    '               |  0  sin(a)  cos(a)  0  |
    '               |  0     0      0     1  |
    '               |  cos(b)  0  sin(b)  0  |
    ' T_rotateY =   |    0     1    0     0  |
    '               | -sin(b)  0  cos(b)  0  |
    '               |    0     0    0     1  |
    '               |  cos(c) -sin(c)  0  0  |
    ' T_rotateZ =   |  sin(c)  cos(c)  0  0  |
    '               |    0       0     1  0  |
    '               |    0       0     0  1  |    
    ''' </summary>
    ''' <param name="theta_x"></param>
    ''' <param name="theta_y"></param>
    ''' <param name="theta_z"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function RotateTransformation(theta_x As Double, theta_y As Double, theta_z As Double) As Matrix(Of Double)
        Dim mat_rotateX As Matrix(Of Double) = Matrix(Of Double).Build.Dense(4, 4, {1, 0, 0, 0, 0, Math.Cos(theta_x), Math.Sin(theta_x), 0, 0, -Math.Sin(theta_x), Math.Cos(theta_x), 0, 0, 0, 0, 1})
        Dim mat_rotateY As Matrix(Of Double) = Matrix(Of Double).Build.Dense(4, 4, {Math.Cos(theta_y), 0, -Math.Sin(theta_y), 0, 0, 1, 0, 0, Math.Sin(theta_y), 0, Math.Cos(theta_y), 0, 0, 0, 0, 1})
        Dim mat_rotateZ As Matrix(Of Double) = Matrix(Of Double).Build.Dense(4, 4, {Math.Cos(theta_z), Math.Sin(theta_z), 0, 0, -Math.Sin(theta_z), Math.Cos(theta_z), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1})

        Return mat_rotateX * mat_rotateY * mat_rotateZ
    End Function

    ''' <summary>
    ''' Error is defined by nominal-real
    ''' Given Nominal Postion , turns into Error Gain Form
    ''' </summary>
    ''' <param name="nominalPostion"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function position2ErrorGain(nominalPostion As PositionVector) As Matrix(Of Double)
        With nominalPostion
            Return CreateMatrix.Dense(Of Double)(3, 6, {0, .Z, .Y, -1, 0, 0,
                                                        -.Z, 0, -.X, 0, -1, 0,
                                                        -.Y, .X, 0, 0, 0, -1})
        End With
    End Function

End Class
