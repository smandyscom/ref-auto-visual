Imports MathNet.Numerics.LinearAlgebra
Imports MathNet.Spatial.Euclidean
Imports MathNet.Numerics.Data.Text

Public Enum frameVectorEnum As Integer
    X = 0
    Y = 1
    Z = 2
End Enum

Public MustInherit Class htmEdgeBase

    MustOverride ReadOnly Property RawValue As Matrix(Of Double)
    MustOverride ReadOnly Property Value As htmEdgeBase
    ''' <summary>
    ''' give a inverse
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    MustOverride ReadOnly Property Inverse As htmEdgeBase
    ReadOnly Property From As [Enum]
        Get
            Return __from
        End Get
    End Property
    ReadOnly Property To__ As [Enum]
        Get
            Return __to
        End Get
    End Property

    Protected __from As [Enum] = Nothing
    Protected __to As [Enum] = Nothing

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Overridable Property RotationMatrix As Matrix(Of Double)
        Get
            Return RawValue.SubMatrix(0, 3, 0, 3)
        End Get
        Set(value As Matrix(Of Double))
            'update only for elementray
        End Set
    End Property

    Public Overridable Property PositionVector() As Vector(Of Double)
        Get
            Return RawValue.Column(3)
        End Get
        Set(ByVal value As Vector(Of Double))
            'update
        End Set
    End Property

    Overridable Property FrameVector(axis As frameVectorEnum) As Vector(Of Double)
        Get
            Return RawValue.Column(axis)
        End Get
        Set(value As Vector(Of Double))
            'update
        End Set
    End Property


    Public Overrides Function ToString() As String
        Return String.Format("T_{0}_{1}",
                             __from,
                             __to)
    End Function

    ''' <summary>
    ''' Define matrix multiplication
    ''' </summary>
    ''' <param name="left"></param>
    ''' <param name="right"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared Operator *(ByVal left As htmEdgeBase, right As htmEdgeBase) As htmEdgeBase
        Return New htmEdgeElementary(left.RawValue * right.RawValue,
                                     right.__from,
                                     left.__to)
    End Operator

    ' ''' <summary>
    ' ''' Complete frameVector by cross product
    ' ''' </summary>
    ' ''' <remarks></remarks>
    'Public Sub CompleteFrameVector(__vector As frameVectorEnum)
    '    'Dim __vectorX As Vector3D
    '    '__vectorX.CrossProduct()
    'End Sub

End Class

''' <summary>
''' Decorator of Matrix(of Double) 
''' Has edge property , depict T_from_to
''' </summary>
''' <remarks></remarks>
Public Class htmEdgeElementary
    Inherits htmEdgeBase

    Public Overrides ReadOnly Property Inverse As htmEdgeBase
        Get
            Return New htmEdgeElementary(Me.__matrixCore.Inverse,
                                         Me.__to,
                                         Me.__from)
        End Get
    End Property

    Public Overrides ReadOnly Property RawValue As Matrix(Of Double)
        Get
            Return __matrixCore
        End Get
    End Property

    Public Overrides ReadOnly Property Value As htmEdgeBase
        Get
            Return Me
        End Get
    End Property
   
    Dim __matrixCore As Matrix(Of Double) = Nothing

    Sub New(__matrixCore As Matrix(Of Double),
            __from As [Enum],
            __to As [Enum])
        'create eye(4)
        Me.__matrixCore = __matrixCore
        Me.__from = __from
        Me.__to = __to
    End Sub
    Sub New(__from As [Enum],
            __to As [Enum])
        'create eye(4)
        Me.__matrixCore = CreateMatrix.DenseIdentity(Of Double)(4)

        Me.__from = __from
        Me.__to = __to
    End Sub

#Region "persistance"
    Shared Property Directory As String = My.Application.Info.DirectoryPath & "/Data/htms"
    ReadOnly Property Filename As String
        Get
            Return Directory & Me.ToString()
        End Get
    End Property
    'load
    Sub load()
        Try
            __matrixCore = DelimitedReader.Read(Of Double)(Filename, False, ",")
        Catch ex As Exception

        End Try
    End Sub
    'save
    Overridable Sub save()
        Try
            DelimitedWriter.Write(Of Double)(Filename, __matrixCore, ",")
        Catch ex As Exception

        End Try
    End Sub

#End Region


End Class

''' <summary>
''' Composed by elementray htm
''' </summary>
''' <remarks></remarks>
Public Class htmEdgeComposed
    Inherits htmEdgeBase

    ReadOnly Property Chain As List(Of htmEdgeBase)
        Get
            Return __chain
        End Get
    End Property

    Public Overrides ReadOnly Property Inverse As htmEdgeBase
        Get
            Return Value.Inverse
        End Get
    End Property

    ''' <summary>
    ''' Assemble the chain
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides ReadOnly Property RawValue As Matrix(Of Double)
        Get
            Return Value.RawValue
        End Get
    End Property

    Dim __chain As List(Of htmEdgeBase) = New List(Of htmEdgeBase)

    ''' <summary>
    ''' Returned a assembled elementray htm
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overrides ReadOnly Property Value As htmEdgeBase
        Get
            Dim __assembledHtm As htmEdgeElementary = New htmEdgeElementary(Me.__to,
                                                                            Me.__to)
            Dim it As List(Of htmEdgeBase).Enumerator = __chain.GetEnumerator()

            While it.MoveNext()

                Dim node As htmEdgeBase = it.Current
                If Not node.To__.Equals(__assembledHtm.From) Then
                    'need inverse
                    node = node.Inverse
                    'Else
                    '    '-----------
                    '    '   Error Occured , chain is not in sequnece
                    '    '-----------
                    '    Throw New Exception("Chain is not in sequnece")
                End If

                'matrix cascade
                __assembledHtm = __assembledHtm * node

            End While

            Return __assembledHtm
        End Get
    End Property

    Sub New(__chain As List(Of htmEdgeBase),
            __from As [Enum],
            __to As [Enum])
        Me.__chain = __chain
        Me.__from = __from
        Me.__to = __to
    End Sub

End Class


Public Class PositionVector

    ReadOnly Property RawValue As Vector(Of Double)
        Get
            Return __vectorCore
        End Get
    End Property

    ReadOnly Property X As Double
        Get
            Return __vectorCore.Item(0)
        End Get
    End Property
    ReadOnly Property Y As Double
        Get
            Return __vectorCore.Item(1)
        End Get
    End Property
    ReadOnly Property Z As Double
        Get
            Return __vectorCore.Item(2)
        End Get
    End Property

    ReadOnly Property ReferencedFrame As [Enum]
        Get
            Return __referencedFrame
        End Get
    End Property
    Dim __referencedFrame As [Enum] = Nothing

    Dim __vectorCore As Vector(Of Double) = Nothing

    Sub New(__vectorCore As Vector(Of Double),
            __referencedFrame As [Enum])
        Me.__vectorCore = __vectorCore
        Me.__referencedFrame = __referencedFrame
    End Sub
    Sub New(__referencedFrame As [Enum])
        __vectorCore = CreateVector.DenseOfArray(Of Double)({0,
                                                             0,
                                                             0,
                                                             1})
        Me.__referencedFrame = __referencedFrame
    End Sub

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="left"></param>
    ''' <param name="right"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Shared Operator *(left As htmEdgeBase, right As PositionVector)
        Return New PositionVector(left.RawValue * right.RawValue,
                                  left.To__)
    End Operator

End Class