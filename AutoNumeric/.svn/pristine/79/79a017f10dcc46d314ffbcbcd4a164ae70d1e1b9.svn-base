Imports Automation
Imports MathNet.Numerics.LinearAlgebra
''' <summary>
''' Offer the basic data procedure flow
''' Output: error matrix updating
''' </summary>
''' <remarks></remarks>
Public Class measureProcedureType1Base
    Inherits systemControlPrototype

    Property IsProcedureStarted As Boolean
        Get
            Return __isProcedureStarted
        End Get
        Set(value As Boolean)
            'trigger start only
            If Not __isProcedureStarted And
                value Then
                __isProcedureStarted = True
            End If
        End Set
    End Property
    Dim __isProcedureStarted As Boolean = False

    ReadOnly Property CurrentDataIndex As Integer
        Get
            Return dataPairCollection.Count - 1
        End Get
    End Property

    ''' <summary>
    ''' Used to store data pair
    ''' Derived class should output this
    ''' </summary>
    ''' <remarks></remarks>
    Protected dataPairCollection As List(Of measuredDataPair) = New List(Of measuredDataPair)

    ''' <summary>
    ''' Link to some external link
    ''' </summary>
    ''' <remarks></remarks>
    Protected correspondingErrorMatrix As errorHtm = Nothing
    Protected toleranceThreshold As Double = 0.001

    Protected tryingTimes As Integer = 0
    Protected tryingGoal As Integer = 3

    Protected measureProcedureState As Integer = 0
    MustOverride Function measureProcedure(ByRef state As Integer) As Boolean
    MustOverride Function preparationProcedure(ByRef state As Integer) As Boolean

    Protected errorVector As Vector(Of Double) = Nothing

    Dim alarmPackErrorNotConverage As alarmContextBase = New alarmContextBase With {.Sender = Me}

    Function stateMeasure() As Integer

        'TODO , record procedure state

        'through the measure procedure , get the ideal position and real position(measured one)
        'turns into error gain/error form (error  = ideal-real)
        'interating above procedure , until enough data count got
        'processing datas, error vector/error matrix calculated
        'update error matrix
        'check if norm of error vector is smaller than low threshold
        ' if yes , quit procedure
        ' if no  , iterating

        Select Case systemSubState
            Case 0
                If __isProcedureStarted Then
                    systemSubState += 10
                Else
                    '---------------
                    '   Wait Trigger
                    '---------------
                End If
            Case 10
                If preparationProcedure(measureProcedureState) Then
                    measureProcedureState = 0 'reset
                    systemSubState = 100
                Else
                    '------------
                    '   Preparating
                    '------------
                End If
            Case 100
                'measure procedures
                If measureProcedure(measureProcedureState) Then
                    measureProcedureState = 0 'reset

                    'procedure would output dataPairCollection
                    errorVector =
                        measuredDataPair.fitErrorVector(dataPairCollection)
                    dataPairCollection.clear()

                    'cascade current error matrix
                    correspondingErrorMatrix.ErrorVector += errorVector

                    If errorVector.L2Norm > toleranceThreshold And
                        tryingTimes < tryingGoal Then

                        tryingTimes += 1
                        'not converged , but trying times not over the given value
                        'keep trying
                    Else
                        'converged/trying times reached , procedure done
                        'abort
                        systemSubState = 500
                    End If

                Else
                    '--------------------------
                    '   Measuring
                    '--------------------------
                End If
            Case 500
                '------------------
                '   Procedure Done
                '------------------
                If errorVector.L2Norm <= toleranceThreshold Then
                    '----------------
                    '   Well done
                    '----------------
                Else
                    'not coveraged , report error
                    alarmPackErrorNotConverage.AdditionalInfo =
                        String.Format("Error Vector is unable to converage, {0}",
                                      errorVector.L2Norm)
                    CentralAlarmObject.raisingAlarm(alarmPackErrorNotConverage)
                End If

                __isProcedureStarted = False ' reset flag
                systemMainState = systemStatesEnum.IDLE
        End Select
        Return 0
    End Function

    Sub New()
        Me.systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateMeasure
        Me.systemMainState = systemStatesEnum.EXECUTE
    End Sub

End Class
