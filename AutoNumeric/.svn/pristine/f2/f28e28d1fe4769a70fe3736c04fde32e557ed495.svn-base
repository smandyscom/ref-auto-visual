Imports Automation
Imports MathNet.Numerics.LinearAlgebra
''' <summary>
''' Offer the basic data procedure flow
''' Output: error matrix updating
''' </summary>
''' <remarks></remarks>
Public MustInherit Class measureProcedureType1Base
    Inherits systemControlPrototype

    Property IsProcedureStarted As Boolean
        Get
            Return __isProcedureStarted
        End Get
        Set(value As Boolean)
            'trigger start only
            If Not __isProcedureStarted And
                value Then
                __isProcedureStarted = True
            End If
        End Set
    End Property
    Dim __isProcedureStarted As Boolean = False

    ReadOnly Property CurrentDataIndex As Integer
        Get
            Return dataPairCollection.Count - 1
        End Get
    End Property

    ReadOnly Property ProcedureState As Integer
        Get
            Return __procedureState
        End Get
    End Property

    ''' <summary>
    ''' Used to store data pair
    ''' Derived class should output this
    ''' </summary>
    ''' <remarks></remarks>
    Protected dataPairCollection As List(Of measuredDataPair) = New List(Of measuredDataPair)

    ''' <summary>
    ''' Link to some external link
    ''' </summary>
    ''' <remarks></remarks>
    Protected correspondingErrorMatrix As eulerHtmTR = Nothing

    Protected tolerancePosition As Double = 0.001
    Protected toleranceRotation As Double = 0.000001

    Protected tryingTimes As Integer = 0
    Protected tryingGoal As Integer = 5

    Protected __procedureState As Integer = 0
    Protected lastProcedureState As Integer = 0
    Protected MustOverride Function measureProcedure(ByRef state As Integer) As Boolean
    Protected MustOverride Function preparationProcedure(ByRef state As Integer) As Boolean
    Protected MustOverride Function finalizeProcedure(ByRef state As Integer) As Boolean

    Protected errorMatrix As eulerHtmTR = Nothing

    Dim alarmPackErrorNotConverage As alarmContextBase = New alarmContextBase With {.Sender = Me}

    Dim lastSystemSubState As Integer = 0

    Protected ReadOnly Property IsErrorVectorAccepted As Boolean
        Get
            If errorMatrix Is Nothing Then
                Return False
            End If
            Return (errorMatrix.ControlVector.SubVector(axisEntityEnum.X, 3).L2Norm <= tolerancePosition) And
            (errorMatrix.ControlVector.SubVector(axisEntityEnum.A, 3).L2Norm <= toleranceRotation)
        End Get
    End Property

    Function stateMeasure() As Integer

        'record procedure state
        If lastProcedureState <> __procedureState Then
            sendMessage(internalEnum.GENERIC_MESSAGE, String.Format("Procedure:{0}", __procedureState))
            lastProcedureState = __procedureState
        End If
        If lastSystemSubState <> systemSubState Then
            sendMessage(internalEnum.GENERIC_MESSAGE, String.Format("Sub-state:{0}", systemSubState))
            lastSystemSubState = systemSubState
        End If

        'through the measure procedure , get the ideal position and real position(measured one)
        'turns into error gain/error form (error  = ideal-real)
        'interating above procedure , until enough data count got
        'processing datas, error vector/error matrix calculated
        'update error matrix
        'check if norm of error vector is smaller than low threshold
        ' if yes , quit procedure
        ' if no  , iterating

        Select Case systemSubState
            Case 0
                If __isProcedureStarted Then
                    tryingTimes = 0 'reset
                    systemSubState += 10
                Else
                    '---------------
                    '   Wait Trigger
                    '---------------
                End If
            Case 10
                If preparationProcedure(__procedureState) Then
                    __procedureState = 0 'reset
                    systemSubState = 100
                Else
                    '------------
                    '   Preparating
                    '------------
                End If
            Case 100
                'measure procedures
                If measureProcedure(__procedureState) Then
                    __procedureState = 0 'reset

                    'procedure would output dataPairCollection
                    errorMatrix.RawValue = measuredDataPair.fitTransformation(dataPairCollection).RawValue

                    '----------------------------------------
                    '   Record
                    '----------------------------------------
                    sendMessage(internalEnum.GENERIC_MESSAGE,
                                String.Format("Error Vector:{0},Data Pairs:{1}",
                                              errorMatrix.ControlVector.ToVectorString.Replace(vbCrLf, vbTab),
                                              measuredDataPair.pairsOutput(dataPairCollection)))

                    dataPairCollection.Clear()

                    'cascade current error matrix
                    correspondingErrorMatrix.RawValue = errorMatrix.RawValue.Inverse * correspondingErrorMatrix.RawValue

                    If Not IsErrorVectorAccepted And
                        tryingTimes < tryingGoal Then
                        '-------------------------
                        'not converged , but trying times not over the given value
                        'keep trying
                        '-------------------------
                        tryingTimes += 1
                    Else
                        'converged/trying times reached , procedure done
                        systemSubState = 500
                    End If
                Else
                    '--------------------------
                    '   Measuring
                    '--------------------------
                End If
            Case 500
                If finalizeProcedure(__procedureState) Then
                    '------------------
                    '   Procedure Done
                    '------------------
                    If IsErrorVectorAccepted Then
                        '----------------
                        '   Well done
                        '----------------
                        sendMessage(internalEnum.GENERIC_MESSAGE, String.Format("Accumulated:{0}",
                                                                               correspondingErrorMatrix.ControlVector.ToVectorString.Replace(vbCrLf, vbTab)))
                    Else
                        'not coveraged , report error
                        alarmPackErrorNotConverage.AdditionalInfo =
                            String.Format("Error Vector Cannot Converage, {0}",
                                          errorMatrix.ControlVector.L2Norm)
                        CentralAlarmObject.raisingAlarm(alarmPackErrorNotConverage)
                    End If

                    __isProcedureStarted = False ' reset flag
                    systemSubState = 0
                Else
                    '--------------------
                    '   Procedure running
                    '--------------------
                End If

        End Select

        Return 0

    End Function

    Sub New()
        Me.systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateMeasure
        Me.systemMainState = systemStatesEnum.EXECUTE
    End Sub

End Class
