Imports Automation.Components.CommandStateMachine
Imports Automation.mainIOHardware
Imports Automation.Components.Services
Imports Automation

Public Interface IWeightData
    Property WeightBeforeProcess As Single
    Property WeightAfterProcess As Single
End Interface
Public Class clsLoadingLinearSwapArm
    Inherits clsLinearSwapArm
    Property FlowNum As Integer '共有幾個水道
    <MonitoringDescription("每隔幾片要就秤重一次(0 is disable)")> Property MeasurementPerNum As UInteger '每隔幾片要就秤重一次
    Property forceMeasure As flagController(Of interlockedFlag)
    Property _motor As motorControl = MyBase.motor 'for testing and monitor
    Dim flowCount As Integer
    Dim waferCount As Integer
    Dim cStep As enumIsAbleSwapStep
    ReadOnly Property [Step] As enumIsAbleSwapStep
        Get
            Return cStep
        End Get
    End Property
    Public Overrides Function initMappingAndSetup() As Integer
        IsAbleSwap = AddressOf _isAbleSwap
        Return MyBase.initMappingAndSetup()
    End Function
    Private Function _isAbleSwap() As Boolean
        Select Case cStep
            Case enumIsAbleSwapStep._0
                If TargetPositionInfoA.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    'do nothing, waiting module action
                ElseIf TargetPositionInfoA.Invoke.IsPositionOccupied = False Then
                    TargetPositionInfoA.Invoke.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False) 'reset module action
                Else
                    waferCount += 1
                    If (waferCount >= MeasurementPerNum AndAlso MeasurementPerNum > 0) OrElse forceMeasure.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                        forceMeasure.writeFlag(interlockedFlag.POSITION_OCCUPIED, False) 'reset
                        waferCount = 0 'reset
                        cStep = enumIsAbleSwapStep._10
                    End If
                End If
            Case enumIsAbleSwapStep._10
                If TargetPositionInfoB.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    cStep = 0
                    Return True
                End If
        End Select
        Return False
    End Function
    Enum enumIsAbleSwapStep
        _0
        _10
    End Enum
End Class
Public Class clsUnloadingLinearSwapArm
    Inherits clsLinearSwapArm
    Dim cStep As enumIsAbleSwapStep
    ReadOnly Property [Step] As enumIsAbleSwapStep
        Get
            Return cStep
        End Get
    End Property
    Public Overrides Function initMappingAndSetup() As Integer
        IsAbleSwap = AddressOf _isAbleSwap
        Return MyBase.initMappingAndSetup()
    End Function
    Private Function _isAbleSwap() As Boolean
        Select Case cStep
            Case enumIsAbleSwapStep._0
                If TargetPositionInfoA.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    'do nothing, waiting module action
                ElseIf TargetPositionInfoA.Invoke.IsPositionOccupied = False Then
                    TargetPositionInfoA.Invoke.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False) 'reset module action
                ElseIf CType(TargetPositionInfoA.Invoke, IWeightData).WeightBeforeProcess > 0 Then 'there is weight data in this wafer
                    cStep = enumIsAbleSwapStep._10
                End If
            Case enumIsAbleSwapStep._10
                If TargetPositionInfoB.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = False Then
                    cStep = 0
                    Return True
                End If
        End Select
        Return False
    End Function
    Enum enumIsAbleSwapStep
        _0
        _10
    End Enum
End Class