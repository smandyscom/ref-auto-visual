Imports Automation
Imports Automation.Components.Services

Public Class clsWaferBrokenCheck
    Inherits systemControlPrototype
    Implements IBrokenReport

    Public Event BrokenFound(ByVal sender As Object, ByVal e As EventArgs)
#Region "External Data declare"
    Dim tmr As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 5)}
    'Property WaferData As Func(Of shiftDataPackBase) Implements IBrokenReport.WaferData '破片所專注的位置
    Public Property WaferData As Func(Of shiftDataPackBase) Implements IModuleSingle.TargetPositionInfo

    Public Property ngFlags As flagController(Of IBrokenReport.BrokenFlagsEnum) = New flagController(Of IBrokenReport.BrokenFlagsEnum) Implements IBrokenReport.ngFlags
#End Region

    Public additionalBrokenCondition As Func(Of Boolean) = Function() (False)   'return value : true , treat as broken , false , treat as normal
    Dim extensionActionState As Integer = 0
    Public extensionAction As stateFunction = Function() (True) 'the  extension action after broken had found

#Region "Device declare"
    Public spCrack1 As sensorControl = New sensorControl
    Public spCrack2 As sensorControl = New sensorControl
    Public spCrack3 As sensorControl = New sensorControl
    Public spCrack4 As sensorControl = New sensorControl
    Public spOccupied As sensorControl = New sensorControl
#End Region
#Region "必須在instance中宣告"
    Property pickPoint As cMotorPoint Implements IBrokenReport.pickPoint
#End Region

    Enum stateExcuteEnum
        _0
        _10
        _20
        _30
        _40
        _100
        _110
        PRE_ACTION_NG   'Hsien , insert a reserved movement
        _120
        _300
        _200
    End Enum
    Protected Function stateIgnite() As Integer '直接跳至執行階段
        systemMainState = systemStatesEnum.EXECUTE
        Return 0
    End Function
    Protected Function stateExecute() As Integer
        Select Case systemSubState
            Case stateExcuteEnum._0
                If WaferData.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then 'action
                    systemSubState = stateExcuteEnum._10
                Else
                    '---------------------
                    '   Conveyor is working
                    '---------------------
                End If
            Case stateExcuteEnum._10
                If spOccupied.IsSensorCovered Then
                    '-------------------------
                    '   there's real wafer
                    '-------------------------
                    If (Not WaferData.Invoke.IsPositionOccupied) Then
                        sendMessage(internalEnum.GENERIC_MESSAGE, "Unknown wafer on broken check")
                        WaferData.Invoke.IsPositionOccupied = True '
                    End If

                    systemSubState = stateExcuteEnum._20
                Else
                    '--------------------
                    '   Send a warning
                    '--------------------
                    If (WaferData.Invoke.IsPositionOccupied) Then
                        sendMessage(internalEnum.GENERIC_MESSAGE, "Wafer lossed on broken check")
                        WaferData.Invoke.IsPositionOccupied = False 'reset  , Hsien  ,2015.10.21, prevent 
                    End If

                    systemSubState = stateExcuteEnum._200 'there is no wafer,  clear action flag directly
                End If
            Case stateExcuteEnum._20
                'wait lock flag off , ng picker may set-on LOCK flag
                If Not ngFlags.viewFlag(IBrokenReport.BrokenFlagsEnum.LOCK) Then
                    tmr.IsEnabled = True : tmr.TimerGoal = New TimeSpan(0, 0, 0, 0, 300)
                    systemSubState = stateExcuteEnum._30
                Else
                    '---------------------------------
                    '   Wait NG picker finished action
                    '---------------------------------
                End If
            Case stateExcuteEnum._30
                If spCrack1.IsSensorCovered = False OrElse
                    spCrack2.IsSensorCovered = False OrElse
                    spCrack3.IsSensorCovered = False OrElse
                    spCrack4.IsSensorCovered = False OrElse
                    additionalBrokenCondition.Invoke Then

                    If tmr.IsTimerTicked = True Then
                        systemSubState = stateExcuteEnum.PRE_ACTION_NG
                    End If
                Else
                    systemSubState = stateExcuteEnum._200
                End If

            Case stateExcuteEnum.PRE_ACTION_NG
                If (extensionAction(extensionActionState)) Then
                    extensionActionState = 0    'reset

                    ngFlags.setFlag(IBrokenReport.BrokenFlagsEnum.NG)
                    RaiseEvent BrokenFound(Me, Nothing)  'hsien , event added

                    systemSubState = stateExcuteEnum._110
                End If
            Case stateExcuteEnum._110
                'wait ng flag clear
                If Not ngFlags.viewFlag(IBrokenReport.BrokenFlagsEnum.NG) Then
                    If spOccupied.IsSensorCovered Then
                        Dim ap As New alarmContentSensor
                        With ap
                            .Sender = Me
                            .Inputs = spOccupied.InputBit
                            .PossibleResponse = alarmContextBase.responseWays.RETRY
                            .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
                            .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() (True)
                        End With
                        CentralAlarmObject.raisingAlarm(ap)
                    Else
                        WaferData.Invoke.IsPositionOccupied = False 'mark wafer had been removed , Hsien , 2016.03.23
                        systemSubState = stateExcuteEnum._200
                    End If

                End If
            Case stateExcuteEnum._200 'finish
                'release conveyor when no locked
                If (Not ngFlags.viewFlag(IBrokenReport.BrokenFlagsEnum.LOCK)) Then
                    'ngFlags.setFlag(IBrokenReport.BrokenFlagsEnum.BUSY)   'inform picker do not move
                    WaferData.Invoke.ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    systemSubState = stateExcuteEnum._0
                End If
        End Select
        Return 0
    End Function

    Public Sub New()
        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE

        'ngFlags.setFlag(IBrokenReport.BrokenFlagsEnum.BUSY)   'initial state : busy
    End Sub

End Class
Public Interface IBrokenReport
    Inherits IModuleSingle

    Enum BrokenFlagsEnum
        NG 'request sync move with down stream node
        LOCK    ' broken <- ng picker , lock condition:
        '1. ng picker had requested to pick ng wafer
        'BUSY    ' ng picker <- broken   , busy condition (picker can do picke action): 
        '1. conveyor is moving (non-module actioned)
        '2. broken check is try to sense if wafer broken
    End Enum
    Property ngFlags As flagController(Of BrokenFlagsEnum)
    Property pickPoint As cMotorPoint
    'Property WaferData As Func(Of shiftDataPackBase)

End Interface