Imports System.Text

Public Class flagController(Of enumType As {Structure, IConvertible})
    ReadOnly Property FlagElementsArray As List(Of flagElement)
        Get
            Dim tempArray As List(Of flagElement) = New List(Of flagElement)
            For i = 0 To flags.Length - 1
                tempArray.Add(New flagElement(labels, flags, i))
            Next
            Return tempArray
        End Get
    End Property


    ReadOnly Property FlagReference As Boolean()
        Get
            Return flags
        End Get
    End Property
    ReadOnly Property LabelReference As String()
        Get
            Return labels
        End Get
    End Property

    Private labels As String()
    Private flags As Boolean() = New Boolean(([Enum].GetValues(GetType(enumType)).Length) - 1) {}

    Public Sub New()
        ' intialize string array
        labels = [Enum].GetNames(GetType(enumType))
    End Sub

    ' interface to external controller
    Public Function writeFlag(ByVal flag As enumType, ByVal value As Boolean) As Integer
        flags(flag.ToInt32(Nothing)) = value
        Return 0
    End Function
    Public Function viewFlag(ByVal flag As enumType) As Boolean
        ' view without handahske
        Return flags(flag.ToInt32(Nothing))
    End Function
    Public Function readFlag(ByVal flag As enumType) As Boolean
        ' handshake
        If (flags(flag.ToInt32(Nothing))) Then
            flags(flag.ToInt32(Nothing)) = False
            Return True
        End If
        Return False
    End Function
    Public Function resetFlag(ByVal flag As enumType) As Integer
        flags(flag.ToInt32(Nothing)) = False
        Return 0
    End Function
    Public Function setFlag(ByVal flag As enumType) As Integer
        flags(flag.ToInt32(Nothing)) = True
        Return 0
    End Function
    Public Sub clearFlags()
        '----------------------
        '   Reset all flags to false
        '----------------------
        For index = 0 To flags.Length - 1
            flags(index) = False
        Next
    End Sub

    Public Overrides Function ToString() As String
        '-----------------------
        '   Reflect values
        '-----------------------
        Dim __sb As StringBuilder = New StringBuilder
        For index = 0 To labels.Count - 1
            __sb.AppendLine(String.Format("Flag Name:{0};Value:{1}",
                                          labels(index),
                                          flags(index)))
        Next
        Return __sb.ToString
    End Function
End Class


Public Class flagElement
    Private labelReference As String()
    Private flagReference As Boolean()
    Private flagIndex As Short

    Public Sub New(ByRef _labelReference As String(), ByRef _flagReference As Boolean(), ByVal _flagIndex As Short)
        Me.labelReference = _labelReference
        Me.flagReference = _flagReference
        Me.flagIndex = _flagIndex
    End Sub

    Property Flag As Boolean
        Get
            Return flagReference(flagIndex)
        End Get
        Set(value As Boolean)
            flagReference(flagIndex) = value
        End Set
    End Property
    ReadOnly Property Label As String
        Get
            Return labelReference(flagIndex)
        End Get
    End Property
End Class

