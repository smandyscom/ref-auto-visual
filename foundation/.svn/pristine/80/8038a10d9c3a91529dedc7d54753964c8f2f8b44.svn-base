Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components.Services
''' <summary>
''' READ ME FIRST! this class must use GO_POSITION_COMBINED command to clamp and release
''' the restriction is that other motor in the same amax-1240 module DO NOT use GO_POSITION_COMBINED at the same time.
''' base on this restriciton, you must move other clsClamp to other amax-1240 modules
''' or JUST use the clampMark2 created by Juhsien.
''' best regards, jk. 
''' </summary>
''' <remarks></remarks>
Public Class clsClamp
    Inherits systemControlPrototype
    Implements IModuleSingle
    Implements IFinishableStation

#Region "Device declare"
    Property motorClamp As motorControl = New motorControl
    Property SpClamp1 As sensorControl = New sensorControl
    Property SpClamp2 As sensorControl = New sensorControl
#End Region
#Region "External Data declare"
    Property motorPointClamp As cMotorPoint
    Property motorPointRelease As cMotorPoint
    Property TargetPositionInfo As Func(Of shiftDataPackBase) Implements IModuleSingle.TargetPositionInfo
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations
#End Region
#Region "Internal Data declare"
    Dim tmr As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 5)}
    Dim alarmPackSensorCovered As alarmContentSensor = New alarmContentSensor
    Dim alarmPackHomingSensorCovered As alarmContentSensor = New alarmContentSensor 'Hsien , 2015.06.15
#End Region
    Enum stateIgniteEnum
        _0
        _10
        _20
        _30
        _40
        _100
        _110
        _120
        _200
        _300

        _5

    End Enum 'only for stateIgnite
    Enum stateExcuteEnum
        _0
        _10
        _20
        _30
        _40
        _100
        _110
        _120
        _300
        _200
        _1000
    End Enum 'only for stateIgnite
    Sub alarmOccursHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmOccured, PauseBlock.InterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorClamp.drive(motorControl.motorCommandEnum.MOTION_PAUSE)
        End If
    End Sub
    Sub alarmReleaseHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmReleased, PauseBlock.UninterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorClamp.drive(motorControl.motorCommandEnum.MOTION_RESUME)
        End If
    End Sub
    Protected Function stateIgnite() As Integer
        Select Case CType(systemSubState, stateIgniteEnum)
            Case stateIgniteEnum._0
                If FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE) = True Then
                    systemSubState = stateIgniteEnum._5
                End If
            Case stateIgniteEnum._5
                If SpClamp1.IsSensorCovered = True OrElse SpClamp2.IsSensorCovered = True Then
                    systemSubState = stateIgniteEnum._100
                ElseIf motorClamp.drive(motorControl.motorCommandEnum.GO_HOME) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateIgniteEnum._10
                End If
            Case stateIgniteEnum._10
                If motorClamp.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointRelease) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateIgniteEnum._20
                End If
            Case stateIgniteEnum._20 '設定連續動作
                motorClamp.PointTable.AddRange({motorPointClamp, motorPointRelease})
                FinishableFlags.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False)
                systemMainState = systemStatesEnum.EXECUTE
                'systemSubState = 0 '不需要，會自動歸0

            Case stateIgniteEnum._100 'stop motor and check all sensor
                If motorClamp.drive(motorControl.motorCommandEnum.STOP_SLOW_DOWN) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateIgniteEnum._110
                End If
            Case stateIgniteEnum._110
                If SpClamp1.IsSensorCovered = True Then
                    With alarmPackHomingSensorCovered '只有重試
                        .Inputs = SpClamp1.InputBit
                        .PossibleResponse = alarmContextBase.responseWays.RETRY
                        '.Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
                        '.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                        '                                                             Return True
                        '                                                         End Function
                    End With
                    CentralAlarmObject.raisingAlarm(alarmPackHomingSensorCovered)   'Hsien , 2015.06.15 , lack of raising alarm
                ElseIf SpClamp2.IsSensorCovered = True Then
                    'Dim apHomingSensorCovered As alarmContentSensor = New alarmContentSensor
                    'Hsien , 
                    With alarmPackHomingSensorCovered '只有重試
                        .Inputs = SpClamp2.InputBit
                        '.PossibleResponse = alarmContextBase.responseWays.RETRY
                        '.Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
                        '.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                        '                                                             Return True
                        '                                                         End Function
                    End With
                    CentralAlarmObject.raisingAlarm(alarmPackHomingSensorCovered)   'Hsien , 2015.06.15 , lack of raising alarm

                Else
                    systemSubState = stateIgniteEnum._0
                End If
        End Select
        Return 0
    End Function
    Protected Function stateExecute() As Integer
        Select Case CType(systemSubState, stateExcuteEnum)
            Case stateExcuteEnum._0
                If TargetPositionInfo.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                    If TargetPositionInfo.Invoke.IsPositionOccupied = True Then
                        tmr.TimerGoal = New TimeSpan(0, 0, 1)
                        systemSubState = stateExcuteEnum._10
                    Else
                        systemSubState = stateExcuteEnum._100
                    End If
                End If
            Case stateExcuteEnum._10 '確認sensor沒干涉
                If SpClamp1.IsSensorCovered = True AndAlso tmr.IsTimerTicked = True Then
                    alarmPackSensorCovered.Inputs = SpClamp1.InputBit
                    systemSubState = stateExcuteEnum._1000
                ElseIf SpClamp2.IsSensorCovered = True AndAlso tmr.IsTimerTicked = True Then
                    alarmPackSensorCovered.Inputs = SpClamp2.InputBit
                    systemSubState = stateExcuteEnum._1000
                Else
                    systemSubState = stateExcuteEnum._20
                End If
            Case stateExcuteEnum._20
                If motorClamp.drive(motorControl.motorCommandEnum.GO_POSITION_COMBINED) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateExcuteEnum._100
                End If
            Case stateExcuteEnum._100
                TargetPositionInfo.Invoke.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
                systemSubState = stateExcuteEnum._0

            Case stateExcuteEnum._1000 'alarm occured
                alarmPackSensorCovered.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                                   systemSubState = stateExcuteEnum._0
                                                                                                   Return True
                                                                                               End Function
                CentralAlarmObject.raisingAlarm(alarmPackSensorCovered)

        End Select
        Return 0
    End Function

    Function initMappingAndSetup()
        'Me.relatedFlags.AddRange(ShiftFlags.FlagElementsArray)
        'Me.relatedFlags.AddRange(SynchronFlags.FlagElementsArray)
        'If (UpstreamNode IsNot Nothing) Then
        '    Me.relatedFlags.AddRange(UpstreamNode.SynchronFlags.FlagElementsArray) 'relatingFlags
        'End If

        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
        End With


        '預先定義歸Home時，若進出料的位置有片，則馬達立即停止歸Home，並報警
        With alarmPackSensorCovered
            'alarmPackSensorCovered = New alarmContentSensor
            .Sender = Me    'Hsien , 2015.05.14
            .PossibleResponse = alarmContextBase.responseWays.RETRY
            .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
        End With
        With alarmPackHomingSensorCovered
            .Sender = Me
            .PossibleResponse = alarmContextBase.responseWays.RETRY
            .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() (True)

            .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_OFF
        End With

        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE
        initEnableAllDrives() 'enable 此class裡所有的driveBase
        Return 0
    End Function

    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize, New Func(Of Integer)(AddressOf Me.initMappingAndSetup))
    End Sub

End Class
