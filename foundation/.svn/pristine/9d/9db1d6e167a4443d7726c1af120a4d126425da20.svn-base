
Imports Automation
Imports Automation.Components.Services
Imports Automation.Components.CommandStateMachine
Imports Automation.mainIOHardware
Public Enum MDc_Dir
    CCW = 0
    CW = 1
End Enum

Public Class dcMotorPoint
    'the command block for DC motor
    Property DrivingTime As TimeSpan = New TimeSpan(0, 0, 1)
    Property Direction As MDc_Dir = MDc_Dir.CCW
End Class
Public Class dcMotorControl
    Inherits driveBase
    Implements IDrivable


    '----------------------------------
    '   the command is Coincide with compMotor
    '----------------------------------
    Public Enum dcMotorCommands As Integer
        NONE = 0                  ' no command in execute
        'WAIT_RECALL = 1             '
        ''----------------------------
        'GO_HOME = 2
        GO_POSITION = 3         ''given stroke time , would move until point reached
        STOP_FORCELY = 4         ' stop motion immeditatly
        STOP_SLOW_DOWN = 5       ' stop motion in slope
        '---------------------------
        JOG = 6
        'GO_POSITION_OPEN_LOOP = 7
        ''---------------------------
        'WAIT_MOTION_STOP = 8        'Hsien , 2015.01.23 ,   wait hardware stopped signal
        MOTION_PAUSE = 9
        MOTION_RESUME = 10
        ''---------------------------
        'V_CHANGE            ' Hsien , 2014.09.26
        ''---------------------------
        'GO_POSITION_COMBINED    ' Hsien , 2014.09.27
        ''----------------------------
        'START_MOVE  'master mode
        'START_MOVE_SLAVE    'slave mode
        ''----------------------------
        'SYNCHRON_MASTER 'master mode
    End Enum

    Protected Enum driveStateEnum As Integer
        READY
        RUNNING       ' execute the command
        ALARM_HANDLING  ' the state wait user response
        GIVEUP          ' user give up to check sensor
    End Enum

    Protected __commandDriveState As IDrivable.drivenState = IDrivable.drivenState.LISTENING
    Protected __commandEndStatus As IDrivable.endStatus = IDrivable.endStatus.EXECUTION_END
    Protected __commandInExecute As dcMotorCommands = dcMotorCommands.NONE
    Protected driveState As driveStateEnum = driveStateEnum.READY
    Protected __direction As MDc_Dir = MDc_Dir.CW
    Protected __motionPeriod As TimeSpan = New TimeSpan(0, 0, 1)  'indicating how long this move run

    Public ReadOnly Property CommandDrivenState As IDrivable.drivenState Implements IDrivable.CommandDrivenState
        Get
            Return __commandDriveState
        End Get
    End Property

    Public ReadOnly Property CommandEndStatus As IDrivable.endStatus Implements IDrivable.CommandEndStatus
        Get
            If (__commandDriveState = IDrivable.drivenState.WAIT_RECALL) Then
                __commandDriveState = IDrivable.drivenState.LISTENING
            End If
            Return __commandEndStatus
        End Get
    End Property

    Public ReadOnly Property CommandInExecute As Object Implements IDrivable.CommandInExecute
        Get
            Return __commandInExecute
        End Get
    End Property
    Property Direction As MDc_Dir
        Get
            Return __direction
        End Get
        Set(value As MDc_Dir)
            __direction = value
        End Set
    End Property


    Public Function drive(command As [Enum], Optional arg As Object = Nothing) As IDrivable.endStatus Implements IDrivable.drive

        Select Case __commandDriveState
            Case IDrivable.drivenState.LISTENING

                'Hsien , should cast into right type
                Dim __commandInDcMotorCommand As dcMotorCommands = [Enum].ToObject(GetType(dcMotorCommands), command)
                If (__commandInDcMotorCommand.Equals(Nothing)) Then
                    'error , cannot casting , command reject
                    Return IDrivable.endStatus.EXECUTION_END_FAIL
                End If

                '-------------------------
                '   Command accepted
                '-------------------------
                Select Case __commandInDcMotorCommand
                    Case dcMotorCommands.MOTION_PAUSE
                        If (Not __commandInExecute.Equals(dcMotorCommands.MOTION_PAUSE)) Then
                            writeBit(SoStartStop, False)    'temp stop motor
                            timerDelay.IsEnabled = False    'temp stop timer
                            __commandDriveState = IDrivable.drivenState.LISTENING
                            __commandInExecute = dcMotorCommands.MOTION_PAUSE
                            'Return IDrivable.endStatus.EXECUTION_END
                        End If
                    Case dcMotorCommands.MOTION_RESUME
                        If __commandInExecute.Equals(dcMotorCommands.MOTION_PAUSE) Then
                            writeBit(SoStartStop, True)    'resume motor
                            timerDelay.IsEnabled = True    'resume timer
                            __commandDriveState = IDrivable.drivenState.LISTENING
                            __commandInExecute = dcMotorCommands.MOTION_RESUME
                            'Return IDrivable.endStatus.EXECUTION_END
                        End If
                    Case Else

                        '------------------------------
                        '   Able to accept command
                        '-------------------------------
                        __commandInExecute = __commandInDcMotorCommand

                        If (arg IsNot Nothing) Then
                            'the alias function
                            Me.__direction = PositionDictionary(arg).Direction
                            Me.__motionPeriod = PositionDictionary(arg).DrivingTime
                        End If

                        __commandDriveState = IDrivable.drivenState.EXECUTING
                End Select


            Case IDrivable.drivenState.WAIT_RECALL
                '------------------------
                '   Last command had beed executed , this cycle used to rewind
                '------------------------
                __commandDriveState = IDrivable.drivenState.LISTENING
                Return __commandEndStatus
            Case IDrivable.drivenState.EXECUTING
                '--------------------
                '   Do nothing
                '--------------------
        End Select

        Return IDrivable.endStatus.EXECUTING
    End Function
    Public Function drive(command As dcMotorCommands, __direction As MDc_Dir, __period As TimeSpan) As IDrivable.endStatus
        'the alias function
        Me.__direction = __direction
        Me.__motionPeriod = __period
        Return drive(command)
    End Function
    'Public Function drive(command As dcMotorCommands, __pointEnum As [Enum]) As IDrivable.endStatus
    '    'the alias function
    '    Me.__direction = PositionDictionary(__pointEnum).Direction
    '    Me.__motionPeriod = PositionDictionary(__pointEnum).DrivingTime
    '    Return drive(command)
    'End Function

    Public Property TimeoutLimit As TimeSpan Implements IDrivable.TimeoutLimit

    Dim timerDelay As singleTimerContinueType = New singleTimerContinueType With {.TimerGoal = New TimeSpan(0, 0, 5)}
    'Dim tmrStop As singleTimerContinueType = New singleTimerContinueType With {.TimerGoal = New TimeSpan(0, 0, 5)}

    'Dim _Brake_Step As Integer
    'Dim _Move_Step As Integer

    Property SoStartStop As ULong         ' host->driver
    Property SoRunBrake As ULong          ' host->driver
    Property SoDir As ULong               ' host->driver
    Property SoAlmReset As ULong          ' host->driver
    Property SiAlarm As New sensorControl   ' driver->host
    Dim __lastStartStopStatus As Integer    'memorize if start/stop
#Region "command functions"
    Function jogCommand() As IDrivable.endStatus

        '檢查DC馬達是否錯誤
        'Alarm : Normal ON
        If Not _SiAlarm.IsSensorCovered And
            driveState <> driveStateEnum.ALARM_HANDLING Then
            'driver alarm occured and drive state is not on alarm handling , raising alarm


            Call writeBit(_SoRunBrake, False) 'DC馬達剎車
            Call writeBit(_SoStartStop, False) '取消啟動訊號
            Call writeBit(_SoDir, False)

            '_Move_Step = 0

            Dim ap As New alarmContentSensor
            With ap
                .Sender = Me
                .Inputs = _SiAlarm.InputBit
                .PossibleResponse = alarmContextBase.responseWays.RETRY
                .Reason = alarmContentSensor.alarmReasonSensor.SHOULD_BE_ON
                .CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                             driveState = driveStateEnum.READY
                                                                             Return True
                                                                         End Function

            End With

            CentralAlarmObject.raisingAlarm(ap)
            driveState = driveStateEnum.ALARM_HANDLING  'wait user response

        End If


        Select Case driveState
            Case driveStateEnum.READY '(啟動/剎車) 訊號首先致能,然後(Start/Stop)致能
                Call writeBit(_SoRunBrake, True) '1. Run/Brake 首先致能

                If __direction = MDc_Dir.CW Then
                    Call writeBit(_SoDir, True)
                Else
                    Call writeBit(_SoDir, False)
                End If

                With timerDelay
                    .TimerGoal = New TimeSpan(0, 0, 0, 0, 150) '150ms
                    .resetTimer()
                    .IsEnabled = True    'restart
                End With

                '_Move_Step = 5
                driveState = driveStateEnum.RUNNING

            Case driveStateEnum.RUNNING '延遲一段開始RUN所必須的時間
                If timerDelay.IsTimerTicked Then
                    'Dim var As Object
                    'var = DO_ReadBack(_SoDir)
                    writeBit(_SoStartStop, True) '2. Start/Stop 第二致能

                    Return IDrivable.endStatus.EXECUTION_END
                    '_Move_Step = 0
                Else
                    '------------------------
                    '   Wait delay time comes
                    '------------------------
                End If
            Case driveStateEnum.ALARM_HANDLING
                'wait user responsing , Hsien , 2015.06.03
            Case driveStateEnum.GIVEUP

        End Select


        Return IDrivable.endStatus.EXECUTING

    End Function
    Public Function stopCommand() As IDrivable.endStatus

        Select Case driveState
            Case driveStateEnum.READY 'DC馬達剎車
                Call writeBit(_SoRunBrake, False) 'DC馬達剎車

                With timerDelay
                    .TimerGoal = New TimeSpan(0, 0, 0, 0, 150) '150ms
                    .resetTimer()
                    .IsEnabled = True    'restart
                End With

                driveState = driveStateEnum.RUNNING

            Case driveStateEnum.RUNNING '清除(Start/Stop)和(CW/CCW)訊號
                If timerDelay.IsTimerTicked Then
                    Call writeBit(_SoStartStop, False) '取消啟動訊號
                    Call writeBit(_SoDir, False) '取消方向訊號

                    Return IDrivable.endStatus.EXECUTION_END

                Else
                    '-----------
                    '   Wait timer ticked
                    '-----------
                End If
        End Select

        Return IDrivable.endStatus.EXECUTING

    End Function
#End Region

    Protected commandDictionary As Dictionary(Of [Enum], IDrivable.commandFunctionPrototype) = New Dictionary(Of [Enum], IDrivable.commandFunctionPrototype)
    Property PositionDictionary As Dictionary(Of [Enum], dcMotorPoint) = New Dictionary(Of [Enum], dcMotorPoint)  ' mapping the local position index to global position index


    Sub New()
        '-----------------------
        '   Initializing Command functions
        '-----------------------
        commandDictionary.Add(dcMotorCommands.JOG, AddressOf jogCommand)
        commandDictionary.Add(dcMotorCommands.STOP_FORCELY, AddressOf stopCommand)
        commandDictionary.Add(dcMotorCommands.STOP_SLOW_DOWN, AddressOf stopCommand)

        commandDictionary.Add(dcMotorCommands.MOTION_PAUSE, Function() (IDrivable.endStatus.EXECUTION_END))
        commandDictionary.Add(dcMotorCommands.MOTION_RESUME, Function() (IDrivable.endStatus.EXECUTION_END))


    End Sub


    Protected Overrides Function process() As Integer

        '---------------------------
        '   Driven state-mahcine
        '---------------------------
        Select Case __commandDriveState
            Case IDrivable.drivenState.LISTENING,
                IDrivable.drivenState.WAIT_RECALL
                Return 0
            Case IDrivable.drivenState.EXECUTING
                '--------------------------------
                '   Executing
                '--------------------------------
                __commandEndStatus = commandDictionary(__commandInExecute)()
                If (__commandEndStatus And IDrivable.endStatus.EXECUTION_END) Then
                    driveState = driveStateEnum.READY       'rewind
                    __commandDriveState = IDrivable.drivenState.WAIT_RECALL
                End If

        End Select

        Return 0
    End Function

    Public Overrides Function raisingGUI() As Control
        '----------------------------------------------------
        '   Hsien , 2015.02.05
        '----------------------------------------------------
        Dim uc As userControlDrivable = New userControlDrivable
        With uc
            .Component = Me
            .PropertyView = MyBase.raisingGUI()
        End With
        Return uc
    End Function

    Public Function getCommands() As ICollection Implements IDrivable.getCommands
        Return commandDictionary.Keys
    End Function
End Class
