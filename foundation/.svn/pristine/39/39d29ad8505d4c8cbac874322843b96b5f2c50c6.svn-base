Imports System.Xml.Serialization
Imports System.IO
Imports System.ComponentModel

<Serializable()>
Public Class shiftDataCollection
    Inherits shiftDataPackBase
    Implements IPersistance
    '--------------------------------------------------------------------------
    '   Regular the Row Data (a datapack per arm pick'n place on PECVD machine)
    '--------------------------------------------------------------------------
    <XmlIgnore()> Overridable Property DataCount As Integer
        Get
            Return DataCollection.Count
        End Get
        Set(value As Integer)
            '-----------------------------------------------
            '   Reload wafer data
            '-----------------------------------------------
            DataCollection.Clear()
            Dim index As Integer = 0
            For index = 0 To value - 1
                DataCollection.Add(Activator.CreateInstance(DataType))
            Next
        End Set
    End Property
    <XmlIgnore()> Overridable Property DataType As Type
        Get
            Return __dataType
        End Get
        Set(value As Type)
            __dataType = value
            For index = 0 To DataCount - 1
                DataCollection(index) = Activator.CreateInstance(__dataType)
            Next
        End Set
    End Property
    Overridable ReadOnly Property IsAnyRemained As Boolean
        Get
            Dim isRemain As Boolean

            ' scan if any wafer remain
            For Each isOccupied As shiftDataPackBase In DataCollection
                isRemain = isRemain Or isOccupied.IsPositionOccupied
            Next

            Return isRemain
        End Get
    End Property
    Overridable ReadOnly Property IsAllOccupied As Boolean
        Get
            ' scan if any wafer remain
            For Each isOccupied As shiftDataPackBase In DataCollection
                If Not isOccupied.IsPositionOccupied Then
                    Return False
                End If
            Next
            Return True
        End Get
    End Property

    Public Property DataCollection As List(Of shiftDataPackBase) = New List(Of shiftDataPackBase)
    <XmlIgnore()> Protected __dataType As Type = GetType(shiftDataPackBase)

    Overrides Function Clone() As Object
        '-------------------------------------------
        '   Full Depth copy
        '-------------------------------------------
        'Dim copy As shiftDataCollection = MemberwiseClone() 'error found , moduleAction/moduleCycleTimer linked , doesnt cloned
        '-------------------------
        '   Reference Type Deep Clone
        '-------------------------
        Dim copy As shiftDataCollection = MyBase.Clone()

        With copy
            .DataCollection = New List(Of shiftDataPackBase)        'regenerate reference
            .DataType = Me.DataType
            .DataCount = Me.DataCount
            .Assign(Me)
        End With

        Return copy

    End Function

    Public Overrides Sub Assign(source As Object)
        MyBase.Assign(source)       ' occupied status assignment
        '-------------------------------------
        '   Whole wafer data assignment
        '-------------------------------------
        With CType(source, shiftDataCollection)
            Dim index As Integer
            For index = 0 To .DataCollection.Count - 1
                'CTypeDynamic(WaferDatas(index), WaferDatas(index).GetType).Assign(source.WaferDatas(index))
                Me.DataCollection(index).Assign(.DataCollection(index))
            Next
        End With
    End Sub


#Region "Persistance interface"
    Public Overridable Sub Create(filename As String) Implements IPersistance.Create
        Me.Filename = filename  'memorize the anchor filename
        Me.Save()
    End Sub

    <XmlIgnore()>
    <Browsable(False)>
    Public Property Filename As String Implements IPersistance.Filename

    Public Overridable Sub Load(filename As String) Implements IPersistance.Load
        Try
            Using stream As FileStream = New FileStream(filename, FileMode.Open) '2015.7.23 jk add
                    Dim __typeList As List(Of Type) = New List(Of Type)
                    collectTypes(__typeList, Me)

                    Dim tempLaneData As shiftDataCollection = utilities.getSerializer(Me.GetType, __typeList).Deserialize(stream)

                    Me.Assign(tempLaneData) 'value assignment

                    Me.Filename = filename  'memorize the anchor filename
            End Using

        Catch ex As Exception
            '-------------------------------------------
            '   Loading failure , may due to file broken
            '-------------------------------------------
            Throw
        End Try

    End Sub

    Public Overridable Sub Save() Implements IPersistance.Save
        '----------------------------------------------------------------------
        '   Save current status into file , filename have to be assigned before
        '----------------------------------------------------------------------
        Try
            Using stream As FileStream = New FileStream(Me.Filename, FileMode.Create, FileAccess.Write) 'create or override

                Dim __typeList As List(Of Type) = New List(Of Type)
                collectTypes(__typeList, Me)

                utilities.getSerializer(Me.GetType, __typeList).Serialize(stream, Me)

            End Using
        Catch ex As Exception
            '-------------------------------------------
            '  Saving failure , may due to file broken
            '-------------------------------------------
            Throw
        End Try

    End Sub

    Shared Function collectTypes(__list As List(Of Type), __nextCollection As shiftDataPackBase) As Integer
        Dim __collection As shiftDataCollection = TryCast(__nextCollection, shiftDataCollection)

        If (__collection IsNot Nothing) Then
            __list.Add(__collection.DataType)
            Return collectTypes(__list, __collection.DataCollection.First)
        Else
            Return 0
        End If

    End Function


#End Region

End Class

'Hsien , 2015.09.08 , used to control tray status
Public Enum trayReservedUnloadingStatesEnum
    NO_REQUEST
    WAIT_WAFER_UNLOADING
    WAIT_REMOVE_OUT
End Enum

Public Class trayDataBase
    Inherits shiftDataCollection
    Implements IPersistance
    '-----------------------------------------------------------------------------
    '   Data Graph Depiction
    '   lane0   waferData0      waferData0  ................waferDataN (DataCount)
    '   lane1   waferData0      waferData0  ................waferDataN (DataCount)
    '   .
    '   .
    '   laneN   waferData0      waferData0  ................waferDataN (DataCount)
    '   (LaneCount)
    '-----------------------------------------------------------------------------
    <XmlIgnore()>
    <Browsable(False)>
    Property LaneCount As Integer
        Get
            Return DataCollection.Count
        End Get
        Set(value As Integer)
            '-----------------------------------------------
            '   Reload wafer data
            '-----------------------------------------------
            DataCollection.Clear()
            Dim index As Integer = 0
            For index = 0 To value - 1
                DataCollection.Add(New shiftDataCollection() With {.DataType = DataType,
                                                            .DataCount = value})        'as squre array
            Next
        End Set
    End Property
    Public Function IndexOfLane(Index As Integer) As shiftDataCollection
        Return CType(DataCollection(Index), shiftDataCollection)
    End Function

    <XmlIgnore()>
    <Browsable(False)>
    Overrides Property DataCount As Integer
        Get
            Return CType(DataCollection(0), shiftDataCollection).DataCount
        End Get
        Set(value As Integer)
            For Each lane As shiftDataCollection In DataCollection
                lane.DataCount = value
            Next
        End Set
    End Property

    'as element data type
    <XmlIgnore()>
    <Browsable(False)>
    Public Overrides Property DataType As Type
        Get
            '-------------------------------------------
            '   _dataType = wafer data type (type of element)
            '-------------------------------------------
            Return __dataType 'CType(DataCollection(0), shiftDataCollection).DataType
        End Get
        Set(value As Type)
            For Each lane As shiftDataCollection In DataCollection
                lane.DataType = value
            Next
            __dataType = value
        End Set
    End Property

    Overrides Function Clone() As Object
        Dim copy As trayDataBase = MemberwiseClone()
        With copy

            .ModuleAction = New flagController(Of interlockedFlag)  'Hsien , 2015.05.26 , the instance need to duplicate
            .ModuleCycleTimer = New Components.Services.singleTimer

            .DataCollection = New List(Of shiftDataPackBase)
            .DataType = Me.DataType
            .LaneCount = Me.LaneCount           'derived property need to be called , hsien , 2015.02.08
            .DataCount = Me.DataCount
            .Assign(Me)
        End With
        Return copy
    End Function

    Public Overrides Sub Assign(source As Object)
        MyBase.Assign(source)
        LogicTrayId = CType(source, trayDataBase).LogicTrayId   'Hsien , 2015.04.22
        TrayCounter = CType(source, trayDataBase).TrayCounter   'Hsien , 2015.07.15 , missed tray counter assignment
        TrayReservedUnloadingState = source.TrayReservedUnloadingState
    End Sub


    Public Shared DefaultTrayId As Integer = &HFF   'Hsien , 2015.06.12
    Property LogicTrayId As Integer = &HFF   'the tray id calculated by queue/read from sensor
    Property TrayCounter As Integer = 0     'the tray count to record how many time this tray had used , Hsien  ,2015.06.08
    '-----------------------------------
    '   Special Function States
    '-----------------------------------
    <XmlIgnore()> Property TrayReservedUnloadingState As trayReservedUnloadingStatesEnum = trayReservedUnloadingStatesEnum.NO_REQUEST  'Hsien , 2015.09.08



    Sub clearAllOccuipedStatus()
        '--------------------
        'Hsien , 2015.04.14
        '--------------------
        Me.DataCollection.ForEach(Sub(__lane As shiftDataCollection)
                                      __lane.IsPositionOccupied = False
                                      __lane.DataCollection.ForEach(Sub(__data As shiftDataPackBase) __data.IsPositionOccupied = False)
                                  End Sub)
    End Sub
    Sub fillAllOccuipedStatus()
        '--------------------
        'Hsien , 2015.04.14
        '--------------------
        Me.DataCollection.ForEach(Sub(__lane As shiftDataCollection) __lane.DataCollection.ForEach(Sub(__data As shiftDataPackBase) __data.IsPositionOccupied = True))
    End Sub


    Public Overrides ReadOnly Property IsAnyRemained As Boolean
        'Hsien , 2015.08.12 , defination overrided 
        Get
            Return DataCollection.Exists(Function(__row As shiftDataCollection) (__row.IsAnyRemained))
        End Get
    End Property
    Public Overrides ReadOnly Property IsAllOccupied As Boolean
        Get
            Return DataCollection.TrueForAll(Function(__row As shiftDataCollection) (__row.IsAllOccupied))
        End Get
    End Property

    Public ReadOnly Property TotalCount() As Integer
        'reflect total data counts
        Get
            Dim __totalCount As Integer = 0
            Me.DataCollection.ForEach(Sub(__lane As shiftDataCollection)
                                          __totalCount += __lane.DataCollection.Sum(Function(__data As shiftDataPackBase) As Integer
                                                                                        If (__data.IsPositionOccupied) Then
                                                                                            Return 1
                                                                                        Else
                                                                                            Return 0
                                                                                        End If
                                                                                    End Function)
                                      End Sub)
            Return __totalCount
        End Get
    End Property


End Class
