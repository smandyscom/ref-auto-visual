Imports Automation

Public Class userControlTray
    Property IsMirror As Boolean = False 'row-row mirror
    Property IsLaneMirror As Boolean = False    'the element in lane mirror
    Property TrayReference As Func(Of trayDataBase)   'as reference
        Get
            Return __trayData
        End Get
        Set(value As Func(Of trayDataBase))
            If (value IsNot Nothing) Then

                timerScan.Enabled = False
                TrayTablayout.Controls.Clear()
                GC.Collect()

                __trayData = value 'Memorize the reference
                TrayContainer_Load(Me, Nothing) 're-form the user control

            End If
        End Set
    End Property
    'Hsien , used to control enginner mode , 2015.06.23
    WriteOnly Property IsLaneOccupiedVisiable As Boolean
        Set(value As Boolean)
            For Each __control As Control In Me.TrayTablayout.Controls
                Dim __lane As userControlLane = TryCast(__control, userControlLane)
                '__lane.LabelIsOccupied.Visible = False
            Next
        End Set
    End Property
    WriteOnly Property IsLaneModuleActionVisiable As Boolean
        Set(value As Boolean)
            For Each __control As Control In Me.TrayTablayout.Controls
                Dim __lane As userControlLane = TryCast(__control, userControlLane)
                '__lane.LabelModuleAction.Visible = False
            Next
        End Set
    End Property

    Dim __trayData As Func(Of trayDataBase)

    Private Sub TrayContainer_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        If __trayData Is Nothing Then
            Exit Sub
        End If

        TrayTablayout.Controls.Clear()
        If (IsMirror) Then


            For index = __trayData.Invoke.DataCollection.Count - 1 To 0 Step -1
                Dim trayDataElement As userControlLane = New userControlLane With {.IsMirror = IsLaneMirror,
                                                                                   .IsElementModuleActionVisualizing = False}
                Dim __index As Integer = index
                trayDataElement.LaneReference(Function() (__trayData.Invoke.DataCollection(__index)))
                TrayTablayout.Controls.Add(trayDataElement)
                TrayTablayout.PerformLayout()
            Next


        Else
            For index = 0 To __trayData.Invoke.DataCollection.Count - 1
                Dim trayDataElement As userControlLane = New userControlLane With {.IsMirror = IsLaneMirror, .IsElementModuleActionVisualizing = False}
                Dim __index As Integer = index
                trayDataElement.LaneReference(Function() (__trayData.Invoke.DataCollection(__index)))
                TrayTablayout.Controls.Add(trayDataElement)
                TrayTablayout.PerformLayout()
            Next
        End If

        SuspendLayout()
        AutoSize = True
        ResumeLayout()

        timerScan.Enabled = True

    End Sub

    Private Sub timerRefresh(sender As Object, e As EventArgs) Handles timerScan.Tick
        utilitiesUI.controlFollowBooleanColor(LabelIsOccupied, __trayData.Invoke.IsPositionOccupied, Color.SkyBlue)
        utilitiesUI.controlFollowBooleanColor(LabelModuleAction, __trayData.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED), Color.OrangeRed)

        LabelID.Text = __trayData.Invoke.LogicTrayId
        LabelCounter.Text = __trayData.Invoke.TrayCounter   'Hsien , 2015.07.20
        'utilitiesUI.controlFollowBooleanColor(LabelLastTray, __trayData.Invoke.IsLastTray And __trayData.Invoke.IsPositionOccupied, Color.Red)   'direct reflect status , 2015.06.17

    End Sub

    'Hsien , 2015.04.15
    Private Sub viewTrayInfo(sender As Object, e As EventArgs) Handles Me.DoubleClick
        Dim __dialog As Form = New Form
        Dim __propertyGrid As PropertyGrid = New PropertyGrid With {.SelectedObject = TrayReference.Invoke}

        __dialog.Controls.Add(__propertyGrid)
        __dialog.Size = New Size(640, 480)
        __propertyGrid.Dock = DockStyle.Fill

        __dialog.AutoSize = True
        __dialog.Show()
    End Sub

    Private Sub labelClick(sender As Label, e As EventArgs) Handles LabelModuleAction.Click, LabelIsOccupied.Click

        'Hsien , 2015.07.22 , offer the possiblity to override tray status
        Select Case sender.Name
            Case LabelModuleAction.Name
                __trayData.Invoke.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, Not __trayData.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED))
            Case LabelIsOccupied.Name
                __trayData.Invoke.IsPositionOccupied = Not __trayData.Invoke.IsPositionOccupied
            Case Else

        End Select


    End Sub

    'Hsie n ,2015.07.20
    Private Sub keyDownEnter(sender As Object, e As PreviewKeyDownEventArgs) 'Handles LabelCounter.PreviewKeyDown
        If (e.KeyCode = Keys.Enter) Then

            Dim __counter As Integer = 0
            If (Integer.TryParse(LabelCounter.Text, __counter)) Then
                TrayReference.Invoke.TrayCounter = __counter    '
            Else
                '----------------
                '   INVALIDE INPUT
                '----------------
            End If

        End If
    End Sub
End Class
