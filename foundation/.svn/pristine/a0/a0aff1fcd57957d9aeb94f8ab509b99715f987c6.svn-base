Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components.Services
Imports Automation.mainIOHardware

#Region "上下料抓手與tray row配置"
' 上下料抓手與tray row配置
'   下料卡匣1<--下料輸送帶1 (......,2,1,0)
'   下料卡匣0<--下料輸送帶0 (......,2,1,0)

'   下料手 1
'   下料手 0
'   
'   tray row 5
'   :
'   tray row 1
'   tray row 0

'   上料手 1
'   上料手 0

'  上料卡匣1 --> 上料輸送帶1 (......,2,1,0)
'  上料卡匣0 --> 上料輸送帶0 (......,2,1,0)
#End Region

Public Class clsLoadingPicker
    Inherits systemControlPrototype
    Implements IFinishableStation
    Implements ITaskDispatchable


    Public Event WaferHadPlaced(ByVal sender As Object, ByVal e As EventArgs)   'Hsien , mark the point when wafer had placed to tray
    ReadOnly Property RowIndexAHadPlaced As Integer
        Get
            Return rowIndex 'Hsien , reflect the row index had placed , 2015.07.15, (MES use)
        End Get
    End Property
    '-------------------------------
    '   Data interface , for task
    '-------------------------------
    Public Property InterlockData As shiftDataCollection Implements ITaskDispatchable.InterlockData
    Public Property TaskData As shiftDataCollection Implements ITaskDispatchable.TaskData
    Property TrayData As Func(Of shiftDataPackBase) Implements IModuleSingle.TargetPositionInfo '待放料的位置的集合

#Region "External Data declare"
    Property safeDistance As Double '設定安全的距離，必須在設定頁面設定

    Public Property rowPickCollection As List(Of shiftDataCollection) '待取物的集合 dimension 0 as pick row index, dimension 1 as wafer position index
    Dim rowPickPointer As shiftDataCollection 'pick row pointer 

    Property rowGripperCollection As List(Of clsRowGripper) '多排吸嘴的集合。ASA-04-005專案為雙排吸嘴真空 0=外側, 1=內側, ASA-04-051為單排吸嘴
    Dim rowGripperPointer As clsRowGripper '手臂上吸嘴排指標

    Function __trayData() As trayDataBase
        Return CType(TrayData.Invoke, trayDataBase)
    End Function
    
    Property motorPointPickCollection As List(Of cMotorPoint) '抓手取料的位置的集合(順序為 抓手1取輸送帶1, 抓手2取輸送帶2, 抓手1取輸送帶2, 抓手2取輸送帶1)
    Property motorPointPickInitial As cMotorPoint '抓手1取輸送帶1(做為初始化的位置)
    Public GetPlacePoint As Func(Of Integer, cMotorPoint)  '由Integer(rowIndex)取得馬達位置
    Public findRowPickPointer As Func(Of shiftDataCollection) = AddressOf _findRowPickPointer
    Public GetPrePickPoint As Func(Of clsRowGripper, shiftDataCollection, Object) =
        Function(rowGripper As clsRowGripper, pickRow As shiftDataCollection) As Object
            Return {motorPointPickInitial, cylinderControlTwin.cylinderCommands.GO_A_END, rowGripper, pickRow}
        End Function 'default function return 

    Public GetPickPoint As Func(Of clsRowGripper, shiftDataCollection, Object)  '由Integer(rowIndex)取得馬達位置
    Public IsAbleMove As Func(Of cMotorPoint, Boolean) '取得上料手的位置與目的地，及自己(下料手)的位置與目的地，來互鎖
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations

    Public gripperDownDelayTimePick As TimeSpan = New TimeSpan(0, 0, 0, 0, 200)
    Public gripperDownDelayTimePlace As TimeSpan = New TimeSpan(0, 0, 0, 0, 200)
#End Region
#Region "Device declare"
    Property motorPicker As motorControl = New motorControl With {.TimeoutLimit = New TimeSpan(0, 1, 30)}
    Property cyShift As cylinderControlTwin = New cylinderControlTwin '橫移氣缸(因為motorPicker行程不夠，故增加氣缸增加行程)

#End Region

#Region "Data declare"
    Dim tmr As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 1)}
    Dim rowIndex As Integer
    Dim motorPointPointer As cMotorPoint
#End Region

    Enum stateIgniteEnum
        _0
        _10
        _20
        _100

        _30

        _5

    End Enum
    Enum ExcuteEnum
        '--------------------------
        '   IDLE for Conveyor
        '--------------------------
        _0
        _100
        _110
        PRE_ACTION
        '--------------------------
        '   Wafer Pick Procedure
        '--------------------------
        _200
        _210
        _300
        _305
        _310
        _320
        _330
        _340
        '--------------------------
        '   IDLE for Tray
        '--------------------------
        WAIT_TASK_COMING
        CHECK_IF_UNLOAD_COMPLETE
        '--------------------------
        '   Wafer Place Procedure
        '--------------------------
        LOAD_PLACE_STARTED
        _530
        _540
        _550
        _560
        _570
        _580
    End Enum
    Protected Function stateIgnite() As Integer

        Select Case systemSubState
            Case stateIgniteEnum._0
                If FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE) = True Then
                    systemSubState = stateIgniteEnum._5
                End If
            Case stateIgniteEnum._5
                rowGripperCollection.ForEach(Sub(rowGripper As clsRowGripper)
                                                 rowGripper.cyDown.drive(cylinderControl.cylinderCommandEnum.GO_OFF_END)
                                             End Sub)
                cyDrive(cyShift, cylinderControlTwin.cylinderCommands.GO_A_END) '回原點
                systemSubState = stateIgniteEnum._10
            Case stateIgniteEnum._10

                If rowGripperCollection.TrueForAll(Function(rowGripper As clsRowGripper) As Boolean
                                                       Return rowGripper.cyDown.CommandEndStatus = cylinderControl.statusEnum.EXECUTION_END
                                                   End Function) AndAlso
                     (cyShift Is Nothing OrElse cyShift.CommandEndStatus = IDrivable.endStatus.EXECUTION_END) Then
                    systemSubState = stateIgniteEnum._20
                End If
            Case stateIgniteEnum._20
                If motorPicker.drive(motorControl.motorCommandEnum.GO_HOME) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateIgniteEnum._30
                End If
            Case stateIgniteEnum._30
                If motorPicker.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointPickInitial) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = stateIgniteEnum._100
                End If
            Case stateIgniteEnum._100
                FinishableFlags.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False)
                systemMainState = systemStatesEnum.EXECUTE
        End Select

        Return 0
    End Function
    

    Sub alarmOccursHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmOccured, PauseBlock.InterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorPicker.drive(motorControl.motorCommandEnum.MOTION_PAUSE)
        End If
    End Sub
    Sub alarmReleaseHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmReleased, PauseBlock.UninterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorPicker.drive(motorControl.motorCommandEnum.MOTION_RESUME)
        End If
    End Sub
    Protected Function stateExecute() As Integer

        Static cylinderCommand As cylinderControlTwin.cylinderCommands

        findRowPickPointer.Invoke()

        Select Case systemSubState
            Case ExcuteEnum._0 '取得該rowIndex及rowIndex+1是否需要放片

                'all gripper had to pick up , Hsien , 2015.10.23
                rowGripperCollection.ForEach(Sub(__gripper As clsRowGripper) __gripper.rowWaferInfo.ModuleAction.setFlag(interlockedFlag.POSITION_OCCUPIED))
                systemSubState = ExcuteEnum._100

            Case ExcuteEnum._100 '判斷要移到哪個取料
                '確認哪排手無料
                '確認哪排位置可取
                '優先順序
                '1. 內側手(1)取內側輸送帶(1)
                '2. 外側手(0)取外側輸送帶(0)
                '3. 外側手(0)取內側輸送帶(1)
                '4. 內側手(1)取外側輸送帶(0)(必須動氣缸)
                '檢查所有的吸嘴排是否都完成任務
                rowGripperPointer = rowGripperCollection.Find(Function(obj As clsRowGripper) As Boolean
                                                                  Return obj.rowWaferInfo.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True
                                                              End Function)
                If rowGripperPointer Is Nothing Then '都取完成
                    '至少有一排row有取，則要放片至tray
                    If rowGripperCollection.Exists(Function(obj As clsRowGripper) (obj.rowWaferInfo.IsAnyRemained = True)) = True Then
                        systemSubState = ExcuteEnum.WAIT_TASK_COMING
                    Else
                        'systemSubState = ExcuteEnum._600 '此兩個row都完成任務，但仍無料在吸嘴上，則跳至下兩個row取得任務。
                    End If
                Else '取得尚未完成的吸嘴排(指標)
                    systemSubState = ExcuteEnum._110
                End If
            Case ExcuteEnum._110 '檢查哪個待取排可取料
                rowPickPointer = findRowPickPointer.Invoke

                If rowPickPointer Is Nothing Then '沒有任何的待取排可取料
                    '檢查馬達位置是否在待取排上方，若否，則移動至第0個待取排上方
                    If motorPointPickCollection.Contains(motorPointPointer) = False Then
                        Dim obj As Array = GetPrePickPoint(rowGripperPointer, rowPickPointer) '改成把整個手與整個待取排一起傳進去看
                        motorPointPointer = obj(0)
                        cylinderCommand = obj(1)
                        rowGripperPointer = obj(2)
                        rowPickPointer = obj(3)
                        motorPicker.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointPointer)
                        cyDrive(cyShift, cylinderCommand)
                        systemSubState = ExcuteEnum.PRE_ACTION
                        '檢查上游站是否都收料結束，若都收料結束，則直接把剩下的料放至Tray盤即可。
                    ElseIf UpstreamStations.TrueForAll(Function(obj As IFinishableStation) (obj.FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED) = True)) = True Then
                        '檢查是否有剩下的料在手上，若有，則放料完
                        If Not rowGripperCollection.Exists(Function(obj As clsRowGripper) (obj.rowWaferInfo.IsAnyRemained)) And
                            (Not FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED)) Then
                            FinishableFlags.setFlag(IFinishableStation.controlFlags.STATION_FINISHED)
                        End If

                        systemSubState = ExcuteEnum.WAIT_TASK_COMING 'had to respond task dispatcher

                    End If

                Else '已找出待取排的位置
                    Dim obj As Array = GetPickPoint(rowGripperPointer, rowPickPointer) '改成把整個手與整個待取排一起傳進去看
                    motorPointPointer = obj(0)
                    cylinderCommand = obj(1)
                    rowGripperPointer = obj(2)
                    rowPickPointer = obj(3)

                    motorPicker.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointPointer)
                    cyDrive(cyShift, cylinderCommand)
                    systemSubState = ExcuteEnum._200
                End If
            Case ExcuteEnum.PRE_ACTION '預先移動至輸送帶正上方
                If motorPicker.CommandEndStatus = motorControl.statusEnum.EXECUTION_END AndAlso
                   (cyShift Is Nothing OrElse cyShift.CommandEndStatus = IDrivable.endStatus.EXECUTION_END) Then
                    systemSubState = ExcuteEnum._110
                End If

                '移動馬達、氣缸至選定的輸送帶
            Case ExcuteEnum._200
                If motorPicker.CommandEndStatus = motorControl.statusEnum.EXECUTION_END AndAlso
                  (cyShift Is Nothing OrElse cyShift.CommandEndStatus = IDrivable.endStatus.EXECUTION_END) Then
                    systemSubState = ExcuteEnum._300
                End If

                'rowGripperPointer 取片從 TargetConveyorPointer
            Case ExcuteEnum._300 'cy下 ，吸嘴已向下，查看該片是否存在，是否需要吸取
                If rowGripperPointer.cyDown.drive(cylinderControl.cylinderCommandEnum.GO_ON_END) = cylinderControl.statusEnum.EXECUTION_END Then
                    tmr.TimerGoal = gripperDownDelayTimePick : tmr.IsEnabled = True
                    systemSubState = ExcuteEnum._305
                End If
            Case ExcuteEnum._305
                If tmr.IsTimerTicked = True Then
                    For i As Integer = 0 To rowGripperPointer.grippers.Count - 1
                        If rowPickPointer.DataCollection(i).IsPositionOccupied = True Then
                            writeBit(rowGripperPointer.grippers(i).Vg, True)
                        End If
                    Next
                    tmr.TimerGoal = New TimeSpan(0, 0, 0, 0, 200)
                    tmr.IsEnabled = True
                    systemSubState = ExcuteEnum._310
                End If
            Case ExcuteEnum._310 'cy up
                If tmr.IsTimerTicked = True Then
                    For i As Integer = 0 To rowGripperCollection.Count - 1
                        rowGripperCollection(i).cyDown.drive(cylinderControl.cylinderCommandEnum.GO_OFF_END)
                    Next
                    systemSubState = ExcuteEnum._320
                End If
            Case ExcuteEnum._320 'check cylinder up
                Dim allCyDone As Boolean = True
                For i As Integer = 0 To rowGripperCollection.Count - 1
                    If rowGripperCollection(i).cyDown.CommandEndStatus <> cylinderControl.statusEnum.EXECUTION_END Then
                        allCyDone = False
                        Exit For
                    End If
                Next
                If allCyDone = True Then
                    cyDrive(cyShift, cylinderControlTwin.cylinderCommands.GO_A_END)
                    systemSubState = ExcuteEnum._330
                End If
            Case ExcuteEnum._330
                If cyShift Is Nothing OrElse cyShift.CommandEndStatus = IDrivable.endStatus.EXECUTION_END Then
                    systemSubState = ExcuteEnum._340
                End If
            Case ExcuteEnum._340 'reset conveyor module action
                'copy conveyor wafer data to row grippers
                For i As Integer = 0 To rowGripperPointer.grippers.Count - 1
                    rowGripperPointer.rowWaferInfo.DataCollection(i).Assign(rowPickPointer.DataCollection(i))
                    rowPickPointer.DataCollection(i).IsPositionOccupied = False
                Next
                rowPickPointer.DataCollection(0).ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)
                rowGripperPointer.rowWaferInfo.ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED) '清除此排吸嘴的module action
                systemSubState = ExcuteEnum._100

            Case ExcuteEnum.WAIT_TASK_COMING '已吸到料，等待tray ok
                '======================
                ' Wait until Tray comes
                '======================
                If TaskData IsNot Nothing AndAlso
                    TaskData.DataCollection.Exists(Function(__rowTask As shiftDataPackBase) (__rowTask.IsPositionOccupied)) Then 'wait task coming
                    '-------------------------------------
                    'Loading Task had found
                    '------------------------------------
                    rowIndex = TaskData.DataCollection.FindIndex(Function(__rowTask As shiftDataPackBase) (__rowTask.IsPositionOccupied))
                    rowIndex = Math.Truncate(rowIndex / rowGripperCollection.Count) * rowGripperCollection.Count     'have to be multiple of row gripper , 0,2,4 , take the quotient

                    If (FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED)) Then
                        '-----------------------
                        '   Already in finished mode , direct respond task
                        '-----------------------
                        TaskData.DataCollection.ForEach(Sub(__rowTask As shiftDataPackBase) __rowTask.IsPositionOccupied = False)
                        'stayed in this state , Hsien , 2015.10.27
                    Else
                        '-----------------------
                        '   Ready to place wafer
                        '-----------------------
                        systemSubState = ExcuteEnum.CHECK_IF_UNLOAD_COMPLETE
                    End If

                ElseIf UpstreamStations.TrueForAll(Function(upStation As IFinishableStation) (Not upStation.FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED))) And
                    FinishableFlags.viewFlag(IFinishableStation.controlFlags.STATION_FINISHED) Then
                    ''等待上游站收料結束取消
                    ''Hsien , keep responding
                    FinishableFlags.resetFlag(IFinishableStation.controlFlags.STATION_FINISHED) '清除自己收料結束
                    systemSubState = ExcuteEnum._0   're cycle to picking
                Else
                    '-------------------------------
                    '   Task is not coming
                    '-------------------------------
                End If
            Case ExcuteEnum.CHECK_IF_UNLOAD_COMPLETE '查看要放片的該兩排row是否都下料完成(module action off)


                If (InterlockData IsNot Nothing AndAlso
                    InterlockData.DataCollection.GetRange(rowIndex, rowGripperCollection.Count).TrueForAll(Function(__row As shiftDataPackBase) (Not __row.IsPositionOccupied))) Then
                    '--------------------------
                    '   Hsien , make sure target row had unloaded
                    ' 2015.10.23
                    '--------------------------
                    motorPointPointer = GetPlacePoint(rowIndex) '取得該排位置
                    systemSubState = ExcuteEnum.LOAD_PLACE_STARTED
                End If

            Case ExcuteEnum.LOAD_PLACE_STARTED '等待下料手離開
                If IsAbleMove(motorPointPointer) = True Then
                    motorPicker.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointPointer)
                    systemSubState = ExcuteEnum._530
                End If
            Case ExcuteEnum._530 '等待馬達移動完成
                If motorPicker.CommandEndStatus = motorControl.statusEnum.EXECUTION_END Then
                    For i As Integer = 0 To rowGripperCollection.Count - 1
                        rowGripperCollection(i).cyDown.drive(cylinderControl.cylinderCommandEnum.GO_ON_END)
                    Next
                    systemSubState = ExcuteEnum._540
                End If
            Case ExcuteEnum._540 '等待cy down
                Dim allCyDone As Boolean = True
                For i As Integer = 0 To rowGripperCollection.Count - 1
                    If rowGripperCollection(i).cyDown.CommandEndStatus <> cylinderControl.statusEnum.EXECUTION_END Then
                        allCyDone = False
                        Exit For
                    End If
                Next
                If allCyDone = True Then
                    tmr.TimerGoal = gripperDownDelayTimePlace : tmr.IsEnabled = True
                    systemSubState = ExcuteEnum._550
                End If
            Case ExcuteEnum._550 '關真空，開破壞
                If tmr.IsTimerTicked = True Then
                    For i As Integer = 0 To rowGripperCollection.Count - 1
                        'If TrayInfo.DataCollection(rowIndex + i).IsPositionOccupied = False Then
                        For j As Integer = 0 To rowGripperCollection(i).grippers.Count - 1
                            writeBit(rowGripperCollection(i).grippers(j).Vg, False)
                            writeBit(rowGripperCollection(i).grippers(j).Vb, True)
                        Next
                        'End If
                    Next
                    tmr.TimerGoal = New TimeSpan(0, 0, 0, 0, 200) : tmr.IsEnabled = True
                    systemSubState = ExcuteEnum._560
                End If
            Case ExcuteEnum._560 '關破壞
                If tmr.IsTimerTicked = True Then
                    For i As Integer = 0 To rowGripperCollection.Count - 1
                        For j As Integer = 0 To rowGripperCollection(i).grippers.Count - 1
                            writeBit(rowGripperCollection(i).grippers(j).Vb, False)
                        Next
                    Next
                    systemSubState = ExcuteEnum._570
                End If
            Case ExcuteEnum._570 '將抓手上的Data移至該兩排
                ' had placed , and doing data moving , Hsien , 2015.05.22
                For i = 0 To rowGripperCollection.Count - 1

                    __trayData.DataCollection(rowIndex + i).Assign(rowGripperCollection(i).rowWaferInfo)  'assign data from gripper to tray

                    rowGripperCollection(i).cyDown.drive(cylinderControl.cylinderCommandEnum.GO_OFF_END)    'drive cylinder up

                    For j As Integer = 0 To rowGripperCollection(i).rowWaferInfo.DataCollection.Count - 1
                        rowGripperCollection(i).rowWaferInfo.DataCollection(j).IsPositionOccupied = False   'reset gripper data
                    Next

                Next

                TaskData.DataCollection.GetRange(rowIndex, rowGripperCollection.Count).ForEach(Sub(__rowTask As shiftDataPackBase) __rowTask.IsPositionOccupied = False) 'mark off task
                RaiseEvent WaferHadPlaced(Me, Nothing)  'Hsien , 2015.05.22 , used to do wafer data marking , and MES reporting

                systemSubState = ExcuteEnum._580
            Case ExcuteEnum._580 'check cy up
                If (rowGripperCollection.TrueForAll(Function(__gripper As clsRowGripper) (__gripper.cyDown.CommandEndStatus = cylinderControl.statusEnum.EXECUTION_END))) Then
                    'all cylinder had done
                    systemSubState = ExcuteEnum._0
                End If
        End Select
        Return 0

    End Function
    
    Private Sub cyDrive(cy As cylinderControlTwin, ByVal command As cylinderControlTwin.cylinderCommands)
        If cy Is Nothing Then Exit Sub
        cy.drive(command)
    End Sub
    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize, New Func(Of Integer)(AddressOf Me.initMappingAndSetup))
    End Sub

    Function initMappingAndSetup() As Integer

        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
        End With

        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE

        initEnableAllDrives() 'enable 此class裡所有的driveBase
        Return 0
    End Function
    Function _findRowPickPointer() As shiftDataCollection 'default function to find which row to be picked.
        '=== auto reply  ============
        rowPickCollection.ForEach(Sub(__rowPick As shiftDataCollection)
                                      If __rowPick.DataCollection(0).ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) And
                                          Not __rowPick.DataCollection(0).IsPositionOccupied Then
                                          __rowPick.DataCollection(0).ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                                      End If
                                  End Sub)

        '=== default function is to find the last positio is module action and isPositionOccupied. ====
        'default function is to find the last positio is module action and isPositionOccupied.
        Return rowPickCollection.Find(Function(pickRow As shiftDataCollection) (pickRow.DataCollection(0).ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) And
                                              pickRow.DataCollection(0).IsPositionOccupied))
        '最後一片有moduleAction 且 最後一片有片。 
    End Function

    Public Function _findRowPickPointer_must_pick() As shiftDataCollection
        '=== there is no auto reply  ============
        '=== default function is to find the last positio is module action and isPositionOccupied. ====
        'default function is to find the last positio is module action and isPositionOccupied.
        '最後一片有moduleAction 就要抓 
        Return rowPickCollection.Find(Function(pickRow As shiftDataCollection) (pickRow.DataCollection(0).ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED)))

    End Function

End Class
