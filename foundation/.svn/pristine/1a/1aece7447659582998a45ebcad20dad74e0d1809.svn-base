Imports Automation
Imports Automation.Components.Services
Imports System.ComponentModel
Imports System.IO.Ports
Imports System.Text
Imports System.Text.RegularExpressions
Public Interface ISingleWeight
    Property SingleWeightData As Single
End Interface

Public Class clsWeightStation
    Inherits systemControlPrototype
    Implements IFinishableStation

    Public Property TargetPositionInfo As shiftDataPackBase 'Func(Of shiftDataPackBase) Implements IModuleSingle.TargetPositionInfo 'link to lane
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations

    

    Public cyClose As cylinderControl = New cylinderControl
    Dim __serialPort As SerialPort = New SerialPort
    Dim comOpen As Boolean = False 'serialPort opened ornot
    Dim tmr As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 1)}
    Dim ap As alarmContextBase = New alarmContextBase With {.PossibleResponse = alarmContextBase.responseWays.RETRY Or alarmContextBase.responseWays.IGNORE}
    Dim weightRecord As Double '儲存上次秤重紀錄值

    Dim retryCount As UInteger = 0
    Public Event WeightEngaged(ByVal sender As Object, ByVal e As EventArgs)
    Public Enum ControlEnum
        Bypass
        Initialize 'for make balance to be zero 
        ReadError
    End Enum
    Public controlFlag As flagController(Of ControlEnum) = New flagController(Of ControlEnum)
#Region "Device declare"
    <DisplayName("設定串列埠名稱")> Property ComPort As String
        Get
            Return __serialPort.PortName
        End Get
        Set(value As String)
            '1. com port name
            '2. baud rate
            '3. odd check
            '4. data bit length
            '5. stop bit
            __serialPort = New SerialPort(value,
                                          9600,
                                          Parity.None,
                                          8,
                                          StopBits.One)
            Try
                'reopen , and clear buffer content
                With __serialPort
                    .Open()
                    .DiscardInBuffer()
                    .DiscardOutBuffer()
                    .Encoding = Encoding.ASCII
                    comOpen = __serialPort.IsOpen  'if serialPort open successed, comOpen = True
                End With
            Catch ex As Exception
                comOpen = False
                MsgBox("Error Open: " & ex.Message)
            End Try

        End Set
    End Property



#End Region

    Private Function stateIGNITE() As Integer
        Select Case systemSubState
            Case 0
                If FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE) = True Then
                    cyClose.drive(cylinderControl.cylinderCommandEnum.GO_OFF_END) '不做動下秤重蓋為open
                    ap.CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                    systemSubState = 200
                                                                                    Return True
                                                                                End Function
                    systemSubState = 10
                End If

            Case 10 'open gate
                If cyClose.CommandEndStatus = cylinderControl.statusEnum.EXECUTION_END Then
                    systemSubState = 20
                End If

            Case 20 'check bypass
                If controlFlag.viewFlag(ControlEnum.Bypass) Then
                    systemSubState = 200
                Else
                    systemSubState = 30
                End If

            Case 30 'isnitialize the balance setting
                clearSerialBuffer()
                __serialPort.Write("M80 0 0" & vbLf) 'disable auto shutdown
                tmr.IsEnabled = True
                systemSubState = 40

            Case 40 'check balance return command acknowledge
                If __serialPort.ReadExisting.Equals("M80 A" & vbCrLf & "") Then
                    systemSubState = 50
                ElseIf tmr.IsTimerTicked Then
                    ap.AdditionalInfo = "秤重機未回傳命令確認"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 30
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)

                End If


            Case 50 'command set for alaways on backLight
                clearSerialBuffer()
                __serialPort.Write("M81 1 0" & vbLf)
                tmr.IsEnabled = True
                systemSubState = 60

            Case 60 'check balance return command acknowledge
                If __serialPort.ReadExisting.Equals("M81 A" & vbCrLf & "") Then
                    systemSubState = 70
                ElseIf tmr.IsTimerTicked Then
                    ap.AdditionalInfo = "秤重機未回傳命令確認"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 50
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)

                End If


            Case 70 'set zero
                clearSerialBuffer()
                __serialPort.Write("Z" & vbLf)
                tmr.IsEnabled = True
                systemSubState = 75

            Case 75
                If tmr.IsTimerTicked = True Then
                    tmr.IsEnabled = True
                    systemSubState = 80
                End If

            Case 80
                If __serialPort.ReadExisting.Equals("Z A" & vbCrLf & "") Then
                    systemSubState = 90
                ElseIf tmr.IsTimerTicked Then
                    ap.AdditionalInfo = "秤重機未回傳命令確認"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 70
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)

                End If

            Case 90 'check stable weight is 0
                clearSerialBuffer()
                __serialPort.Write("S" & vbLf)
                tmr.IsEnabled = True
                systemSubState = 95

            Case 95
                If tmr.IsTimerTicked Then
                    systemSubState = 100
                    tmr.IsEnabled = True
                End If

            Case 100
                If getWeight() = 0 Then
                    systemSubState = 200
                ElseIf tmr.IsTimerTicked Then
                    ap.AdditionalInfo = "秤重機未在穩定狀態"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 70
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)

                End If

            Case 200
                systemSubState = 0
                FinishableFlags.resetFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)
                ap.CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                                systemSubState = 100
                                                                                Return True
                                                                            End Function
                systemMainState = systemStatesEnum.EXECUTE



        End Select
        Return 0
    End Function
    Private Function stateExecute() As Integer

        '必須在待機環境下才可由外部歸零
        If controlFlag.readFlag(ControlEnum.Initialize) AndAlso systemSubState = 0 Then
            FinishableFlags.setFlag(IFinishableStation.controlFlags.COMMAND_IGNITE)
            systemMainState = systemStatesEnum.IGNITE
        End If

        Select Case systemSubState

            Case 0
                If TargetPositionInfo.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) Then
                    systemSubState = 10
                ElseIf controlFlag.readFlag(ControlEnum.ReadError) Then
                    systemSubState = 200
                Else
                    '----------------------
                    ' wait for Trigger
                    '---------------------
                End If

            Case 10
                If controlFlag.viewFlag(ControlEnum.Bypass) Then
                    'Realease ModuleAction
                    systemSubState = 100
                Else
                    systemSubState = 20 'do it
                End If

            Case 20 'close gate
                If cyClose.drive(cylinderControl.cylinderCommandEnum.GO_ON_END) = cylinderControl.statusEnum.EXECUTION_END Then
                    systemSubState = 30
                End If

            Case 30 'check balance immediately value
                clearSerialBuffer()
                __serialPort.Write("SI" & vbLf)
                tmr.IsEnabled = True
                systemSubState = 40

            Case 40
                If tmr.IsTimerTicked Then
                    systemSubState = 50
                End If


            Case 50 '檢查秤重質是否區近於穩定
                Dim currentValue As Double = getWeight() '必須確保大於0 (有片 & 有回傳)
                If currentValue > 0 AndAlso Math.Abs(weightRecord - currentValue) < 0.01 AndAlso retryCount < 3 Then
                    retryCount = 0
                    weightRecord = 0
                    systemSubState = 60
                ElseIf retryCount >= 3 Then
                    ap.AdditionalInfo = "秤重機未在穩定狀態"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   retryCount = 0
                                                                                   weightRecord = 0
                                                                                   systemSubState = 30
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)
                Else
                    weightRecord = currentValue 'record last time value
                    retryCount += 1
                    tmr.IsEnabled = True
                    systemSubState = 30
                End If

            Case 60 'get Stable Value
                clearSerialBuffer()
                __serialPort.Write("S" & vbLf)
                tmr.IsEnabled = True
                systemSubState = 65

            Case 65
                If tmr.IsTimerTicked Then
                    tmr.TimerGoal = New TimeSpan(0, 0, 5)
                    tmr.IsEnabled = True
                    systemSubState = 70
                End If

            Case 70
                Dim currentValue As Double = getWeight()
                If currentValue > 0 Then
                    CType(TargetPositionInfo, ISingleWeight).SingleWeightData = currentValue
                    tmr.TimerGoal = New TimeSpan(0, 0, 1)
                    RaiseEvent WeightEngaged(Me, Nothing)
                    systemSubState = 100
                ElseIf tmr.IsTimerTicked Then
                    ap.AdditionalInfo = "秤重機未在穩定狀態"
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 60
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)
                End If



                '------------------------
                'end of balance process
                '-------------------------

            Case 100 'open gates
                If cyClose.drive(cylinderControl.cylinderCommandEnum.GO_OFF_END) = cylinderControl.statusEnum.EXECUTION_END Then
                    systemSubState = 110
                End If

            Case 110 'Release ModuleAction
                TargetPositionInfo.ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                systemSubState = 0


                '----------------------------
                'Read Error Message
                '-----------------------------
            Case 200
                clearSerialBuffer()
                __serialPort.Write("E01" & vbLf) 'Query of current system error state
                tmr.IsEnabled = True
                systemSubState = 210

            Case 210
                If tmr.IsTimerTicked Then
                    ap.AdditionalInfo = __serialPort.ReadExisting
                    ap.CallbackResponse(alarmContextBase.responseWays.RETRY) = Function() As Boolean
                                                                                   systemSubState = 0
                                                                                   Return True
                                                                               End Function
                    CentralAlarmObject.raisingAlarm(ap)

                End If


        End Select

        Return 0
    End Function
    Function initMappingAndSetup() As Integer
        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
            .AddRange(controlFlag.FlagElementsArray)
        End With


        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIGNITE
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE
        ap.CallbackResponse(alarmContextBase.responseWays.IGNORE) = Function() As Boolean
                                                                        controlFlag.setFlag(ControlEnum.Bypass)
                                                                        systemSubState = 0
                                                                        Return True
                                                                    End Function

        Return 0
    End Function



    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize,
                                       New Func(Of Integer)(AddressOf initLinkPause),
                               New Func(Of Integer)(AddressOf initMappingAndSetup),
                               New Func(Of Integer)(AddressOf initSubsystemInitialize),
                               New Func(Of Integer)(AddressOf initEnableAllDrives))

    End Sub
    Private Sub clearSerialBuffer()
        __serialPort.DiscardInBuffer()
        __serialPort.DiscardOutBuffer()
    End Sub
    Private Function getWeight() As Double
        Dim match As Match = Regex.Match(__serialPort.ReadExisting, "((\w\s+)+)(\d+\.\d+)")
        If match.Success Then
            Return CDbl(match.Groups(3).Value)
        Else
            Return -1
        End If
    End Function
End Class
