Imports Automation
Imports Automation.Components.CommandStateMachine
Imports Automation.Components.Services

Public Class clampMark2
    Inherits systemControlPrototype
    Implements IModuleSingle
    Implements IFinishableStation

    'use GO_POSITION rather GO_POSITION_COMBINED , and do some timer delay
    'release module action when after delayed time comes

#Region "Device declare"
    Property motorClamp As motorControl = New motorControl
#End Region
#Region "External Data declare"
    Property motorPointClamp As cMotorPoint
    Property motorPointRelease As cMotorPoint
    Property TargetPositionInfo As Func(Of shiftDataPackBase) Implements IModuleSingle.TargetPositionInfo
    Public Property FinishableFlags As New flagController(Of IFinishableStation.controlFlags) Implements IFinishableStation.FinishableFlags
    Public Property UpstreamStations As List(Of IFinishableStation) Implements IFinishableStation.UpstreamStations
#End Region
#Region "Internal Data declare"
    Dim __timer As singleTimer = New singleTimer With {.TimerGoal = New TimeSpan(0, 0, 0, 0, 50)}
#End Region

    Property SpClamp1 As Object

    Sub alarmOccursHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmOccured, PauseBlock.InterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorClamp.drive(motorControl.motorCommandEnum.MOTION_PAUSE)
        End If
    End Sub
    Sub alarmReleaseHandler(sender As Object, e As alarmEventArgs) Handles CentralAlarmObject.alarmReleased, PauseBlock.UninterceptedEvent
        If (MainState = systemStatesEnum.IGNITE) Then
            motorClamp.drive(motorControl.motorCommandEnum.MOTION_RESUME)
        End If
    End Sub
    Protected Function stateIgnite() As Integer
        Select Case systemSubState
            Case 0
                If FinishableFlags.viewFlag(IFinishableStation.controlFlags.COMMAND_IGNITE) = True Then
                    systemSubState = 5
                End If
            Case 5
                If motorClamp.drive(motorControl.motorCommandEnum.GO_HOME) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = 10
                End If
            Case 10
                If motorClamp.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointRelease) = motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = 20
                End If
            Case 20 '設定連續動作

                FinishableFlags.writeFlag(IFinishableStation.controlFlags.COMMAND_IGNITE, False)
                systemMainState = systemStatesEnum.EXECUTE
                'systemSubState = 0 '不需要，會自動歸0
        End Select
        Return 0
    End Function
    Protected Function stateExecute() As Integer
        Select Case systemSubState
            Case 0
                If TargetPositionInfo.Invoke.ModuleAction.viewFlag(interlockedFlag.POSITION_OCCUPIED) = True Then
                    If TargetPositionInfo.Invoke.IsPositionOccupied = True Then
                        systemSubState = 10
                    Else
                        TargetPositionInfo.Invoke.ModuleAction.resetFlag(interlockedFlag.POSITION_OCCUPIED)
                    End If
                Else
                    '
                End If
            Case 10
                If motorClamp.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointClamp) =
                    motorControl.statusEnum.EXECUTION_END Then
                    systemSubState = 20
                End If
            Case 20
                If (motorClamp.drive(motorControl.motorCommandEnum.GO_POSITION, motorPointRelease) =
                    motorControl.statusEnum.EXECUTION_END) Then
                    TargetPositionInfo.Invoke.ModuleAction.writeFlag(interlockedFlag.POSITION_OCCUPIED, False)  'release the conveyor
                    systemSubState = 0  'rewind
                End If
        End Select
        Return 0
    End Function

    Function initMappingAndSetup()
        'Me.relatedFlags.AddRange(ShiftFlags.FlagElementsArray)
        'Me.relatedFlags.AddRange(SynchronFlags.FlagElementsArray)
        'If (UpstreamNode IsNot Nothing) Then
        '    Me.relatedFlags.AddRange(UpstreamNode.SynchronFlags.FlagElementsArray) 'relatingFlags
        'End If

        With relatedFlags
            .AddRange(FinishableFlags.FlagElementsArray)
        End With

        systemMainStateFunctions(systemStatesEnum.IGNITE) = AddressOf stateIgnite
        systemMainStateFunctions(systemStatesEnum.EXECUTE) = AddressOf stateExecute
        systemMainState = systemStatesEnum.IGNITE
        initEnableAllDrives() 'enable 此class裡所有的driveBase
        Return 0
    End Function

    Public Sub New()
        Me.initialize = [Delegate].Combine(Me.initialize, New Func(Of Integer)(AddressOf Me.initMappingAndSetup))
    End Sub

End Class
