Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports AutoNumeric
Imports MathNet.Numerics.LinearAlgebra
Imports AutoNumericTester.common

Namespace AutoNumeric.Tests
    <TestClass()> Public Class measuredDataPairTests

        Public Enum frames
            NOMINAL
            REAL
        End Enum

        Dim rnd As Random = New Random(Now.Millisecond)
        Dim noisePercentage As Double = 0.001

        <TestMethod()> Public Sub NewTest()

            Dim dataPair = New measuredDataPair(CreateVector.Dense(Of Double)(3),
                                                CreateVector.Dense(Of Double)(3))

            'no error
            Assert.IsTrue(dataPair.ErrorPosition.L2Norm = 0)
        End Sub

        <TestMethod()> Public Sub errorGainTest()
            Dim nomialPosition As PositionVector = New PositionVector(CreateVector.Random(Of Double)(3),
                                                                      frames.NOMINAL)

            Dim errorMatrix As errorHtm = New errorHtm(frames.NOMINAL,
                                                       frames.REAL)



            errorMatrix.ErrorVector = CreateVector.Random(Of Double)(6)

            Dim realPosition As PositionVector = errorMatrix * nomialPosition

            Dim dataPair = New measuredDataPair(nomialPosition.RawValue,
                                                realPosition.RawValue)

            Dim errorPositionRestore = dataPair.ErrorGain * errorMatrix.ErrorVector
            Dim errorPositionDifference = errorPositionRestore - dataPair.ErrorPosition
            'no error
            Assert.IsTrue(errorPositionDifference.ForAll(AddressOf isInTolerance),
                          String.Format("given {0}; restore {1}",
                                        dataPair.ErrorPosition.ToVectorString,
                                        errorPositionRestore.ToVectorString))
        End Sub

        <TestMethod()> Public Sub fitErrorVectorTest()
            common.tolerance = 0.00000001

            'error matrix initialize
            Dim errorMatrix As errorHtm = New errorHtm(frames.NOMINAL,
                                                       frames.REAL)
            errorMatrix.ErrorVector = CreateVector.Random(Of Double)(6)


            Dim nomialCenter As PositionVector = New PositionVector(CreateVector.Random(Of Double)(3),
                                                                    frames.NOMINAL)
            Dim nomialPosition As PositionVector = New PositionVector(frames.NOMINAL)

            Dim radius As Double = 100
            Dim divides As Integer = 10
            Dim radianIncrement As Double = ((360 / divides) / 180) * Math.PI
            Dim radianAccumulation As Double = 0

            Dim dataPairs As List(Of measuredDataPair) = New List(Of measuredDataPair)
            'generate nominal positions around a circle
            For index = 0 To divides - 1
                nomialPosition = New PositionVector(frames.NOMINAL)
                With nomialPosition
                    .X = .X + radius * Math.Cos(radianAccumulation)
                    .Y = .Y + radius * Math.Sin(radianAccumulation)
                    .Z = 1
                End With

                Dim realPosition As PositionVector = errorMatrix * nomialPosition

                With realPosition
                    'added some noise
                    Dim sign As Double = (rnd.Next(0, 2) - 0.5) * 2
                    .X += ((.X) * noisePercentage * rnd.NextDouble * sign)
                    sign = (rnd.Next(0, 2) - 0.5) * 2
                    .Y += ((.Y) * noisePercentage * rnd.NextDouble * sign)
                    sign = (rnd.Next(0, 2) - 0.5) * 2
                    .Z += ((.Z) * noisePercentage * rnd.NextDouble * sign)
                End With

                dataPairs.Add(New measuredDataPair(nomialPosition.RawValue,
                                                   realPosition.RawValue))

                radianAccumulation += radianIncrement
            Next

            Dim calculatedErrorVector As Vector(Of Double) = measuredDataPair.fitErrorVector(dataPairs)
            Dim errorPositionDifference = calculatedErrorVector - errorMatrix.ErrorVector

            Trace.WriteLine(errorPositionDifference.ToVectorString)

            'make sure in tolerance
            Assert.IsTrue(errorPositionDifference.ForAll(AddressOf isInTolerance),
                          String.Format("given {0}; restore {1}",
                                        errorMatrix.ErrorVector.ToVectorString,
                                        calculatedErrorVector.ToVectorString))
        End Sub

    End Class


End Namespace


