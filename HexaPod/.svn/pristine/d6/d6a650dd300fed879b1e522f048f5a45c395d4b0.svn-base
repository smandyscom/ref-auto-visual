Imports System.Text.RegularExpressions
Imports System.IO

Public Class compSmarPod
    Inherits compHexaPodBase

    Dim mSmarPod As New Smarpod
    Dim mPoint As Smarpod_Pose
    Dim taskMotion As Task(Of scaraExceptionPack)
    Property frmMain As Windows.Forms.Form
    Property ProjectFileRelativePath As String 'relative path in Data\SCARA_prj\*.sprj

    Public Function Initialize() As Integer
        mSmarPod.Initialize()
        mSmarPod.Calibrate()
        Try
            mSmarPod.Reset()
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace.ToString)
        End Try
        Return 0
    End Function
    Function GetPoints(sprjPath As String) As List(Of String)
        Dim _matchPointFileCollection As MatchCollection
        Dim points As New List(Of String)
        Using sr As New StreamReader(sprjPath)
            Dim rawData As String = sr.ReadToEnd()
            'Dim keyWord As String = "PointFile1[\s]*\{[\s]*(?i)(sname=\"")(.+\.pts)\""" '"PointFile1.*\{\n*.*sName=\""(.+)\"""
            Dim keyWord As String = "(?i)(sname=\"")(.+\.pts)\""" '"PointFile1.*\{\n*.*sName=\""(.+)\"""
            _matchPointFileCollection = Regex.Matches(rawData, keyWord) '尋找開頭為{，結尾為;}的字串，並把它定義為group 1，已去除開頭與結尾字串
        End Using
        For i As Integer = 0 To _matchPointFileCollection.Count - 1
            Dim pointFileName As String = _matchPointFileCollection(i).Groups(2).Value
            Using sr As New StreamReader(System.IO.Path.Combine(System.IO.Path.GetDirectoryName(sprjPath), pointFileName))
                Dim rawData As String = sr.ReadToEnd()
                Dim keyWord As String = "(?i)(sLabel=\"")(.+)\""" '"PointFile1.*\{\n*.*sName=\""(.+)\"""
                Dim _matchPointCollection As MatchCollection
                _matchPointCollection = Regex.Matches(rawData, keyWord) '尋找開頭為{，結尾為;}的字串，並把它定義為group 1，已去除開頭與結尾字串
                For Each _match As Match In _matchPointCollection
                    points.Add(_match.Groups(2).Value)
                Next
            End Using
        Next
        Return points
    End Function

    Protected Overrides Function Soft_Emg_Stop() As Integer
        mSmarPod.Stop()
        Return 0
    End Function
    Protected Overrides Function CommandInCycle() As Boolean
        If taskMotion IsNot Nothing AndAlso taskMotion.IsCompleted = False Then Return True
        Return mSmarPod.CommandInCycle
    End Function
    Protected Overrides Function pauseCommand() As Integer
        mSmarPod.Pause()
        Return 0
    End Function

    Protected Overrides Function resumeCommand() As Integer
        mSmarPod.Continue()
        Return 0
    End Function
    Protected Overrides Function go() As scaraExceptionPack

        If CommandInCycle() = True Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_TaskIsNotCompleted, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_TaskIsNotCompleted)}
        End If
        If PositionPoint Is Nothing Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_No_Assigning_Point, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_No_Assigning_Point)}
        End If
        taskMotion = Task.Factory.StartNew(Function()
                                               Try
                                                   mSmarPod.Go(New SpelPoint With {
                                                    .X = PositionPoint.X, .Y = PositionPoint.Y,
                                                    .Z = PositionPoint.Z, .U = PositionPoint.U,
                                                    .Local = PositionPoint.Local,
                                                    .Hand = PositionPoint.Hand})
                                               Catch ex As SpelException
                                                   Return New scaraExceptionPack With {.ErrorNumber = ex.ErrorNumber,
                                                                                       .StackTrace = .StackTrace,
                                                                                       .Message = .Message}
                                               End Try
                                               Return Nothing
                                           End Function)
        Return Nothing
    End Function
    Protected Overrides Function gorel() As scaraExceptionPack

        If CommandInCycle() = True Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_TaskIsNotCompleted, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_TaskIsNotCompleted)}
        End If
        If PositionPoint Is Nothing Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_No_Assigning_Point, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_No_Assigning_Point)}
        End If
        'mSmarPod.Go("Here +X(10)+Y(10)+Z(-10)+U(10)")
        taskMotion = Task.Factory.StartNew(Function()
                                               Try

                                                   mSmarPod.Go(String.Format("Here +X({0})+Y({1})+Z({2})+U({3})",
                                                                           PositionPoint.X, PositionPoint.Y,
                                                                           PositionPoint.Z, PositionPoint.U))
                                               Catch ex As SpelException
                                                   Return New scaraExceptionPack With {.ErrorNumber = ex.ErrorNumber,
                                                        .StackTrace = .StackTrace,
                                                        .Message = .Message}
                                               End Try
                                               Return Nothing
                                           End Function)
        Return Nothing
    End Function
    Protected Overrides Function home() As scaraExceptionPack
        If CommandInCycle() = True Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_TaskIsNotCompleted, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_TaskIsNotCompleted)}
        End If
        taskMotion = Task.Factory.StartNew(Function()
                                               Try
                                                   mSmarPod.Home()
                                               Catch ex As SpelException
                                                   Return New scaraExceptionPack With {.ErrorNumber = ex.ErrorNumber,
                                                                                       .StackTrace = .StackTrace,
                                                                                       .Message = .Message}
                                               End Try
                                               Return Nothing
                                           End Function)
        Return Nothing
    End Function
    Protected Overrides Function jump() As scaraExceptionPack

        If CommandInCycle() = True Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_TaskIsNotCompleted, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_TaskIsNotCompleted)}
        End If
        If PointTable.Count = 0 Then
            Return New scaraExceptionPack With {.ErrorNumber = returnErrorCodes.ERR_No_Assigning_Point, .StackTrace = "", .Message = [Enum].GetName(GetType(returnErrorCodes), returnErrorCodes.ERR_No_Assigning_Point)}
        End If
        Dim destinationPoint As New SpelPoint With {
                                                        .X = PositionPoint.X, .Y = PositionPoint.Y,
                                                        .Z = PositionPoint.Z, .U = PositionPoint.U,
                                                        .Local = PositionPoint.Local,
                                                        .Hand = PositionPoint.Hand}
        taskMotion = Task.Factory.StartNew(Function()
                                               Try
                                                   If PointTable.Count = 1 Then '只有一個位置
                                                       mSmarPod.Jump(destinationPoint)
                                                   ElseIf PointTable.Count = 2 Then
                                                       Dim LimZ As String = "LimZ " & PointTable(1).Z.ToString
                                                       mSmarPod.Jump(destinationPoint, LimZ)
                                                   End If
                                               Catch ex As SpelException
                                                   Return New scaraExceptionPack With {.ErrorNumber = ex.ErrorNumber,
                                                                                       .StackTrace = .StackTrace,
                                                                                       .Message = .Message}
                                               End Try
                                               Return Nothing
                                           End Function)
        Return Nothing
    End Function
    Public Overrides Function GetPoint(pointIndex As Integer) As hexaPoint
        Dim p As New hexaPoint
        With mSmarPod.GetPoint(pointIndex)
            p.PosX = .X
            p.Y = .Y
            p.Z = .Z
            p.U = .U
            p.Hand = .Hand
            p.Local = .Local
        End With
        Return p

    End Function

    Protected Overrides Function checkMotionDone() As scaraExceptionPack
        Return taskMotion.Result
    End Function
    Public Overrides Sub showWindow(windows As windowsEnum, sender As Windows.Forms.Form)
        Try
            mSmarPod.ShowWindow(windows, sender)
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try

    End Sub
    Public Overrides Sub runDialog(dialog As dialogEnum, sender As Windows.Forms.Form)
        Try
            mSmarPod.RunDialog(dialog, sender)
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try
    End Sub

    Public Overrides Function Disconnect() As Integer
        Try
            mSmarPod.Disconnect()
            mSmarPod.Dispose()
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try
        Return 0
    End Function
    Public Overrides Sub programMode()
        Try
            mSmarPod.OperationMode = SpelOperationMode.Program
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try

    End Sub
    Public Overrides Sub reset()
        Try
            mSmarPod.Reset()
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try

    End Sub
    Public Overrides Sub teachPoint()
        Try
            mSmarPod.TeachPoint("robot1.pts", 1, "Teach Pick Position")
        Catch ex As Exception
            MsgBox(ex.Message & vbNewLine & ex.StackTrace)
        End Try

    End Sub

    Public Overrides Function Connect() As scaraExceptionPack
        mSmarPod.SLock()
        Return Nothing
    End Function


    Public Sub New()
        MyBase.New()
        Initialize()
    End Sub
    Protected Overrides Function GetPosition() As Single()
        Return mSmarPod.GetRobotPos(SpelRobotPosType.World, 0, 0, 0)
    End Function

    Public Overloads Overrides Function Connect(modelNum As UInteger, strIP As String, strPort As String) As UInteger

    End Function

    Public Overrides Function lock() As compHexaPodBase.scaraExceptionPack
        mSmarPod.  'smarPod servo on
    End Function
    Public Overrides Function free() As scaraExceptionPack
        mSmarPod.SFree()
        Return Nothing
    End Function
End Class
